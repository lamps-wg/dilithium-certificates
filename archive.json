{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-04-08T00:58:21.838696+00:00",
  "repo": "lamps-wg/dilithium-certificates",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOIEpj4c5SqJ6k",
      "title": "Misc Comments from Markku 9/6/2022",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/1",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "jakemas"
      ],
      "labels": [
        "bug"
      ],
      "body": "- [x] The new title should be something like \"Algorithms and Identifiers for CRYSTALS-DILITHIUM in the Internet X.509 Public Key Infrastructure.\u201d \r\n- [x] The document should more clearly identify the version of Dilithium: 3.1. If there are more versions, those would have different identifiers. There has been compatibility-breaking changes after the version submitted as a Finalist to Round 3, which is still on the NIST website (we've had customers try to match our implementation with those v3.0 KATs, requiring explanations). The changes from 3.0 to 3.1 include a security fix (at Level 5), so compatibility with the latest version is important. See Vadim Lyubashevsky's explanation, February 8, 2021: https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/BjfjRMIdnhM/m/W7kkVOFDBAAJ  Note that there were several other internal changes in from 3.0. to 3.1 apart from the hash lengths.\r\n- [ ] A note about the signing process would be helpful; Dilithium 3.1 computes a signature for mu = H2( H1(pk) | M ), where H1 is SHAKE-256 truncated to 32 bytes -- a hash of the public key, also denoted \"tr\" -- and H2 is SHAKE-256 truncated to 64 bytes. The number designation of SHAKE of course indicates security level, not the output length, as SHAKE is an XOF. \r\n- [x] I suggest the document also includes signature sizes for (detached) signatures: 2420, 3293, and 4595 bytes. Currently, only public and private key sizes are reported in Appendix B of the I-D. \r\n- [x] ~~The secret key lengths in Appendix B match with v3.1 (v3.0 has 16 bytes longer private keys), but do not account for ASN.1 encoding of the SEQUENCE in Section 5 of the same I-D. Even section 5 itself does not seem to account for this as it reports \"the size necessary to hold all private key elements.\" There is a de facto key transport encoding for secret keys, defined by the algorithm designers and used in KAT tests, that doesn't have ASN.1 encoding of individual components. It can be simply taken as an OCTET STRING, just like the public key in this I-D. The lengths in Appendix B match that encoding, not the completely new encoding in Section 5.~~ Addressed in https://github.com/lamps-wg/dilithium-certificates/pull/61\r\n- [x] ~~Section 5 states \"The randomized version can be invoked by leaving K as EMPTY.\" Private key formats are determined by application requirements and should not be used as \"APIs\" to affect functionality as suggested. Side-channel secure implementations will only use this type of plaintext ASN.1 encoding for backup/transport (never actively) and are likely to always perform randomized signing. Some other implementations (perhaps without trustworthy RNGs) may always perform deterministic signing; this does not break the interoperability of signatures. The explanation for the \"tr\" field in that private key format is not accurate (see above).~~ Created [new issue](https://github.com/lamps-wg/dilithium-certificates/issues/6) for this.\r\n",
      "createdAt": "2022-09-06T13:18:10Z",
      "updatedAt": "2024-12-12T15:39:21Z",
      "closedAt": "2024-12-12T15:39:21Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The document should more clearly identify the version of Dilithium: 3.1. If there are more versions, those would have different identifiers. There has been compatibility-breaking changes after the version submitted as a Finalist to Round 3, which is still on the NIST website (we've had customers try to match our implementation with those v3.0 KATs, requiring explanations). The changes from 3.0 to 3.1 include a security fix (at Level 5), so compatibility with the latest version is important. See Vadim Lyubashevsky's explanation, February 8, 2021: https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/BjfjRMIdnhM/m/W7kkVOFDBAAJ Note that there were several other internal changes in from 3.0. to 3.1 apart from the hash lengths.\r\n\r\nI am not sure this will be of value in the end. It is probably useful right now for interop reasons, but in the end, there will only be one Dilithium algorithm, the one specified by NIST. ",
          "createdAt": "2022-10-25T02:32:44Z",
          "updatedAt": "2022-10-25T02:32:44Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with you Panos. I've mentioned in the EDNOTE on page 1 that this is concerning Dilithium 3.1 2021-02-08, but I am reluctant to go into more details of differing historic versions and I can see this being confusing to the reader once the NIST process itself has complete.",
          "createdAt": "2022-10-25T16:40:05Z",
          "updatedAt": "2022-10-25T16:40:05Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this has all been addressed or has become irrelevant now.",
          "createdAt": "2024-12-11T13:49:00Z",
          "updatedAt": "2024-12-11T13:49:16Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The \r\n> The lengths in Appendix B match that encoding, not the completely new encoding in Section 5.\r\n\r\nseems to not have been addressed. I am not sure it is worth it though. MAybe we can just add a parenthesis in \r\n> The parameter sets defined for NIST security levels 2, 3 and 5 are listed in the Figure 1, along with the resulting signature size, public key, and private key sizes in bytes.\r\n\r\nto say \r\n> the ASN.1 encoding defined in this document is not in these sizes)\r\n\r\n?\r\n",
          "createdAt": "2024-12-12T04:05:53Z",
          "updatedAt": "2024-12-12T04:05:53Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All addressed, closing. ",
          "createdAt": "2024-12-12T15:39:21Z",
          "updatedAt": "2024-12-12T15:39:21Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOIEpj4c5SqJ-U",
      "title": "Add Dilithium-2 paragraph in Security Considerations",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/2",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "Dilithium-2 offers a CoreSVP hardness of ~118 bits of security which is a little lower than it should. The Kyber submission refines the CoreSVP cost by using sieving cost simulations and claims that the gate and memory cost is ~2^150 and ~2^90 approximately which they argue is better than AES. I think it would be worth to call out the CoreSVP hardness and the refined estimate for Dilithium-2 in the Sec Considerations section. ",
      "createdAt": "2022-08-18T02:14:49Z",
      "updatedAt": "2024-12-12T15:08:33Z",
      "closedAt": "2024-12-12T15:08:32Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Depending on what gets standardized, this will be of value in the end. In the end, there will only be one Dilithium algorithm, the one specified by NIST with or without the Dilithium-2 parameter. ",
          "createdAt": "2022-10-25T02:30:31Z",
          "updatedAt": "2022-10-25T02:30:31Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What does the team think about adding a small paragraph about ML-DSA-44 and its <2^128 theoretical security?",
          "createdAt": "2024-12-12T04:01:32Z",
          "updatedAt": "2024-12-12T04:01:32Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "AFAIK there is no demonstration that ML-DSA-44 doesn't reach NIST PQC security level 2 in practice, let alone 1. Security estimates will continue to evolve: practical attacker models will be more refined, and cryptanalysis will continue to improve. I do not think the static security considerations section of an RFC is the best place to speculate on that. It might be helpful to note to the reader that they might want to check out the latest understanding of ML-DSA's security, as it's likely more volatile than that of say SLH-DSA.",
          "createdAt": "2024-12-12T12:29:35Z",
          "updatedAt": "2024-12-12T12:29:35Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can live with that. \r\nClosing. ",
          "createdAt": "2024-12-12T15:08:32Z",
          "updatedAt": "2024-12-12T15:08:32Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOIEpj4c5SqKBR",
      "title": "hash-then-sign or not",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/3",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "From Mike Ounsworth \r\n\r\n> Hi Jake, Panos, Sean, Bas,\r\n> \r\n> We notice that your IETF draft-massimo-lamps-pq-sig-certificates-00 has the following security consideration:\r\n> \r\n> > Within the hash-then-sign paradigm, hash functions are used as a \r\n> > domain restrictor over the message to be signed. By pre-hashing, the \r\n> > onus of resistance to existential forgeries becomes heavily reliant on \r\n> > the collision-resistance of the hash function in use. As well as this security goal, the hash-then-sign paradigm also has the ability to improve performance by reducing the size of signed messages. As a corollary, hashing remains mandatory even for short messages and assigns a further computational requirement onto the verifier. This makes the performance of hash-then-sign schemes more consistent, but not necessarily more efficient.\r\n> > Dilithium diverges from the hash-then-sign paradigm by hashing the message during the signing procedure (at the point in which the challenge polynomial).\r\n> > However, due to the fact that Dilithium signatures may require the \r\n> > signing procedure to be repeated several times for a signature to be produced, Dilithium implementations can make use of pre-hashing the message to prevent rehashing with each attempt.\r\n> \r\n> First, quoting from the Dilithium NIST Round 3 submission documents:\r\n> \r\n> > Since our signing procedure may need to be repeated several times \r\n> > until a signature is produced, we also append a counter in order to \r\n> > make the SHAKE-256 output differ with each signing attempt of the same message.\r\n> \r\n> So it seems like the Dilithium designers explicitly want the hash to differ across repeated attempts.\r\n> \r\n> Second, we had a similar discussion within the context of composite signatures when figuring out how to combine Dilithium and Falcon with ECDSA and RSA. We came out with a different conclusion; that hash-then-sign reduces the security properties of Dilithium and Falcon down to the collision resistance of the hash function used to pre-hash.\r\n> \r\n> We would like community opinion on this.\r\n> \r\n> Here's the Security Consideration text that we're working on:\r\n> \r\n> In the hash-then-sign paradigm, the message to be signed is hashed externally to the signature primitive, and then the hash value is signed.\r\n> \r\n> The hash-then-sign paradigm is required, for example, with RSA signatures in order to sign messages larger than the RSA modulus. Hash-then-sign also gives performance and bandwidth benefits, for example, when the signature is performed by a networked cryptographic appliance since you only need to send a small hash value rather than streaming the entire message.\r\n> \r\n> With Dilithium and Falcon signatures it is not recommended to pre-hash for the following reasons:\r\n> \r\n> The Dilithium construction includes\r\n> \r\n> ~~~\r\n> Sign(sk,M):\r\n> 10: mu \\in {0, 1}^384 := CRH(tr || M)\r\n> ~~~\r\n> \r\n> where `CRH` is any collision-resistant hash function and `tr` is a component of the secret key. This provides strong security against pre-computed collision attacks since an attacker has no a-priori knowledge of `r` and provides per-key hash-domain separation of the message to be signed.\r\n> \r\n> The Falcon construction includes\r\n> \r\n> ~~~\r\n> Sign (m, sk, beta^2):\r\n> 1: r <- {0, 1}^320 uniformly\r\n> 2: c <- HashToPoint(r || m, q, n)\r\n> ~~~\r\n> \r\n> where `HashToPoint` is a SHAKE-256-based construct. This provides strong security against pre-computed collision attacks since an attacker has no a-priori knowledge of `r` and provides per-signature hash-domain separation of the message to be signed.\r\n> \r\n> If the message to be signed is pre-hashed, for example `m0 = SHA256(m)` and then m0 provided to Dilithium or Falcon to sign, then you have re-introduced the collision problem since two messages m1 and m2 where SHA256(m1) == SHA256(m2) hash value will result a single Falcon or Dilithium signature value which is simultaneously valid for both m1 and m2. This removes the extra collision resistance built in to the Dilithium and Falcon primitives and reduces it to the collision resistance strength of the underlying hash function. For this reason it is in general not recommended to pre-hash when using Dilithium or Falcon except in cases where the implementor is comfortable with this reduction in security.\r\n> \r\n> Therefore, for the purpose of interoperability of composite signatures, implementations MUST NOT pre-hash messages for Dilithium and Falcon. If pre-hashed versions of these signatures are desired, then separate signature algorithms will need to be defined.\r\n> \r\n> Third, I can imagine that some applications (like TLS) will want to use non-pre-hashed versions of Dilithium and Falcon, but other applications (like code-signing) would prefer pre-hashed versions. These are not interoperable with each other. Is NIST planning to produce algorithm definitions, OIDs, Codepoints, etc, for both versions?\r\n\r\nMore details in the thread https://mailarchive.ietf.org/arch/msg/spasm/PT7jTztNfI1K6DkS7bQ_SkljoVI/ \r\n",
      "createdAt": "2022-08-17T18:26:57Z",
      "updatedAt": "2022-11-22T04:07:28Z",
      "closedAt": "2022-11-22T04:07:28Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "More details on the advantages of message binding on C. Peikert's https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/eAaiJO1qzkA/m/FIYT_anuAAAJ ",
          "createdAt": "2022-08-17T19:04:01Z",
          "updatedAt": "2022-08-17T19:04:01Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "**From Scott Fluhrer**\r\n\r\n> Hi Jake, Panos, Sean, Bas,\r\n>\r\n>\r\n> We notice that your IETF draft-massimo-lamps-pq-sig-certificates-00 has the\r\n> following security consideration:\r\n>\r\n> > Within the hash-then-sign paradigm, hash functions are used as a\r\n> > domain restrictor over the message to be signed. By pre-hashing, the\r\n> > onus of resistance to existential forgeries becomes heavily reliant on\r\n> > the collision-resistance of the hash function in use. As well as this security\r\n> goal, the hash-then-sign paradigm also has the ability to improve\r\n> performance by reducing the size of signed messages. As a corollary, hashing\r\n> remains mandatory even for short messages and assigns a further\r\n> computational requirement onto the verifier. This makes the performance of\r\n> hash-then-sign schemes more consistent, but not necessarily more efficient.\r\n> > Dilithium diverges from the hash-then-sign paradigm by hashing the\r\n> message during the signing procedure (at the point in which the challenge\r\n> polynomial).\r\n> > However, due to the fact that Dilithium signatures may require the\r\n> > signing procedure to be repeated several times for a signature to be\r\n> produced, Dilithium implementations can make use of pre-hashing the\r\n> message to prevent rehashing with each attempt.\r\n>\r\n>\r\n> First, quoting from the Dilithium NIST Round 3 submission documents:\r\n>\r\n> > Since our signing procedure may need to be repeated several times\r\n> > until a signature is produced, we also append a counter in order to\r\n> > make the SHAKE-256 output differ with each signing attempt of the same\r\n> message.\r\n>\r\n> So it seems like the Dilithium designers explicitly want the hash to differ\r\n> across repeated attempts.\r\n>\r\n\r\nHmmm, I don't see that in Dilithium; are they referring to the internal ExpandMask function?  That isn't applied to the input message.\r\n\r\nIn any case, it's easy to derive SHAKE( M || 1 ), SHAKE( M || 2 ), ... without multiple passes through M; you compute the partial SHAKE state after process M, and then apply that partial state to 1, 2, ...\r\n\r\n>\r\n>\r\n> Second, we had a similar discussion within the context of composite\r\n> signatures when figuring out how to combine Dilithium and Falcon with\r\n> ECDSA and RSA. We came out with a different conclusion; that hash-then-\r\n> sign reduces the security properties of Dilithium and Falcon down to the\r\n> collision resistance of the hash function used to pre-hash.\r\n>\r\n> We would like community opinion on this.\r\n>\r\n>\r\n> Here's the Security Consideration text that we're working on:\r\n>\r\n>\r\n>\r\n>\r\n> In the hash-then-sign paradigm, the message to be signed is hashed\r\n> externally to the signature primitive, and then the hash value is signed.\r\n>\r\n> The hash-then-sign paradigm is required, for example, with RSA signatures in\r\n> order to sign messages larger than the RSA modulus. Hash-then-sign also\r\n> gives performance and bandwidth benefits, for example, when the signature\r\n> is performed by a networked cryptographic appliance since you only need to\r\n> send a small hash value rather than streaming the entire message.\r\n>\r\n> With Dilithium and Falcon signatures it is not recommended to pre-hash for\r\n> the following reasons:\r\n>\r\n>\r\n> The Dilithium construction includes\r\n>\r\n> ~~~\r\n> Sign(sk,M):\r\n> 10: mu \\in {0, 1}^384 := CRH(tr || M)\r\n> ~~~\r\n>\r\n> where `CRH` is any collision-resistant hash function and `tr` is a component\r\n> of the secret key.\r\n\r\nA hash of the public key, actually; see line 7 of the key generation process (which explicitly computes it from the components of the public key) - Dilithium stores it in the private key so the signer doesn't need to recompute it every time.\r\n\r\n> This provides strong security against pre-computed\r\n> collision attacks since an attacker has no a-priori knowledge of `r` and\r\n> provides per-key hash-domain separation of the message to be signed.\r\n\r\nRather, it limits the usability of any found collision to a specific public key; however it does nothing to frustrate a collision attack against a specific public key.\r\n\r\nNow, it does probably add a constant factor to any attack that searches for a simultaneous collision between the hash that RSA/ECDSA uses (without the prepend) and the hash that Dilithium uses (with the known prepend) - I would hesitate to give a value to that constant factor, but it is likely not large.\r\n",
          "createdAt": "2022-08-17T19:30:50Z",
          "updatedAt": "2022-08-17T19:30:50Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "From Mike Ounsworth:\r\nI want to break out and expand our third point as it is actually a question to NIST and not to the IETF authors.\r\n\r\n\r\n> Third, I can imagine that some applications (like TLS) will want to use non-pre-hashed versions of Dilithium and Falcon, but other applications (like code-signing) would prefer pre-hashed versions. These are not interoperable with each other. Is NIST planning to produce algorithm definitions, OIDs, Codepoints, etc, for both versions?\r\n\r\nExpanding on the code-signing example: the messages to be signed can be very large; consider a several GB firmware image. Assuming our understanding below is correct, a direct-sign algorithm would require the entire thing to be streamed to a network HSM for signing and to a TPM for verification. Conversely code-signing environments often include counter-signatures from Time Stamping Authorities which protect against future discovery of collision attacks against the hash function -- as an example, Windows still accepts RSA-SHA1 signatures produced before SHA1 was deprecated. I can imagine that the code-signing community will decide that the performance gains of hash-then-sign outweigh the security loss.\r\n\r\nSo, will NIST standardize both direct-sign and some variant of hash-then-sign for PQC signature primitives?\r\n",
          "createdAt": "2022-08-17T19:31:58Z",
          "updatedAt": "2022-08-17T19:31:58Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": ">>So it seems like the Dilithium designers explicitly want the hash to differ across repeated attempts.\r\n>    \r\n>Hmmm, I don't see that in Dilithium; are they referring to the internal ExpandMask function?  That isn't applied to the input message.\r\n>In any case, it's easy to derive SHAKE( M || 1 ), SHAKE( M || 2 ), ... without multiple passes through M; you compute the partial SHAKE state after process M, and then apply that partial state to 1, 2, ...\r\n\r\nI think we are referring to different parts of the signing process here. For reference, my security consideration was referring to page 4 of the Dilithium spec that states:\r\n\"Our full scheme in Fig. 4 also makes use of basic optimizations such as pre-hashing the message M so as to not rehash it with every signing attempt.\" and Figure 4 itself.\r\n\r\nIt was my understanding that the signing procedure may need to be repeated several times to produce a signature, and thus pre-hashing would prevent the need to individually hash the input message with each attempt. I believe the desired differing of the hash you mentioned is within the internals of the signing procedure and not on the input message itself.\r\n\r\n   >> Third, I can imagine that some applications (like TLS) will want to use non-pre-hashed versions of Dilithium and Falcon, but other applications (like code-signing) would prefer pre-hashed versions. These are not interoperable with each other. Is NIST planning to produce algorithm definitions, OIDs, Codepoints, etc, for both versions?\r\n\r\n   >Expanding on the code-signing example: the messages to be signed can be very large; consider a several GB firmware image. Assuming our understanding below is correct, a direct-sign algorithm would require the entire thing to be streamed to a network HSM for signing and to a TPM for verification. Conversely code-signing environments often include counter-signatures from Time Stamping Authorities which protect against future discovery of collision attacks against the hash function -- as an example, Windows still accepts RSA-SHA1 signatures produced before SHA1 was deprecated. I can imagine that the code-signing community will decide that the performance gains of hash-then-sign outweigh the security loss.\r\n\r\n>So, will NIST standardize both direct-sign and some variant of hash-then-sign for PQC signature primitives?\r\n\r\nI do agree that there may be optimizations that users may wish to make dependent on the context, i.e., hash-then-sign vs direct-sign. It's for this reason I tried to give an overview of the security of each option in the draft, but ultimately leave that up to the user. It is a good point regarding NISTs perspective on what should be explicitly standardized here.\r\n\r\n>> This provides strong security against pre-computed\r\n>> collision attacks since an attacker has no a-priori knowledge of `r` and\r\n>> provides per-key hash-domain separation of the message to be signed.\r\n>\r\n>Rather, it limits the usability of any found collision to a specific public key; however it does nothing to frustrate a collision attack against a specific public key.\r\n\r\nRight, more details on the advantages of message binding on the PQC-forum from C. Peikert's https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/eAaiJO1qzkA/m/K66R_ftNBwAJ. It was this discussion I was trying to encompass in the draft.",
          "createdAt": "2022-08-17T19:42:05Z",
          "updatedAt": "2022-08-17T19:42:05Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Doing a thorough analysis on the topic, it seems the best approach is to follow EdDSA and do not digest. There is no practical performance impact for most X.509 usecases and even for PKCS#11 with incremental APIs and big messages there will be no issue just for Dilithium. More details in the doc written for NCCOE. \r\n\r\nKeeping it as pure Dilithium, no digest. ",
          "createdAt": "2022-11-22T04:07:19Z",
          "updatedAt": "2022-11-22T04:07:19Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOIEpj4c5SqKEL",
      "title": "public key as octet string",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/4",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Address discussion in https://mailarchive.ietf.org/arch/msg/spasm/pDD40rIFpdN7SijRp_2WgihRbxA/ about bit or octet string according to consensus",
      "createdAt": "2022-08-09T18:12:30Z",
      "updatedAt": "2024-12-12T16:58:06Z",
      "closedAt": "2024-12-12T16:58:05Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "By Simon G. \r\n\r\n> - I also support the byte array encoding for the private key proposed by the algorithm designers. It is an already defined encoding, so I think it makes sense to take that one.\r\nAlso the public key is encoded as an array (but as a BIT STRING instead, because of rfc 5912), so I think to be at least somewhat consistent the private and public key should be \r\nencoded as an OCTET STRING and BIT STRING respectively.\r\n> - On that note I just wanted to add that I think it would make more sense that the public key is also encoded as an OCTET STRING, but I guess that can't happen because of backward-compatibility.     \r\n",
          "createdAt": "2022-09-08T14:22:31Z",
          "updatedAt": "2022-09-08T14:23:32Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "By Markku, \r\n\r\n> I guess it can be a BIT STRING, but it clearly must be of a specific length. For verification purposes, the algorithm identifiers for Dilithium2, Dilithium3, and Dilithium5 should be explicit. Determining that from the public key length is a hack and could be a security issue. Just noting that for completeness; the current \"id-dilithiumTBD\" is clearly temporary. Anyway, a Dilithium-in-PKI I-D would need very clear verification rules related to this issue.\r\n> \r\n> Whatever format the public key is wrapped in, the \"raw concatenated sequence of bytes\" (without any ASN.1 tags, as defined for algorithm designers for public keys) is actually used inside the signature process itself: the thing being signed is always prefixed by its hash: mu = H( H(pk) | m ). One obviously can't sign or verify in an interoperable fashion if one doesn't use that specific raw format for the hash prefix H(pk), also denoted \"tr\" in the spec. It is encoded into the secret key just to tie the public key with the secret key: Key import functions must check that the \"tr\" hash matches.\r\n",
          "createdAt": "2022-09-08T14:22:35Z",
          "updatedAt": "2022-09-08T14:23:16Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Current language used is similar to [RFC3279](https://www.rfc-editor.org/rfc/rfc3279) says \r\n\r\n>   The elliptic curve public key (an ECPoint which is an OCTET STRING)\r\n>    is mapped to a subjectPublicKey (a BIT STRING) as follows:  the most\r\n>    significant bit of the OCTET STRING becomes the most significant bit\r\n>    of the BIT STRING, and the least significant bit of the OCTET STRING\r\n>    becomes the least significant bit of the BIT STRING.",
          "createdAt": "2022-11-03T02:54:40Z",
          "updatedAt": "2022-11-03T02:54:40Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Suggestion by @baentsch \r\n\r\n> may I suggest to (re-)add reference to [SEC1] as well as a sample pub key in section 4 of your draft? \r\n",
          "createdAt": "2022-11-03T13:11:48Z",
          "updatedAt": "2022-11-03T16:43:48Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From @baentsch\r\n\r\n> Should you be looking for a sample pub key, here we go: Dilithium2 with the next available NIST OID \"2.16.840.1.101.3.4.3.17\" as it's now generated by OpenSSL3+oqsprovider:\r\n> \r\n> -----BEGIN PUBLIC KEY-----\r\n> MIIFMjALBglghkgBZQMEAxEDggUhAGfo4APVpCWuTTvyoUpSRos6ku+jjqY5QeLz\r\n> SSERjGF26euQOc4vzl0BtR3IC7cNvFp4oKkplCPWuvHTB3mkW+KOBE+tm4xdxAXG\r\n> TwNrgCbUZVGfZpcVmNRQpliF1P5hC2s2jUtZvqOI1VMMOwy9S0i4XmgRIQo3MhOX\r\n> GPeTtAzp1EiyH6LlCVgHZKBLoof5dka5yLMkUidEf7JmsQVsPCd8PpfVOmkMgr0D\r\n> BY+iUx5xLM5IRw6eVCgZTgx62IRG0Qcu0FlpL0giV/tniV4R9y/4gIQT/ThRy1YU\r\n> 8KggifXDngNPyxRVd+Z/U81VBxTiSD8syqmn/Jg5QEbhBnV1FERV1kRBstMRNUld\r\n> pJ6u2j7ru03vnqlf0LhX57RP8gJmTqu2fsvuRCpCVQ/6WG89I3tBGjSrYshJIKLE\r\n> OtxSQTmKoqyRm8A2T/OGDflyQ9KBJZbdzP7ILJUUBbsS69/3Fd57ke8LIsxkhpNX\r\n> lXUSFxRQkz91WmE1yaVnawgb3H+pWxUWWlWj5Un95RYpLMeW1EATAXrAIGHHa2wX\r\n> VHofEMsHiow7PsWFvW6TCOPGeEifJPRFCbcGkiay7PqFW/WPiCqt/jPhf/43/SqB\r\n> 4Rm+5RdYdp+dRtWFgnw73WRA84eYwr9U692LwEu9J6QKcRXua7zCP/PDbIaDpVij\r\n> wLW8/Xso9F135VJxR9GHPa/IS1lHBE1NrCxTSOvgqgVKzWYvxYkn/UkGCRzKlDW4\r\n> q2r22+4Y5c9j8Pil9tlt/6BMVAai+rpTgbAnU2w81TsFtQMiCHAiKDzz1xow6Aic\r\n> dbX6+oLLuZrwsgKeXe7XtnhFQJuupgUbBRLTo6tVu/kwdpCwJBH4NtwkTwZUTDy8\r\n> NbPVFE7ljZ8J5lcsYCf780Bh4DRkg3Ld5RnrWif4yNGgzzSBKidgAiw1jJgsZaQa\r\n> ktb4wgGyx4iXw+SqDTewaUO8cPCtgvn5IYJIVFRidNUflpTpETjgQES8z8/VwgQW\r\n> gu3W639dygg+8D1QOytlI8gDrIOEa3+xQpoSIXAmzOT3y9ipSr57SuphFdHwvaw2\r\n> p5w+bMgAdSDk+CBEJPzjkdhp7iGk0i6JHxRbXns4kFJpdnNqZnh7T7fwgmpWaeuv\r\n> esXOn94Jucda4wSFNHxV/VIth3QtizysyY5gjsOfHTOxI8u4jDGG/m1Ei5oduRfj\r\n> NFQE+7VR/PisG/YM+rcBuE2uJITB68mRpiHG1lSpDOtOmDjAeIHvjSI7/eFyHU4M\r\n> DYXQZFoc77CrF/lSRYZPwN5uJAXJB9SiJsYbLNwUAIXlkVDq+p+YEedElR/rnH3V\r\n> +9Vha0zsLMmQFNrmJpkRedQ2LCSVUx8vuiFSB05a0sb2LmeOIGr4eoE9u6UvLNun\r\n> U1e8rhX1NZafATIWhqedJQjzSfsGQjkHrQfWRjH1IWdPP9ZJiNP0jSHTsMgnOpnz\r\n> YPe6ob9fwmCNTrtL79gUEDPe1s05+5JDzmyehMiEnYAm8xYXXFmEmi6dVzIKv5rf\r\n> 6ENJT90dba3PQM2jyLsqt0ywYzpL9xyg/dwpjhQa9gMm8cdJiJ6JrfdL8h1D1Rzt\r\n> c/2HHKoBkwssE3P/llbF3qD/j3dB7nM/2UXBZja2jLU6fOGxRnDdresWJK0qEPej\r\n> ixCjNQfTTCpFNc1/+6LAG6GnvPIUMgrT/Bc2HCW6AY1qWArUOwq2E2PQR3KhJ6rc\r\n> zXmCrNsf5s5Z2QoiGVuva6OiiVPFMB5TmXnuGU5pLO3FVyvxo9A=\r\n> -----END PUBLIC KEY-----\r\n\r\n",
          "createdAt": "2022-11-03T16:44:50Z",
          "updatedAt": "2022-11-03T16:44:50Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Our text still has \r\n\r\n> MLDSAPublicKey ::= OCTET STRING \r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-lamps-kyber-certificates has it much simpler \r\n\r\n> -- KEY no ASN.1 wrapping --\r\n\r\nDid we ever address the draft to follow the whole discussion about octer vs bit string and the extra encoding for octet or not? \r\n\r\n@jakemas ?",
          "createdAt": "2024-10-03T18:00:34Z",
          "updatedAt": "2024-10-03T18:00:34Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Is this resolved?",
          "createdAt": "2024-12-11T13:44:53Z",
          "updatedAt": "2024-12-11T13:44:53Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think. \r\n\r\n@jakemas confirm?",
          "createdAt": "2024-12-12T03:45:10Z",
          "updatedAt": "2024-12-12T03:45:10Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes",
          "createdAt": "2024-12-12T16:58:05Z",
          "updatedAt": "2024-12-12T16:58:05Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOIEpj4c5UvgUX",
      "title": "Deterministic or randomized Signing? (from Markku)",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/6",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 5 states \"The randomized version can be invoked by leaving K as EMPTY.\" Private key formats are determined by application requirements and should not be used as \"APIs\" to affect functionality as suggested. Side-channel secure implementations will only use this type of plaintext ASN.1 encoding for backup/transport (never actively) and are likely to always perform randomized signing. Some other implementations (perhaps without trustworthy RNGs) may always perform deterministic signing; this does not break the interoperability of signatures. The explanation for the \"tr\" field in that private key format is not accurate (see above).",
      "createdAt": "2022-10-25T02:25:26Z",
      "updatedAt": "2024-12-12T16:59:38Z",
      "closedAt": "2024-12-12T16:59:38Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This version does not allow leaving K empty as it is a fixed-length octet string. Some implementations may need it, though.\r\n\r\nDilithium allows the same private key to be used for randomized and non-randomized signing; the K value does not affect the public key or break the compatibility of signatures. In fact, some implementors may choose to use the random seed K in a different way; additionally binding it in a hash with some RNG output, the public key, a device-intrinsic key, or whatever. This would often be sensible from security viewpoint. The K value is merely used to randomize the signing process. The only way having a different randomization method could be an issue is if ACVP / FIPS testing turns out to be overly rigid with Dilithium modules. But it is entirely up to the implementation.\r\n",
          "createdAt": "2022-10-25T02:25:44Z",
          "updatedAt": "2022-10-25T02:25:44Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed, I think it's fine to allow for deterministic signing.",
          "createdAt": "2024-09-25T11:56:38Z",
          "updatedAt": "2024-09-25T11:56:38Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "At the moment we leave it somewhat implicit, and I think that is fine.",
          "createdAt": "2024-12-11T13:51:25Z",
          "updatedAt": "2024-12-11T13:51:25Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Indeed, from the current text \r\n\r\n>EDNOTE: Discuss deterministic vs randomized signing and the impact on security.\r\n> ML-DSA offers both deterministic and randomized signing. By default ML-DSA signatures are non-deterministic. The private random seed (rho') for the signature is pseudorandomly derived from the signer\u2019s private key, the message, and a 256-bit string, rnd - where rnd should be generated by an approved RBG. In the deterministic version, rng is instead a 256-bit constant string. The source of randomness in the randomized mode has been \"hedged\" against sources of poor entropy, by including the signers private key and message into the derivation. The primary purpose of rnd is to facilitate countermeasures to side-channel attacks and fault attacks on deterministic signatures.\r\n\r\nI cannot fix the old sentence that said talked about randomized\r\n\r\n> The randomized version can be invoked by leaving K as EMPTY\r\n\r\nI think it is fine as we have it. \r\n\r\nOK to close this one. \r\n",
          "createdAt": "2024-12-12T03:54:28Z",
          "updatedAt": "2024-12-12T03:54:50Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree on this!",
          "createdAt": "2024-12-12T16:59:38Z",
          "updatedAt": "2024-12-12T16:59:38Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOIEpj4c5Uvgu3",
      "title": "Remove Public Key from the Private Key Structure",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/7",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From John \r\n\r\n> I know there have also been suggestions about including a smaller value that could help in recomputing the public key from the private key.   I guess that could be an optional attribute (the [0] tag in OneAsymmetricKey) if someone decides that is better rather than including an entire public key.   I actually prefer to NOT include the public key in the private key, we already have large enough PQ keys, but some application uses might need it I guess.  \r\n",
      "createdAt": "2022-10-25T02:27:18Z",
      "updatedAt": "2024-11-05T09:51:59Z",
      "closedAt": "2024-11-05T09:51:59Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From Markku\r\n\r\n> Yes, only the 32-byte \"tr\" variable, which is a hash of the public key, is required to create signatures and must be included in the private key. The public key is not required for this process.\r\n> \r\n> The size difference between \"t1\" and the actual Dilithium public key is only 32 bytes (size of \"rho\"), so it wouldn't make much sense to be passing that variable separately.\r\n> \r\n> Note 1: The \"tr\" hash in secret is useful for implementations since it allows one to verify that (pk,sk) forms a valid keypair just by checking a hash -- rather than going through most of the key generation process required to derive t1. A robust implementation would probably always do that hash value consistency check when supplied with a key pair.\r\n> \r\n> Note 2: Unlike Dilithium, Kyber requires that public keys are entirely contained in the private keys. CCA decapsulation involves a full re-encryption step. \r\n\r\n",
          "createdAt": "2022-10-25T02:27:59Z",
          "updatedAt": "2022-10-25T02:27:59Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From David B. \r\n> There should not be an OPTIONAL copy of the public key in DilithiumPrivateKey. Either it's part of the structure, or it isn't, with no optionality. We've already learned this lesson with ECPrivateKey; the various optional fields have had a compounding negative effect up the stack. This is also the wrong layer to define this... whatever specification we have for Dilithium, be it NIST's actual document or a fixup document in CFRG, should come with a byte string representation that we just drop into PKCS#8 unmodified and unadorned.",
          "createdAt": "2022-11-22T04:08:25Z",
          "updatedAt": "2022-11-22T04:08:25Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From Phillip H. B. \r\n\r\n>> So, does that mean for Dilithium there is no reason to ever carry the public key and the private key together because it\u2019s literally duplicate data that\u2019s easy to extract?\r\n> \r\n> I disagree with 'never'\r\n> \r\n> When dealing with a layered system, the outer layers do not understand the internals of the crypto algorithms by design. It is pretty easy to calculate the ECDH public key from the private but we never expect an implementation to do that because they are just blobs of bits.\r\n> \r\n> But this looks like a different question, the PKIX encoding of private key leaves this to the individual algorithm so that approach doesn't work for PKIX. But it does for other private key encodings and so we should not make an over-broad statement here.\r\n",
          "createdAt": "2022-11-22T04:10:57Z",
          "updatedAt": "2022-11-22T04:11:34Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As Markku brought up in the list, in Dilithium the private key includes `rho, K , tr, s1, s2 , t0`. In terms of public key material, only `rho`, `tr=CRH(rho|| t1)` and `t0` are included in the private key, but not the `t1` part of the whole t (`t=(t0,t1)`). `t0, t1` are non-sensitive and they make the whole t value which could be looked as a public key. `t1` is only included in the Dilithium public key  `(rho, t1)` and is used for verification. That was done to optimize public key size by omitting `t0`. `t0` is used when signing and is only stored in the private key to optimize space.\r\n\r\nSomeone can derive the public key `(rho, t1)` from the private key `rho, K , tr, s1, s2 , t0` by performing the `t := A*s1+s2` computation and getting `t1` from `(t1, t0) := Power2Roundq(t, d)`. `t := A*s1+s2` is almost as expensive as key generation itself. \r\n\r\nIn other words, not including the public key `(rho, t1)` in the private key ASN.1 structure will require a signer that has the private key only to do a `t := A*s1+s2` operation in order to get the public key `(rho, t1)`. Given that signers usually do not use the public key to verify their own signatures and that the `A*s1+s2` is not awfully expensive, it seems that not putting the whole public key in the private key structure is justified to keep the private key size smaller, prevent issues of the past by putting optional parameters. \r\n\r\nI would expect signers to have a separate copy of their public key `(rho, t1)` and not only store their private key anyway. PKCS#8 could also take either of these in it. Additionally, the private and public key structures should just follow the Signature algorithm specification from NIST and not introduce additional structures that are unnecessary as David B. suggestion above. ",
          "createdAt": "2022-11-22T17:14:55Z",
          "updatedAt": "2022-11-22T17:23:19Z"
        },
        {
          "author": "mjosaarinen",
          "authorAssociation": "NONE",
          "body": "> In other words, not including the public key `(rho, t1)` in the private key ASN.1 structure will require a signer that has the private key only to do a `t := A*s1+s2` operation in order to get the public key `(rho, t1)`. Given that signers usually do not use the public key to verify their own signatures and that the `A*s1+s2` is not awfully expensive, it seems that not putting the whole public key in the private key structure is justified to keep the private key size smaller, prevent issues of the past by putting optional parameters.\r\n> \r\n\r\nNote that while this can mathematically be done, no current Dilithium implementation provides this conversion functionality. You'd need to create special API calls just to facilitate this. And it would probably be outside NIST / FIPS / CAVP validation too, as it's a \"derive the public key from private key\" that is not covered by Signing, Verification, and Key Generation pseudocode. So it is not in any way certain that a future FIPS 140-? or NIAP Dilithium module is able to do this at all.",
          "createdAt": "2022-11-22T18:18:54Z",
          "updatedAt": "2022-11-22T18:18:54Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Note that while this can mathematically be done, no current Dilithium implementation provides this conversion functionality. You'd need to create special API calls just to facilitate this. And it would probably be outside NIST / FIPS / CAVP validation too, as it's a \"derive the public key from private key\" that is not covered by Signing, Verification, and Key Generation pseudocode. So it is not in any way certain that a future FIPS 140-? or NIAP Dilithium module is able to do this at all.\r\n\r\nACK. I still do not consider this as a big problem because the module ought to be able to keep a copy of both the public and private key structures separately. ",
          "createdAt": "2022-11-22T19:53:30Z",
          "updatedAt": "2022-11-22T19:53:30Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From Bas W.\r\n\r\n>What about the following, more radical proposal: we simply use the seed as the private key.\r\n> \r\n> Key generation is fast compared to signing. But it's even better: a big chunk of the computation for key generation is the expansion of A, which is also done for signing. So combining them is less expensive than it seems.\r\n\r\n> I modified ref and it seems to be roughly sign + keypair - matrix_expand. [1] For ref on my laptop i5, it's a slowdown of 18%, 14%, 10% for 2, 3 and 5. With avx2 on my laptop I'd expect the slowdown to be 11%, 10%, 13%. Of course these numbers are very much platform dependent.\r\n\r\n",
          "createdAt": "2022-11-23T18:41:26Z",
          "updatedAt": "2022-11-23T18:42:17Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From Uri B.\r\n> What about the following, more radical proposal: we simply use the seed as the private key.\r\n\r\nI like this idea.\r\n",
          "createdAt": "2022-11-23T18:42:58Z",
          "updatedAt": "2022-11-23T18:42:58Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From Markku > The Dilithium specification contains a description of the secret key format; I'd suggest sticking with it.\r\n> \r\n> There are indeed use cases for using the seed as a secret key (especially since a fully deterministic seed expansion mechanism is described in the spec). Secure, non-volatile key storage is very expensive in hardware devices, and the 256-bit Dilithium seed can be internally managed exactly like an AES key. We have semiconductor customers that want this due to the storage issue, despite the performance penalty. However, such keys are managed without any ASN.1 encodings and hence are not really of interest to LAMPS.\r\n> \r\n> Clearly, converting a standard-format Dilithium key back to the seed is impossible. So you can't export the seed from an implementation that uses standard-format keys.\r\n> \r\n> There is a performance penalty from using the seed, but indeed it is not horribly high on a non-protected implementation (if you completely merge the key generation with signing in the implementation) -- I'd guess ~20%?\r\n> \r\n> With side-channel protections, it is a completely different matter due to the random sampling required in key generation.  Side-channel attacks generally require many traces of the same operation to be effective; if key generation is only performed only once, it is less vulnerable. But if key generation is performed for every signature, as proposed, then it needs the same level of protection.\r\n> \r\n> The sampling is uniform in a small range, but masked rejection sampling involves masked comparisons and a \"gather\" operation which are quite expensive. I'd guess the cost is 50%, but customers still want this as otherwise they would need tens of kilobytes of non-volatile storage inside the on-chip security boundary. So.. we happen to have side-channel protected determinstic Dilithium key generation even though an analogous RSA signature module would not  have it. This is because signature key generation is performed \"rarely\" (perhaps only once, during device enrollment) and is randomized. Others may choose not to implement signature algorithm key generation in such a manner.\r\n\r\nAnd Bas acknowledged \r\n>> With side-channel protections, it is a completely different matter due to the random sampling required in key generation.  Side-channel attacks generally require many traces of the same operation to be effective; if key generation is only performed only once, it is less vulnerable. But if key generation is performed for every signature, as proposed, then it needs the same level of protection.\r\n\r\n> This is a good argument against.\r\n\r\n",
          "createdAt": "2022-11-23T18:46:23Z",
          "updatedAt": "2022-11-23T18:47:37Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like the seed idea too because it simplifies the private key. But I don\u2019t like that it basically requires keygen+sign every time you want to sign which is different to what we have traditionally been doing. Plus the side-channel concern Markku brought up. For now, let\u2019s keep the Dilithium PrivateKey in the structure, and we can consider keeping only the seed if there is a shift and keygen+sign for a seed becomes common. \r\n",
          "createdAt": "2022-11-23T18:46:32Z",
          "updatedAt": "2022-11-23T18:46:32Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed via #43.",
          "createdAt": "2024-11-05T09:51:59Z",
          "updatedAt": "2024-11-05T09:51:59Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOIEpj4c5XCSoE",
      "title": "Public Key included in Private Key",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/8",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From David B. \r\n> There should not be an OPTIONAL copy of the public key in DilithiumPrivateKey. Either it's part of the structure, or it isn't, with no optionality. We've already learned this lesson with ECPrivateKey; the various optional fields have had a compounding negative effect up the stack. This is also the wrong layer to define this... whatever specification we have for Dilithium, be it NIST's actual document or a fixup document in CFRG, should come with a byte string representation that we just drop into PKCS#8 unmodified and unadorned.",
      "createdAt": "2022-11-22T16:45:36Z",
      "updatedAt": "2022-11-22T16:47:31Z",
      "closedAt": "2022-11-22T16:47:30Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dup of https://github.com/lamps-wg/dilithium-certificates/issues/7",
          "createdAt": "2022-11-22T16:47:30Z",
          "updatedAt": "2022-11-22T16:47:30Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOIEpj4c5ep5hf",
      "title": "Add reference to OCSP? ",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/10",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From https://mailarchive.ietf.org/arch/msg/spasm/mHLRo-X8U7ZAF5BRjPEPA8lHQtk/ \r\n\r\n> Should this document also talk about Dilithium signatures in OCSP?  I realize that was not done when RFC 3279 and RFC 5480 were written.\r\n> Russ",
      "createdAt": "2023-02-16T16:53:43Z",
      "updatedAt": "2024-12-17T16:21:50Z",
      "closedAt": "2024-12-17T16:21:50Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hmm, we did not do that RFC8692 recently either. \r\nBut all these identifiers could be used in the SigAlgID in OCSP request/responses or staples as well. \r\nProbably it makes sense we reference OCSP in the draft. ",
          "createdAt": "2023-02-16T16:54:21Z",
          "updatedAt": "2023-02-16T16:54:21Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From Tim H.\r\n\r\n> I have a slight preference for keeping them separate.  When OCSP and CRLs are discussed in the same document, it's often confusing because they're quite different, and it's difficult to keep clear what applies to one or the other, and what applies to both.\r\n\r\n",
          "createdAt": "2023-02-24T21:06:42Z",
          "updatedAt": "2023-02-24T21:06:42Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We do need to add the sa- classes so that should get us some of the way there because those can be used by OCSP, PKCS#10, CMP, CMC, etc. But, as I mentioned in #12, we'll end up with some references dependencies we might not want.",
          "createdAt": "2024-07-09T11:59:19Z",
          "updatedAt": "2024-07-09T11:59:19Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ACK, I am OK not referencing OCSP in ours. ",
          "createdAt": "2024-10-03T17:51:58Z",
          "updatedAt": "2024-10-03T17:51:58Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looking at old drafts, they did not reference OCSP in these documents. We did not do it in RFC8692 recently either.\r\n\r\nThe identifiers could be used in OCSP, but I think we don't need to mention OCSP. \r\n\r\nWill close this unless there are objections. ",
          "createdAt": "2024-12-12T03:57:59Z",
          "updatedAt": "2024-12-12T03:57:59Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOIEpj4c6Aw2Kx",
      "title": "Review by John M. 2/28/2024",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/12",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- [ ]  In addition to Certificates and CRLs, 5G uses the following RFC 2986, 4210, 6090. \r\nCan we make sure that this document works with RFC 2986, 4210, and 6960 as well? Maybe it already does, then it should be good to mention that.\r\n\r\n- [x]  Would be good if the document started referring to Draft FIPS 204, so that the final update is just a reference update. Right now thing like the names ML-DSA-44, ML-DSA-65, ML-DSA-87, and \"security categories 2, 3 and 5\" do not have any reference to NIST.\r\n\r\n- [x]  \"It describes the encoding of digital signatures and public keys generated with quantum-resistant signature algorithm ML-DSA.\"\r\n\r\nThe keys are not generated with ML-DSA maybe \"encoding of public keys and digital signatures generated with\"\r\n\r\n- [x]  \"copmatible\" -> \"compatible\"\r\n\r\n- [x]  \u201cThe signatureValue field contains the corresponding ML-DSA signature computed upon the ASN.1 DER encoded tbsCertificate [[RFC5280](https://www.ietf.org/archive/id/draft-ietf-lamps-dilithium-certificates-03.html#RFC5280)].\u201d\r\n\r\nThis is only true for certificates. In certificate lists it is calculated over tbsCertList.\r\n\r\n- [x] \u201cThe public parameters for ML-DSA are based upon a polynomial ring R_q for prime q. A (k*l) public matrix A is produced, consisting of polynomials whose coefficients are sampled uniformly at random from the integers modulo q. This sampling is performed by expanding a nonce (rho) using an XOF.\u201d\r\n\r\nI think this could be removed. This document can just refer to FIPS 204.\r\n\r\n- [x] \u201ck+l)*ceiling(log(2*eta+1))+13*k]\u201d\r\n|=======+=======+=====+========+========+========|\r\n| Level | (k,l) | eta |  Sig.  | Public | Private|\r\n|       |       |     |  (B)   | Key(B) | Key(B) |\r\n|=======+=======+=====+========+========+========|\r\n|   2   | (4,4) |  2  |  2420  |  1312  |  2528  |\r\n|   3   | (6,5) |  4  |  3293  |  1952  |  4000  |\r\n|   5   | (8,7) |  2  |  4595  |  2592  |  4864  |\r\n|=======+=======+=====+========+========+========|\r\n\r\nI think it is preferable to remove the formula and eta. People are not expected to make their own ML-DSA variants. I think the information in the table should be only: \r\n\r\nML-DSA-44 |   2   |  2420  |  1312  |  2528  |\r\nML-DSA-65 |   3   |  3293  |  1952  |  4000  |\r\nML-DSA-87 |   5   |  4595  |  2592  |  4864  |\r\n\r\n- [x] \u201cmodeled under existentially unforgeable digital signatures with respect to an adaptive chosen message attack (EUF-CMA).\u201d\r\n\r\nML-DSA is designed to be strongly existentially unforgeable under chosen message attack (SUF-CMA) i.e., it is expected that even if an adversary can get the honest party to sign arbitrary messages, the adversary cannot create any additional valid signatures based on the signer\u2019s public key, including on messages for which the signer has already provided a signature). This property is not provided by classical signature schemes such as ECDSA\r\n",
      "createdAt": "2024-02-29T03:39:02Z",
      "updatedAt": "2024-10-03T21:45:59Z",
      "closedAt": "2024-10-03T21:45:59Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon On the first point:\r\n\r\n- I am not sure that there is anything to add to support RFC 2986 (PKCS#10).  That RFC doesn't specify any signature algorithms for PKInfoAlgorithms nor SignatureAlgorithms (nor does RFC 5912).  Once the PK and Sig algorithms are defined they can just be used. Are you just looking for something that says that?\r\n- I guess ditto for 4210 (CMP).\r\n- I think maybe this might be a bad reference because 6090 is Fundamental ECC Algorithms",
          "createdAt": "2024-06-18T19:03:12Z",
          "updatedAt": "2024-06-18T19:03:12Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess my other concern here is that if we say something along the lines of the following in the ML-DSA Signatures in PKIX that we will end up with some normative dependencies:\r\n\r\n    These algorithms identifier are parameter conventions also apply to signature values for\r\n    PKCS #10 [RFC2986], CRMF (Certificate Request Message Format) [RFC4211], Certificate\r\n    Management Protocol (CMP) [I-D.ietf-lamps-rfc4210bis], and Certificate Management over\r\n    CMS (CMC) [I-D.ietf-lamps-rfc5272bis].",
          "createdAt": "2024-07-09T00:45:38Z",
          "updatedAt": "2024-07-09T00:45:38Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jakemas @bwesterb @csosto-pk PTAL at these.\r\n\r\nOn the other points:\r\n\r\n- [x] 2nd: I am working on a PR that will add DRAFTFIPS204 as a normative reference while leaving NIST-PQC informative and this should pull in the 204 ref:\r\n\r\n        The Module-Lattice-Based Digital Signature Algorithm (ML-DSA) is a quantum-resistant\r\n        digital signature scheme standardized by the US National Institute of Standards\r\n        and Technology (NIST) PQC project <xref target=\"NIST-PQC\" format=\"default\"></xref>\r\n        in <xref target=\"DRAFTFIPS204\" format=\"default\"></xref>.\r\n\r\n- [x] 3rd: I noted this too, I like you suggestion.\r\n- [x] 4th: Noted and addressed.\r\n- [x] 5th: Will make it match the previous bullet by s/\"tbsCertificate\"/\"tbsCertificate/tbsCertificateList\".  I also noted that the CertificateList structure doesn't match 5280 ;) It's should be CertificateList.tbsCertList not CertificateList.Certificate.\r\n- [x] 6th: I tend to agree with you and the notes asking if this is too much.\r\n- [x] 7th: I think there was a public comment too add this in FIPS PUB 204. I have included it, but if that comments doesn't make it we can put the old text back.",
          "createdAt": "2024-07-09T11:51:31Z",
          "updatedAt": "2024-07-19T12:50:58Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is ready to be closed. \r\n\r\nThere is only one thing not addressed, and I don't think we need to address it. ",
          "createdAt": "2024-10-03T17:50:56Z",
          "updatedAt": "2024-10-03T17:50:56Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOIEpj4c6O8CTB",
      "title": "'88 or '21 ASN.1",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/15",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In looking at the ML-KEM and ML-DSA I-Ds, they both include the AlgorithmIdentifier syntax for convenience. ML-DSA uses the '88 syntax and ML-KEM uses the '21 syntax:\r\n\r\nML-DSA:\r\n\r\n     AlgorithmIdentifier  ::=  SEQUENCE  {\r\n         algorithm   OBJECT IDENTIFIER,\r\n         parameters  ANY DEFINED BY algorithm OPTIONAL\r\n     }\r\n\r\nML-KEM:\r\n\r\n    AlgorithmIdentifier{ALGORITHM-TYPE, ALGORITHM-TYPE:AlgorithmSet} ::=\r\n      SEQUENCE {\r\n        algorithm   ALGORITHM-TYPE.&id({AlgorithmSet}),\r\n        parameters  ALGORITHM-TYPE.\r\n                    &Params({AlgorithmSet}{@algorithm}) OPTIONAL\r\n      }\r\n\r\nWe should pick one for both. I prefer the later syntax because '88 was almost 40 years ago.",
      "createdAt": "2024-07-09T12:39:44Z",
      "updatedAt": "2024-07-18T20:07:21Z",
      "closedAt": "2024-07-18T20:07:21Z",
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged in https://github.com/lamps-wg/dilithium-certificates/pull/16",
          "createdAt": "2024-07-18T20:07:21Z",
          "updatedAt": "2024-07-18T20:07:21Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOIEpj4c6O8kQo",
      "title": "KeyUsage Bits",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/17",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the I-D says include any of the signing related KUs.  We ended up publishing [RFC8813](https://datatracker.ietf.org/doc/rfc8813/) and [RFC9295](https://datatracker.ietf.org/doc/rfc9295/) to prohibit the use of non-signing KUs.  Should we do the same here? ",
      "createdAt": "2024-07-09T13:32:40Z",
      "updatedAt": "2024-07-18T20:08:22Z",
      "closedAt": "2024-07-18T20:08:22Z",
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "We absolutely should -- thank you for this call-out. Merged in https://github.com/lamps-wg/dilithium-certificates/pull/18",
          "createdAt": "2024-07-18T20:08:22Z",
          "updatedAt": "2024-07-18T20:08:22Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOIEpj4c6Qlu9y",
      "title": "Pre-hashing discussion in Security Considerations",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/19",
      "state": "CLOSED",
      "author": "dcooper16",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The Security Considerations section of the draft says:\r\n\r\n> However, due to the fact that ML-DSA signatures may require the signing procedure to be repeated several times for a signature to be produced, ML-DSA implementations can make use of pre-hashing the message to prevent rehashing with each attempt.\r\n\r\nThis is not correct. It is true that the signing procedure may need to be repeated several times, but the message is only hashed once.\r\n\r\nThe signing algorithm can be found in Algorithm 2 of https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.204.ipd.pdf. The message is only used once (on line 6) to create a message representative (\u03bc \u2190 H(_tr_ || _M_, 512)). Starting on line 11, a loop is run until a signature is successfully created. But, within this loop the message representative \u03bc is used rather than _M_. So, pre-hashing is not needed to prevent the message from being rehashed with each attempt.\r\n\r\nWhere ML-DSA differs from the traditional hash-then-sign paradigm is that the message is hashed as \u03bc \u2190 H(_tr_ || _M_, 512), where _tr_ is the hash of the public key, rather than just as \u03bc \u2190 H(_M_, 512).",
      "createdAt": "2024-07-23T18:07:09Z",
      "updatedAt": "2024-12-11T13:42:00Z",
      "closedAt": "2024-12-11T13:42:00Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ACVK, but this was mostly referring to higher layer cases where you have M and you will sign it many times, so you will call ML-DSA Sign. In such cases, or in cases where you don't want to send the message too many times to the signer, you may just pass the digest of the message back and forth and sign that. ",
          "createdAt": "2024-10-04T16:18:40Z",
          "updatedAt": "2024-10-04T16:18:40Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOIEpj4c6X2L68",
      "title": "Update example to final NIST standard",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/21",
      "state": "CLOSED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-25T10:12:45Z",
      "updatedAt": "2024-09-25T17:28:23Z",
      "closedAt": "2024-09-25T17:28:23Z",
      "comments": []
    },
    {
      "number": 22,
      "id": "I_kwDOIEpj4c6X2_eQ",
      "title": "Use seed as private key",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/22",
      "state": "CLOSED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Following [working group consensus](https://mailarchive.ietf.org/arch/msg/spasm/KPg3lbPeNms2H5PNDBt0iJByuE0/)",
      "createdAt": "2024-09-25T11:52:19Z",
      "updatedAt": "2024-10-28T18:27:04Z",
      "closedAt": "2024-10-28T18:27:04Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed via #42.",
          "createdAt": "2024-10-28T18:27:04Z",
          "updatedAt": "2024-10-28T18:27:04Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOIEpj4c6YhXgY",
      "title": "Should we use the context string?",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/24",
      "state": "CLOSED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Mike asks [which context string](https://mailarchive.ietf.org/arch/msg/spasm/voUR5EXhtd9fvZL1pYRpTvnDTLs/) to use. At the moment we don't set any.\r\n\r\nThis question is not specific to ML-DSA. Context strings have been discussed in general in [this LAMPS thread](https://mailarchive.ietf.org/arch/msg/spasm/XH_VtuiYt4YWxuDS3dHsR70aQF0/).",
      "createdAt": "2024-10-01T10:58:43Z",
      "updatedAt": "2024-12-19T11:22:27Z",
      "closedAt": "2024-12-19T11:22:27Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The correct answer is probably to use the empty string. One good reason for this is backwards-compatibility with signature primitives that do not have ctx params (ie if we want to use the same context string across all signature schemes, then this is the only option), and even compatibility with crypto libraries that offer ML-DSA but no not have a `.Sign()` interface that accepts a ctx parameter.\r\n\r\nEmpty string is already the default in FIPS 204, so in theory nothing needs to be said in draft-dilithium-certificates, but it would probably be polite to put in a sentence.",
          "createdAt": "2024-10-01T13:27:30Z",
          "updatedAt": "2024-10-01T13:28:14Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "There is an argument to be made to set a context string. Over time, the signature algorithms used will all have context. Also, requiring it here forces libraries to adopt it, which is very helpful to protocols where a context string is more useful but don't have the reach of X509. The clear downside is more work and added complexity. I have not made up my mind.",
          "createdAt": "2024-10-01T14:22:35Z",
          "updatedAt": "2024-10-01T14:22:35Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should probably include the context string, as any FIPS implementation of ML-DSA will have it included. However, I do agree that minimizing complexity is important. The use of the empty string seems the most reasonable solution here.",
          "createdAt": "2024-10-02T16:48:23Z",
          "updatedAt": "2024-10-02T16:48:23Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I vote for empty string. It does not add anything in the X.509 context. \r\n\r\nIf folks insist, a simple context like the ASCII characters of \"X.509 ML-DSA\" would suffice imo. ",
          "createdAt": "2024-10-04T16:12:42Z",
          "updatedAt": "2024-10-04T16:12:42Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After thinking a bit more, here is a more refined opinion:\r\n\r\nWhat should be in draft-ietf-lamps-dilithium-certificates-05 is a statement that ML-DSA signatures produced by CA certificates (basicConstraints.cA=true) MUST use ctx=\u201d\u201d, while signatures produced by end entity certificates MAY use any ctx value as appropriate for its application context.\r\n\r\nThe rationale here is that LAMPS owns the \"protocol\" that is X.509 Certificates and CRLs, but we do not own arbitrary things that an X.509 cert can sign, so we can and should be prescriptive about the former, but not about the latter.\r\n\r\nAlternatively, maybe it makes sense to set ctx=\u201drfc5280certificate\u201d, ctx=\u201drfc5280csr\u201d, ctx=\u201drfc5280crl\u201d, etc to prevent type confusion attacks. I don\u2019t have a strong preference, but we should be prescriptive one way or another.",
          "createdAt": "2024-12-11T17:32:48Z",
          "updatedAt": "2024-12-11T17:37:31Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "NONE",
          "body": "Sorry for hitting the list before seeing this.\r\n\r\nFor some context regarding JOSE / COSE.\r\n\r\nThe both already have their own application layer context constructions, so I don't plan to expose ctx directly in the specifications, unless there is clear justification for doing it the same way as this draft.\r\n\r\nFWIW, I am in favor of \"empty string\".",
          "createdAt": "2024-12-11T17:47:38Z",
          "updatedAt": "2024-12-11T17:47:38Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> For some context regarding JOSE / COSE.\r\n> \r\n> The both already have their own application layer context constructions, so I don't plan to expose ctx directly in the specifications, unless there is clear justification for doing it the same way as this draft.\r\n> \r\n> FWIW, I am in favor of \"empty string\".\r\n\r\nOrie,\r\n\r\nAnother thought. CMS is actually the closer parallel between COSE and \u201cLAMPS-things\u201d.\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-lamps-cms-ml-dsa-01\r\n\r\nIt says:\r\n\r\nML-DSA has a context string input that can be used to ensure that different signatures are generated for different application contexts. When using ML-DSA as described in this document, the context string is not used. \r\n\r\nSo ctx=\u201d\u201d everywhere within CMS, mainly because it already has plenty of context binding at the application layer.\r\n",
          "createdAt": "2024-12-11T18:42:03Z",
          "updatedAt": "2024-12-11T18:42:03Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Context had some value when HashML-DSA was going to be used. I think, now that HashML-DSA is becoming irrelevant there is no point in using ctx. Empty string makes sense to me. ",
          "createdAt": "2024-12-11T19:36:45Z",
          "updatedAt": "2024-12-11T19:36:45Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Need to close this one, I think we converged to empty ctx. ",
          "createdAt": "2024-12-12T03:55:32Z",
          "updatedAt": "2024-12-12T03:55:32Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Context had some value when HashML-DSA was going to be used.\r\n\r\n@csosto-pk can you expand on this?  Does it also apply to HashSLH-DSA? HashSLH-DSA is being defined for public keys in end-entity certificates, so x509-slhdsa doesn't really have any say about how the context would be use there, but I'm curious why you say the context had some use with HashML-DSA.",
          "createdAt": "2024-12-12T10:24:21Z",
          "updatedAt": "2024-12-12T10:24:21Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "> Need to close this one, I think we converged to empty ctx.\r\n\r\nWe might still want to add some words to that effect to the I-D.",
          "createdAt": "2024-12-12T11:51:03Z",
          "updatedAt": "2024-12-12T12:35:41Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > Need to close this one, I think we converged to empty ctx.\r\n> \r\n> We might still want to add some words to that effect to the I-D.\r\n\r\n@bwesterb , please check https://github.com/lamps-wg/dilithium-certificates/pull/62 ",
          "createdAt": "2024-12-12T15:23:44Z",
          "updatedAt": "2024-12-12T15:35:39Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > Context had some value when HashML-DSA was going to be used.\r\n> \r\n> @csosto-pk can you expand on this? Does it also apply to HashSLH-DSA? HashSLH-DSA is being defined for public keys in end-entity certificates, so x509-slhdsa doesn't really have any say about how the context would be use there, but I'm curious why you say the context had some use with HashML-DSA.\r\n\r\nHi @danvangeest \r\n\r\nIndeed about HashML-DSA, you can't control the ctx. You can only control it for PureXX-DSA. \r\n\r\nI meant that ctx did not exist in Dilithium. It was introduced for the M' calculation when NIST added the HashML-DSA option. I think the idea for ctx and domain separation came from Markku when discussing the EUF-CMA property of the newly introduced HashML-DSA and PureML-DSA. I am fuzzy on the details. Now that we will basically not be using HashML-DSA, I don't think we should care about the option. \r\n\r\nI think Sophie had made a few good points against the necessity of ctx in ML-DSA as well, but there are too many things to track and I forget the details. \r\n\r\nI don't have any strong feelings about ctx in SLH-DSA. Given that you will need Pure and Hash there (you can't do external my like ML-DSA), maybe you want to use ctx as `PR-PKIX` and `DG-PKIX` and call it a day. Or maybe you can use empty string for the Pure and specify `HashSL-DSA-PKIX` only for the external generation of M' in the HashSLH-DSA. I really don't have strong feelings, but it seems to me of HashXX-DSA is really used, adding the context makes sense.",
          "createdAt": "2024-12-12T15:35:23Z",
          "updatedAt": "2024-12-12T15:35:23Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@csosto-pk, M` is already constructed differently depending if you're using Hash*-DSA or (pure) *-DSA.  So the context won't add any additional differentiation between pure and Hash signatures.  The value in using the context is if you're signing different content types with the same key and signature algorithm.  Then using different contexts for different content types avoids a potential issue if there are encoding collisions between the content types.\r\n\r\nGiven that everything that is signed by a CA key is ASN.1 encoded, there shouldn't be any encoding collisions for this draft.",
          "createdAt": "2024-12-12T15:45:59Z",
          "updatedAt": "2024-12-12T15:45:59Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ACK, you are right. The OID is in the M' of HashXX-DSA already. Fine by me if you also use empty everywhere. ",
          "createdAt": "2024-12-12T15:47:45Z",
          "updatedAt": "2024-12-12T15:49:05Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ready to be closed @bwesterb. The change made it in. ",
          "createdAt": "2024-12-19T04:23:16Z",
          "updatedAt": "2024-12-19T04:23:44Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOIEpj4c6Y3fuq",
      "title": "No mention of pure ML-DSA?",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/30",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Why did we remove all mentions of pure ML-DSA? \r\n\r\nIs the draft supposed to be using pure and pre-hash?\r\n\r\n@jakemas ",
      "createdAt": "2024-10-03T18:08:41Z",
      "updatedAt": "2024-12-11T13:41:51Z",
      "closedAt": "2024-12-11T13:41:51Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also check PR https://github.com/lamps-wg/dilithium-certificates/pull/31 that tries to address it. ",
          "createdAt": "2024-10-03T18:27:13Z",
          "updatedAt": "2024-10-03T18:27:13Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOIEpj4c6avo4p",
      "title": "Swith to .md",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/34",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A plan is afoot to swap out the format from xml to md. Stay tuned.",
      "createdAt": "2024-10-18T01:56:06Z",
      "updatedAt": "2024-10-28T18:02:15Z",
      "closedAt": "2024-10-28T18:02:14Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed via #40.",
          "createdAt": "2024-10-28T18:02:14Z",
          "updatedAt": "2024-10-28T18:02:14Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOIEpj4c6bxcVf",
      "title": "Wrong OID used in examples",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/35",
      "state": "CLOSED",
      "author": "randombit",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The OID for ML-DSA-44 is defined as \r\n\r\n```\r\n      id-ML-DSA-44 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)\r\n               country(16) us(840) organization(1) gov(101) csor(3)\r\n               nistAlgorithm(4) sigAlgs(3) id-ml-dsa-44(17) }\r\n```\r\n\r\nwhich is AFAIK correct, however the example public and private keys use 2.16.840.1.101.3.4.17, there should be another arc of `3` right before the trailing `17`.",
      "createdAt": "2024-10-25T08:22:10Z",
      "updatedAt": "2024-10-28T15:59:16Z",
      "closedAt": "2024-10-28T15:59:16Z",
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Whoops. Fixed in #36 ",
          "createdAt": "2024-10-25T08:33:57Z",
          "updatedAt": "2024-10-25T08:33:57Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOIEpj4c6fUX-Z",
      "title": "ASN.1 size constraints on public key and private key types",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/53",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See: https://mailarchive.ietf.org/arch/msg/spasm/G45YcgPnTwvqmOJwX6IxLzYA-LI/",
      "createdAt": "2024-11-19T17:16:24Z",
      "updatedAt": "2024-12-17T16:18:37Z",
      "closedAt": "2024-12-17T16:18:36Z",
      "comments": [
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since this draft relies on the cms-ml-dsa draft for ASN.1, you probably want to follow this instead: https://github.com/lamps-wg/cms-ml-dsa/issues/10",
          "createdAt": "2024-11-21T14:56:34Z",
          "updatedAt": "2024-11-21T14:56:34Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed via #64.",
          "createdAt": "2024-12-17T16:18:36Z",
          "updatedAt": "2024-12-17T16:18:36Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOIEpj4c6jENn-",
      "title": "ASN.1 module",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/59",
      "state": "CLOSED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It's a bit bare bones. Is it sufficient?",
      "createdAt": "2024-12-12T12:39:50Z",
      "updatedAt": "2024-12-17T17:24:43Z",
      "closedAt": "2024-12-17T17:24:43Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is very bare bones, but we import what we need from the CMS-ML-DSA [I-D](https://github.com/lamps-wg/cms-ml-dsa).  There are two modules because of the PKIX/SMIME WG split from long ago.",
          "createdAt": "2024-12-17T16:20:12Z",
          "updatedAt": "2024-12-17T16:20:12Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "I_kwDOIEpj4c6lUD3t",
      "title": "We need to clarify when HashML-DSA is allowed",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/66",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is feedback from the PQC X.509 Hackathon team.\r\n\r\nThe current wording on HashML-DSA is:\r\n\r\n> with the exception of the Public Key in end-entity X.509 certifacates\r\n\r\n1. typo \"certifacates\"\r\n2. we should probably add \"... in end-entity X.509 certificates for signing non-X.509 protocol messages, ie HashML-DSA MUST NOT be used for signing CRLs or OCSP Responses.\"\r\n\r\n\r\nNote that within the Hackathon group, we did not have consensus about whether we should even allow HashML-DSA in EE certs at all -- some people were advocating for completely removing this exception clause. _**This needs to be discussed on-list**_, which may result in a longer description in the document.",
      "createdAt": "2025-01-07T18:39:26Z",
      "updatedAt": "2025-01-22T21:16:26Z",
      "closedAt": "2025-01-22T21:16:26Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is covered already\r\n\r\n> The HashML-DSA mode defined in Section 5.4 of {{FIPS204}} MUST NOT be used by CAs generating certificates or CRLs, CAs and RAs enrolling Subcribers, OCSP responders responding; in other words, public keys identified by id-hash-ml-dsa-44-with-sha512, id-hash-ml-dsa-65-with-sha512, and id-hash-ml-dsa-87-with-sha512 MUST NOT be used in X.509 certificates and CRLs and related PKIX protocols. The notable exception is the public key in end-entity X.509 certificates; such public keys could be used beyond PKIX.",
          "createdAt": "2025-01-08T05:08:34Z",
          "updatedAt": "2025-01-08T05:08:34Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The `certifacates` typo was fixed in #65.\r\n\r\nMessage sent to LAMPS; look [here](https://mailarchive.ietf.org/arch/msg/spasm/kW59X1EPBX67d_YIKsRCS4sQDU8/).",
          "createdAt": "2025-01-08T14:51:35Z",
          "updatedAt": "2025-01-08T14:51:35Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@csosto-pk \r\n\r\nGood point. Our concern was that the case of non-CAs issuing CRLs (ie delegated CRL signers) was not covered (ie left ambiguous). But I think you're right that this sentence covers it:\r\n\r\n> MUST NOT be used in X.509 certificates and CRLs and related PKIX protocols.\r\n\r\nIt's the first sentence that's confusing:\r\n\r\n> MUST NOT be used by CAs generating certificates or CRLs\r\n\r\nWhy does \"CA\" matter there? Why not shorten the whole paragraph and just say \"MUST NOT when signing X.509, CRL, OCSP, or other PKIX protocols\".",
          "createdAt": "2025-01-08T21:26:09Z",
          "updatedAt": "2025-01-08T21:26:09Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd like to start by saying that this whole section even being in this document is a little weird.\r\n\r\nThis document's title, abstract, and introduction says that this is supposed to be about `ML-DSA`. It specifies or imports what is needed to put `ML-DSA` keys in a public key certificate and apply those signatures to public key certificates and CRLs. This draft says nothing about how to use `ML-DSA` with any other PKIX certificate type, of which there are three: Attribute, Qualified, & Proxy Anonymous Certificates. This draft also says nothing about other PKIX related protocols, and BTW there are a lot of them: `CMC`, `CMP`, `CRMF`, `DVCS`, `EST`, `OCSP`, `PKCS#10`, `SCVP`, `TSP`, & `TAMP`.  You will note that this draft imports the `sa-ml-dsa-*` and `pk-ml-dsa-*` definitions from `-cms-ml-dsa` and that I-D doesn't specify the corresponding `sa-hashml-dsa` and `pk-hashml-dsa-*\r\n\r\nThen, we got this section about `HashML-DSA`, which is a variant of `ML-DSA` that's also in FIPS 204, that says 'em don't use the `HashML-DSA` OIDs here, or here, or here.  Couldn't we just uplift all of the `HashML-DSA` stuff and put it in a draft called:\r\n\r\n    Internet X.509 Public Key Infrastructure: Algorithm Identifiers for\r\n    Pre-Hash ML-DSA\r\n\r\nto keep the one we really want to use separate?  \r\n\r\nOr, do we need to change the title, abstract, and into to be something like one of the following to note that we are also doing:\r\n\r\n    Internet X.509 Public Key Infrastructure: Algorithm Identifiers for\r\n    Pure ML-DSA & Pre-Hash ML-DSA\r\n\r\nor\r\n\r\n    Internet X.509 Public Key Infrastructure: Algorithm Identifiers for\r\n    FIPS 204\r\n\r\nor\r\n\r\n    Internet X.509 Public Key Infrastructure: Algorithm Identifiers for\r\n    the Module Lattice Based Signature Standard\r\n\r\nIf we are going to keep the pure and pre-hash in the same document, I think we should treat them the same and we should cut down the pre-hash text to just talk about public key certificates and CRLs. I.e., I'd be happy to drop CA from the 1st sentence and change generate to issuer (that's what 5280 calls it and there's even fields called that):\r\n\r\n    The HashML-DSA mode defined in Section 5.4 of {{FIPS204}} MUST NOT be\r\n    used by CAs generating certificates or CRLs.\r\n\r\nWe could also add the `id-hash-ml-dsa-44-with-sha512`, `id-hash-ml-dsa-65-with-sha512`, and `id-hash-ml-dsa-87-with-sha512` identifiers OIDs if we want to get specific.",
          "createdAt": "2025-01-09T04:42:47Z",
          "updatedAt": "2025-01-09T04:42:47Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The HashML-DSA mode defined in Section 5.4 of {{FIPS204}} MUST NOT be used by CAs generating certificates or CRLs, CAs and RAs enrolling Subcribers, OCSP responders responding;\r\n\r\nIt was basically trying to say that everything in the cert chain \"MUST NOT\" use HashML-DSA, but it implied that the EE cert public key is still allowed to be HashML-DSA (the \"notable exception\" in the later sentence). If we say \"MUST NOT\" be used in any cert then it conflicts with the later sentence that talks about the \"notable exception\". \r\n\r\nMaybe still simplifying it to \r\n\r\n> The HashML-DSA mode defined in Section 5.4 of {{FIPS204}} MUST NOT be used; in other words, public keys identified by id-hash-ml-dsa-44-with-sha512, id-hash-ml-dsa-65-with-sha512, and id-hash-ml-dsa-87-with-sha512 MUST NOT be used in X.509 certificates and CRLs and related PKIX protocols. The notable exception is the public key in end-entity X.509 certificates; such public keys could be used beyond PKIX.\r\n\r\nstill conveys the message.\r\n",
          "createdAt": "2025-01-09T04:56:00Z",
          "updatedAt": "2025-01-09T04:56:00Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, the problem identified by the hackathon team is that the current wording is ambiguous about whether HashML-DSA is allowed in delegated CRL or OCSP signing certificates. Ambiguity bad. Fix ambiguity please. The ambiguity is because conceptually those are part of the CA, but technically they are EEs: `basicConstraints:cA:false, KU:cRLSign`, or `basicConstraints:cA:false, EKU:id-kp-OCSPSigning`.\r\n\r\nI have a slight preference for \"MUST NOT\", but I would also be fine with \"MAY\" -- my real concern here is that one way or another the draft is clear and non-ambiguous about whether HashML-DSA is allowed in delegated CRL and OCSP signing certs. I feel like Sean's proposal is worse: it makes it more ambiguous than what's currently in the draft.",
          "createdAt": "2025-01-09T13:35:54Z",
          "updatedAt": "2025-01-09T14:07:05Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I had actually written something very similar to what @csosto-pk suggested before I mounted my late night soapbox. If I get off that box for a second, would this be clearer still:\r\n\r\n> The HashML-DSA mode defined in Section 5.4 of {{FIPS204}} MUST NOT be used; in other words, public keys identified by id-hash-ml-dsa-44-with-sha512, id-hash-ml-dsa-65-with-sha512, and id-hash-ml-dsa-87-with-sha512 MUST NOT be used in X.509 certificates and CRLs and related PKIX protocols. The notable exception is the public key in end-entity X.509 certificates, i.e., certificates that do not have a basic constraints extension with the CA boolean flag set to true; such public keys could be used beyond PKIX.\r\n\r\nHowever, to continue down the less ambiguous road we are going to need to specify 'sa-hash-ml-dsa-*` and `pk-hash-ml-dsa-*` somewhere because somebody can say \"great, where are OIDs and ASN.1 stuff for when I want to actually put that HashML-DSA public key in the EE cert and the signature on something other than a certificate.\"\r\n\r\nAnd then, I am back on my box, asking whether we should be clear that this I-D is about both Pure and Pre-Hash ML-DSA by changing the title, abstract, intro, and prose/ASN.1 to indicate this I-D also address pre-hash ML-DSA. If how to use Pre-Hash ML-DSA is not going in this I-D and is instead going to go in some other I-D, then all of the pre-hash ML-DSA prose in this I-D can go in that other I-D. I suspect having a third document is unappealing, but a PR to do the changes I am talking about I won't be able to get done until next week.",
          "createdAt": "2025-01-09T16:07:09Z",
          "updatedAt": "2025-01-09T16:07:09Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I consider delegated CRL or OCSP Signing certs as PKIX certs in this context. \r\n\r\nHow about \r\n\r\n> The HashML-DSA mode defined in Section 5.4 of {{FIPS204}} MUST NOT be used; in other words, **public keys identified by id-hash-ml-dsa-44-with-sha512, id-hash-ml-dsa-65-with-sha512, and id-hash-ml-dsa-87-with-sha512 MUST NOT** be in X.509 certificates used for CRLs, OCSP, certificate issuance and related PKIX protocols (e.g. TLS)**. The notable exception is the public key in end-entity X.509 certificates; such public keys **MAY** used beyond PKIX.\r\n\r\nIt is generic enough to clear the delegated CRL or OCSP signers, etc, right? ",
          "createdAt": "2025-01-09T16:09:41Z",
          "updatedAt": "2025-01-09T16:09:57Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup, new paragraph is clearer.\r\n\r\nWhat about changing\r\n\r\n> The notable exception is the public key in end-entity X.509 certificates\r\n\r\nto\r\n\r\n> The use of HashML-DSA public keys within end entity certificates is not prohibited, but conventions for doing so are outside the scope of this document.\r\n\r\nThen I think your title is still fine, and the first person who needs to make HashML-DSA certs will need to write their own I-D.",
          "createdAt": "2025-01-09T17:34:18Z",
          "updatedAt": "2025-01-09T17:35:47Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The use of HashML-DSA public keys within end entity certificates is not prohibited, but conventions for doing so are outside the scope of this document.\r\n\r\nI am fine with that. ",
          "createdAt": "2025-01-10T19:54:07Z",
          "updatedAt": "2025-01-10T19:54:07Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revised #65 based on the above.\r\n\r\nNote that we could future proof this with the following:\r\n\r\n    id-hash-ml-dsa-*, where * is any hash algorithm, MUST NOT\r\n",
          "createdAt": "2025-01-13T14:31:54Z",
          "updatedAt": "2025-01-13T14:51:07Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "I_kwDOIEpj4c6lcYQk",
      "title": "Need more prose to say where pk- are defined",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/71",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Need some more prose to refer to I-D.ietf-lamps-cms-ml-dsa for pk-* and ML-DSA-P*Key definitions found in the ASN.1 module.  ",
      "createdAt": "2025-01-08T15:27:02Z",
      "updatedAt": "2025-01-14T14:45:19Z",
      "closedAt": "2025-01-14T14:45:19Z",
      "comments": []
    },
    {
      "number": 76,
      "id": "I_kwDOIEpj4c6nNngi",
      "title": "Private Key Format",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/76",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See [mail thread](https://mailarchive.ietf.org/arch/msg/spasm/6iUmCadOg3PfGja7j26-MUXTUVk/).",
      "createdAt": "2025-01-22T21:18:19Z",
      "updatedAt": "2025-03-17T06:27:08Z",
      "closedAt": "2025-03-17T06:27:08Z",
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "For posterity: see  #22 for past discussion.",
          "createdAt": "2025-01-22T21:25:23Z",
          "updatedAt": "2025-01-22T21:25:23Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From djb\n\n>> This text appears in draft-ietf-lamps-kyber-certificates-08:\n>>    Many protocols only rely on the IND-CCA security of a KEM.  Some\n>>    (implicitly) require further binding properties, formalized in\n>>    [CDM23].  The private key format influences these binding properties.\n>>    Per [KEMMY24], ML-KEM is LEAK-BIND-K-PK-secure and LEAK-BIND-K-CT-\n>>    secure when using the expanded private key format, but not MAL-BIND-\n>>    K-CT nor MAL-BIND-K-PK.  Using the 64-byte seed format provides a\n>>    step up in binding security, additionally providing MAL-BIND-K-CT\n>>    security, but still not MAL-BIND-K-PK.  For more guidance, see\n>>    [I-D.sfluhrer-cfrg-ml-kem-security-considerations].\n>> This says why the seed is preferred.\n>\n> Does it? Seems to me that various recent messages are challenging this \n> as using the word \"secure\" in a way that hasn't been justified through \n> any actual attack scenarios---it's even contrary to well-established \n> practice regarding side channels. It's also puzzling to see the BIND \n> properties claimed to be important when the selected format isn't a \n> format that achieves _all_ of those properties (e.g., 32-byte seeds).\n\nFrom Viktor D.\n> FWIW, in the message that started this thread, I included a link to a tentative revision of the draft, in which that text was removed.\n>     https://vdukhovni.github.io/ml-kem-certificates/#section-7\n> I don't believe the original text is justified or necessary in a PKCS#8 format specification.  If there are protocols in which those concerns are relevant, the text would belong in the specifications of *those* protocols.\n\nThere is merit to these points. Should we refine or remove the claims about the security properties of SEED? I think Mike O. had suggested this text. What were the mains reasons for a seed other than those? Size and simplicity?\n",
          "createdAt": "2025-02-05T03:54:13Z",
          "updatedAt": "2025-02-05T03:54:13Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "The main reason (for me) is that seed is simpler. With expanded private key you need to align on which checks to perform, and that seems to have already diverged between implementations. Size is another nice benefit.\n\nWe should continue to mention LEAK-BIND-x security, as that has been an actual security concern (eg. Signal). My current understanding is that there is no real-world attack exploiting missing MAL-BIND-x security. I don't want to jump the gun here and say it's definitely not important though. But we can tweak the language to make MAL-BIND-x seem less threatening.",
          "createdAt": "2025-02-07T08:12:05Z",
          "updatedAt": "2025-02-07T08:12:05Z"
        },
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "> The main reason (for me) is that seed is simpler. With expanded private key you need to align on which checks to perform, and that seems to have already diverged between implementations. Size is another nice benefit.\n> \n> We should continue to mention LEAK-BIND-x security, as that has been an actual security concern (eg. Signal). My current understanding is that there is no real-world attack exploiting missing MAL-BIND-x security. I don't want to jump the gun here and say it's definitely not important though. But we can tweak the language to make MAL-BIND-x seem less threatening.\n\nI still believe that the least misleadingly threatening mention of the `MAL-BIND-x` issues is to not mention them at all. At least for ML-KEM, to the extent they need to be mentioned, they're well covered in the already referenced [CFRG draft](https://datatracker.ietf.org/doc/html/draft-sfluhrer-cfrg-ml-kem-security-considerations-02)",
          "createdAt": "2025-02-09T10:24:00Z",
          "updatedAt": "2025-02-09T10:24:00Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To do:\n\n- [x] Update .asn file - See #83\n- [x] Update ASN.1 in text - See #87\n- [x] Add text to for ML-DSA-*-PublicKey and ML-DSA-*-PrivateKey - See #87\n- [x] Add text for seed/expanded consistency checking - See #88\n- [x] Update IANA Consideration - See #84\n- [x] Update private key examples - See #87",
          "createdAt": "2025-02-26T18:08:49Z",
          "updatedAt": "2025-03-15T08:01:03Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Add text to for ML-DSA--PublicKey and ML-DSA--PrivateKey: https://github.com/lamps-wg/dilithium-certificates/pull/87\nUpdate private key examples: https://github.com/lamps-wg/dilithium-certificates/pull/87",
          "createdAt": "2025-02-26T23:26:05Z",
          "updatedAt": "2025-02-28T07:22:06Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Add text for seed/expanded consistency checking: https://github.com/lamps-wg/dilithium-certificates/pull/88",
          "createdAt": "2025-02-28T07:21:25Z",
          "updatedAt": "2025-02-28T07:21:25Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOIEpj4c6ott7k",
      "title": "Add implementation considerations section",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/77",
      "state": "CLOSED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Carl Wallace:\n\n> I still think this draft should have an Implementation Considerations section a la the Kyber certificates draft to define the mods to the FIPS algorithms to support seed usage.\n",
      "createdAt": "2025-02-04T15:12:50Z",
      "updatedAt": "2025-02-20T21:28:47Z",
      "closedAt": "2025-02-20T21:28:03Z",
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Opened PR https://github.com/lamps-wg/dilithium-certificates/pull/81",
          "createdAt": "2025-02-19T21:59:16Z",
          "updatedAt": "2025-02-19T21:59:16Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Do you think it's worthwhile adding some implementation guidance on how to generate public key from private key? This functionality is often provided by reference implementations, but not in the case of ML-DSA (explicitly).\n\nThis is often an implementation requirement, but is perhaps not obvious to those without knowledge of the underlying lattice cryptography here. As an example of the guidance, see my implementation in aws-lc https://github.com/aws/aws-lc/pull/2142.\n\nThoughts on relevance, applicability, possibly appendix material?",
          "createdAt": "2025-02-19T22:14:47Z",
          "updatedAt": "2025-02-19T22:14:47Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/lamps-wg/dilithium-certificates/pull/81",
          "createdAt": "2025-02-20T21:28:46Z",
          "updatedAt": "2025-02-20T21:28:46Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "I_kwDOIEpj4c6r0G3d",
      "title": "Need some text for sa-ml-dsa-*",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/85",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We got ASN.1 for sa-ml-dsa-44, sa-ml-dsa-65, and sa-ml-dsa-87, but no text. Will slap the ASN.1 and an intro text in \"ML-DSA Signatures in PKIX\" section.",
      "createdAt": "2025-02-26T19:08:56Z",
      "updatedAt": "2025-03-10T15:56:14Z",
      "closedAt": "2025-03-10T15:56:14Z",
      "comments": []
    },
    {
      "number": 89,
      "id": "I_kwDOIEpj4c6sCxWP",
      "title": "second workflow down?",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/89",
      "state": "CLOSED",
      "author": "jakemas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I don't see it anymore, the push one. ",
      "createdAt": "2025-02-28T07:20:51Z",
      "updatedAt": "2025-03-19T06:33:33Z",
      "closedAt": "2025-03-19T06:33:32Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it might only fire when we do a release?",
          "createdAt": "2025-03-05T17:21:31Z",
          "updatedAt": "2025-03-05T17:21:31Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it's back up working.",
          "createdAt": "2025-03-19T06:33:32Z",
          "updatedAt": "2025-03-19T06:33:32Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOIEpj4c6sy6gv",
      "title": "related PKIX protocols",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/91",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "About this sentence:\n\n> id-hash-ml-dsa-87-with-sha512 MUST NOT be in X.509 certificates used for CRLs, OCSP, certificate issuance and related PKIX protocols (e.g. TLS). \n\nTLS is not a PKIX protocol. I feel like LAMPS RFCs should not be specifying what is and is not allowed in TLS.\n\nIf you want an e.g. for a \"related PKIX protocol\", I would suggest CMP, EST, CMS, S/MIME.",
      "createdAt": "2025-03-06T01:19:02Z",
      "updatedAt": "2025-03-06T02:54:37Z",
      "closedAt": "2025-03-06T02:54:36Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Replaced by #92 ",
          "createdAt": "2025-03-06T02:54:36Z",
          "updatedAt": "2025-03-06T02:54:36Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "I_kwDOIEpj4c6szh5_",
      "title": "Clarity on whether HashML-DSA is allowed in EE certs",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/92",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As Tim Hudson points out on the LAMPS list:\nhttps://mailarchive.ietf.org/arch/msg/spasm/PkhCqdBcJHUbpYGaf46hTVK-Lcc/\n\nthe last sentence \"is not prohibited\" leaves wiggle-room if someone wanted to maliciously comply with this paragraph and argue that HashML-DSA could be used for CRLs and OCSP signing, as long as it's an end entity delegated signer.\n\n> 8.1.  Rationale for disallowing HashML-DSA\n\n>   The HashML-DSA mode defined in Section 5.4 of [FIPS204] MUST NOT be\n   used; in other words, public keys identified by id-hash-ml-dsa-44-\n   with-sha512, id-hash-ml-dsa-65-with-sha512, and id-hash-ml-dsa-87-\n   with-sha512 MUST NOT be in X.509 certificates used for CRLs, OCSP,\n   certificate issuance and related PKIX protocols (e.g. TLS).  The use\n   of HashML-DSA public keys within end entity certificates is not\n   prohibited, but conventions for doing so are outside the scope of\n   this document.\n\nAlso, TLS is a pretty bad example of a \"related PKIX protocol\" since TLS has its own working group separate from PKIX / LAMPS.\n\nHow about this as an attempt to tighten up this paragraph?\n\n\n> The HashML-DSA mode defined in Section 5.4 of [FIPS204] MUST NOT be\n   used in X.509 certificates used with IETF protocols; in other words, public keys identified by id-hash-ml-dsa-44-\n   with-sha512, id-hash-ml-dsa-65-with-sha512, and id-hash-ml-dsa-87-\n   with-sha512 MUST NOT be in X.509 certificates used for signing certificates (CA certificates), CRLs, OCSP,\n   certificate issuance and related PKIX protocols (e.g. CMP, CMS, EST, CSR).\n\n\nOr maybe less-is-more?\n\n> The HashML-DSA mode defined in Section 5.4 of [FIPS204] and identified by the public key\n    and signature OIDs id-hash-ml-dsa-44-with-sha512, id-hash-ml-dsa-65-with-sha512, and\n    id-hash-ml-dsa-87-with-sha512 MUST NOT be used within X.509 certificates.",
      "createdAt": "2025-03-06T02:53:26Z",
      "updatedAt": "2025-03-17T06:26:26Z",
      "closedAt": "2025-03-17T06:26:05Z",
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed about removing TLS, because https://datatracker.ietf.org/doc/html/draft-tls-westerbaan-mldsa will define what signatures are using in the ```CertificateVerify``` message. ",
          "createdAt": "2025-03-06T15:54:39Z",
          "updatedAt": "2025-03-06T15:54:39Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Previously some brought up CMP, CMS, EST, PKCS10 etc but we decided to shy away from calling out every other PKIX protocol, so I don't want to do that. I suggest we only remove TLS. \n\n>The HashML-DSA mode defined in Section 5.4 of [FIPS204] MUST NOT be used in X.509 certificates used with IETF protocols; in other words, public keys identified by id-hash-ml-dsa-44-with-sha512, id-hash-ml-dsa-65-with-sha512, and id-hash-ml-dsa-87- with-sha512 MUST NOT be in X.509 certificates used for signing certificates (CA certificates), CRLs, OCSP, certificate issuance and related PKIX protocols ~(e.g. TLS)~. The use of HashML-DSA public keys within end entity certificates is not prohibited, but conventions for doing so are outside the scope of this document.\n\nIf the group is convinced that the non-normative \n>  The use of HashML-DSA public keys within end entity certificates is not prohibited, but conventions for doing so are outside the scope of this document.\n\nsomehow gives an out for using HashML-DSA in OCSP or other IETF protocols, then OK let's remove it and move the draft forward. It is not an important sentence to stress about. \n",
          "createdAt": "2025-03-06T16:08:46Z",
          "updatedAt": "2025-03-06T16:20:45Z"
        },
        {
          "author": "t-j-h",
          "authorAssociation": "NONE",
          "body": "I would remove the last sentence as it detracts from the document itself and opens up questions and alternate interpretations.\nEither MUST NOT means MUST NOT or it doesn't. \n\nAnd the scope of the MUST NOT should be clear.\n\nPerhaps the list should be explicitly narrowed to the scope of the LAMPS working group as I think that is what is meant from the mailing list discussion. Wider scope requires other working groups to decide to do that independently.",
          "createdAt": "2025-03-06T16:56:55Z",
          "updatedAt": "2025-03-06T16:56:55Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "closed via #99.",
          "createdAt": "2025-03-17T06:26:25Z",
          "updatedAt": "2025-03-17T06:26:25Z"
        }
      ]
    },
    {
      "number": 93,
      "id": "I_kwDOIEpj4c6tF_84",
      "title": "Public key derivation from private",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/93",
      "state": "CLOSED",
      "author": "jakemas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "jakemas"
      ],
      "labels": [],
      "body": "Do you think it's worthwhile adding some implementation guidance on how to generate public key from private key? This functionality is often provided by reference implementations, but not in the case of ML-DSA (explicitly).\n\nThis is often an implementation requirement, but is perhaps not obvious to those without knowledge of the underlying lattice cryptography here. As an example of the guidance, see my implementation in aws-lc https://github.com/aws/aws-lc/pull/2142.\n\nThoughts on relevance, applicability, possibly appendix material?",
      "createdAt": "2025-03-07T22:03:27Z",
      "updatedAt": "2025-03-19T06:33:14Z",
      "closedAt": "2025-03-19T06:33:13Z",
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion C.F: https://github.com/lamps-wg/dilithium-certificates/pull/87#discussion_r1976535041",
          "createdAt": "2025-03-07T22:03:53Z",
          "updatedAt": "2025-03-07T22:03:53Z"
        },
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "The textual description in that AWS PR says \"drop the low bits\", but that's somewhat misleading, the actual algorithm is Power2Round.\nAnd FWIW, see: https://github.com/aws/aws-lc/pull/2142/files#r1985988887",
          "createdAt": "2025-03-08T05:11:15Z",
          "updatedAt": "2025-03-08T05:11:15Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would say let's have a look at the PR :)",
          "createdAt": "2025-03-15T06:07:14Z",
          "updatedAt": "2025-03-15T06:07:14Z"
        },
        {
          "author": "russhousley",
          "authorAssociation": "NONE",
          "body": "Why? If the FIPS document did not need an algorithm description for this, why does the RFC?",
          "createdAt": "2025-03-15T09:45:31Z",
          "updatedAt": "2025-03-15T09:45:31Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So this PR came about as a result of a comment from Viktor about the following text:\n\n    NOTE: While the private key can be stored in multiple formats, the seed-only\n    format is RECOMMENDED as it is the most compact representation.\n    Both the expanded private key and the public key can\n    be deterministically derived from the seed using\n    ML-DSA.KeyGen_internal(xi).\n\nViktor's comment (see #87), copied here:\n\n     Same issue here. The first sentence is correct (more compact\n     representation), but what follows again suggests that the public\n     key can only be recovered from the seed, which is NOT the case.\n     OpenSSL, for example, always recovers the public key from the\n     private alone when importing ML-DSA private keys (if a public\n     key is also supplied on import it is compared with the generated\n     value and the pair reject if it does not match).\n\nMaybe a way to fix this is to tweak the text as follows:\n\n    NOTE: While the private key can be stored in multiple formats, the seed-only\n    format is RECOMMENDED as it is the most compact representation.\n    Both the expanded private key and the public key can be deterministically\n    derived from the seed using ML-DSA.KeyGen_internal(xi) or the public key can\n    be generated from the private key.",
          "createdAt": "2025-03-17T11:08:21Z",
          "updatedAt": "2025-03-17T11:08:21Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like it. Small rephrase \n\n> NOTE: While the private key can be stored in multiple formats, the seed-only format is RECOMMENDED as it is the most compact representation. Both the expanded private key and the public key can be deterministically derived from the seed using ML-DSA.KeyGen_internal(xi). **Alternatively,** the public key can be generated from the private key.",
          "createdAt": "2025-03-18T03:23:23Z",
          "updatedAt": "2025-03-18T03:23:49Z"
        },
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "Works for me, but, for the record, note, this does not carry over to ML-KEM in quite the same way, since the public key is simply embedded in the private key, though there is then a possibility they don't match, hence some motivation to perform a PCT.",
          "createdAt": "2025-03-18T04:46:15Z",
          "updatedAt": "2025-03-18T04:46:15Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PTAL this [PR](https://github.com/lamps-wg/kyber-certificates/pulls).",
          "createdAt": "2025-03-19T01:53:36Z",
          "updatedAt": "2025-03-19T01:53:36Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "At IETF 122, the WG decided to not include text to explain how to go from a private to a public.",
          "createdAt": "2025-03-19T06:33:13Z",
          "updatedAt": "2025-03-19T06:33:13Z"
        }
      ]
    },
    {
      "number": 102,
      "id": "I_kwDOIEpj4c6ush-s",
      "title": "Words about SHOULD (consistency check)",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/102",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "At IETF 122, Deb suggested that we add words to make sure the IESG won't put a discuss on our SHOULD; see [IESG Statement](https://datatracker.ietf.org/doc/statement-iesg-statement-on-clarifying-the-use-of-bcp-14-key-words/).",
      "createdAt": "2025-03-19T08:37:47Z",
      "updatedAt": "2025-03-25T16:45:07Z",
      "closedAt": "2025-03-25T16:45:07Z",
      "comments": []
    },
    {
      "number": 104,
      "id": "I_kwDOIEpj4c6utPKF",
      "title": "Spell out \"seed consistency checks\"",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/104",
      "state": "OPEN",
      "author": "dennisjackson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In Section 9 (Private Key Consistency Testing) or in the Implementation Considerations, please can we spell out how to implement \"a seed consistency check\". E.g. \"The check consists of regenerating the expanded form from the seed via `ML-DSA.KeyGen_internal` and ensuring it is bytewise equal to the value presented in the private key\". \n\nIn Appendix C, can we add a negative example where these values do not match and which compliant implementations should reject? ",
      "createdAt": "2025-03-19T09:35:44Z",
      "updatedAt": "2025-03-20T11:37:20Z",
      "closedAt": null,
      "comments": [
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "If negative examples are wanted, I have three (ML-DSA-44):\n\n1. Seed vs. expanded mismatch\n2. ExpandedKey for which the recomputed public key hash $`tr`$ fails to match the private key\n3. ExpandedKey for which the recomputed public $`t_0`$ fails to match the private key ($`tr`$ matches)\n\nThe second and third would not be detected by implementations that don't regenerate the public key from the private key, or neglect to then check consistency of $`tr`$ or $`t_0`$.  Yes, I have not forgotten that we're not specifying how to regenerate public from private, but if some implementations do, and want to catch this type of mismatch, the examples *could* be useful. But I am by no means insisting. Use or ignore at your discretion.\n\n```\n-----BEGIN PRIVATE KEY-----\nMIIKPgIBADALBglghkgBZQMEAxEEggoqMIIKJgQgAAECAwQFBgcICQoLDA0ODxAR\nEhMUFRYXGBkaGxwdHh8EggoAUQyb/R3XN09Oiucd1YKBEGqTQS7Y+jV/dLu0Zh7L\nGSHTp1/JO4jvDmqbhRvs7BmZm+gQaMhZ1t8RXGCMFQEXDrbAVcIvYlWSSXbYlaX1\nTSw4WWxAPM72+XPiKl+MfCuoNjNEcJCniyK7Qc/e2vvLLt7PkHDM5hLkKrCh8T65\n3DwUkDGJwoHgsDHalISCEgijtDDSKEoEByDDRELgQC5EoHEBqSwDJmQSQSQYMiQA\nIi5KlmALGZAiMyBShkUbCEyTGIQZAG1TgAwQpChQBgogBgwjETLSxEDSEgIENIYj\nlQygtkxbSJGMEoQgGQKRGIEKJRAcoGlgkCgDxjCTBJARuJAERTLBIEzawpDZiCwY\nRiTKsAUjsWyKEIwEgXDLpDDYRmLBxhDIyEXBlgwEEgrkKGYcJXCcsohigGxiOEWE\ngEyjoA0jBw7IRiAklSkkRgVICHATIUxghCGQsg3QNoAZgE0blmEUEIUaJkCcwIij\nGBADAiGSMlGYCDIiOYpAEm4MJkEYGU4iAmTCMBFCFhJjFiwRo4TigCXSRmKakgAR\nuA2LhgBRlnHIRiQIiUEDFUChIm4kNWmAJC7CiIUEMYxawIlCRI1YxgCZMpIbISDL\nAm4YGXDYxiRBNnIZkGVYOG4IIAwCFCpjFoUBtCVQwmgJGVAisk3DGCokGCKbRmgQ\nNUIgNmLbNAWLsmxIEIoByI0hMA6MFCZCJAQLN4xDBilCSIbYGIXIpAQUtjHRNgwi\ngykAok1cuA1kiEXIAEgUOExiomjUBi7ZAg3MthFhOGTIMpJRyElSgAHgwDEAIgrB\nRGaAtIRQCDASxiikCGBKsGHKxkESyGhSsHGbAAwIR2ZhGGxRFImBRoYJOUSDAjEK\nkWnhIlFZRkGiBjLaBnCZMCzIJi3akpDBACDasGWCJDKDRIVcxGwAQyKJxhCjBABh\nhCSjQBJRIA0YMoBBNirIsCkgRwgaEkTDtpEiKYzYMmbDlhBiJnIbRWXDpmXZwGAU\nEAjQxG1JMoXQBg0RJEzjtAABqUUAM4BCMGBKgEmCNCBDGAgSBiaSRILKMAHhNo5b\nIiIkBwZUEIlLoEGYRgpMFEoKNIQgI07AFgUDRiyAtkEUkzHLJgARmG0KEg7YEGKQ\nNgwUAXGJBirIJmZSBFHkBkDckiHIEHFkGC7kuABSkGiLqChLJEkRJoGZiJFUNg0K\nmIG8aRx5dr9/gBkPfhwZrwn4DSmTPr/Vn01JddemyttdtkeLCZ4DW7+GKb7Z8S4f\nHY7JlsvtetEEMyRAS8/INLBzTBrGWIRQqWxf3YcrxGG51NDOlvdrYH7wnySOku6m\nN12BMMwLEfKkmOSU747o81iHE+wiM2bPH+rG7eP6rIrB7NRY67odfeBGboLHeSdf\n79U3GOWczZiFB5wtZGzNoVpiExABNAydQC4OJIPvpxR0ULrErVz9y33/zj9KIZJy\n+saqdCSssuX3kbavVhZQz7eytus2Aji7uSWgPb4M7FqBoFcpobHX/jVvHD8oaBt2\nTOjtuObFujQUnDcztr62etukrM+IwyyLR4WCpFev9qGM+ZP9TCsLbEDu/rVMVS81\ndnKlkkYhy/pUgsGU2jg1bTD83Wib8laAlKZgXSqLBsyP2hpmU66+mX/2gQR9rCzh\ngJSFDfiIGPo1nU2yelQMJ8YOniHNv8I5ZRKylmRFpDZo+QPVoXMnwTg0eF/c3UCO\nPTc59SFlUpxMSPttjYLHEnPlqJnHLb/PZMWlqfd+FE+i4GfHfKDH6RF3NUjPY0Jx\nI1EJ5l/HxG+zK4c1abd6LU4fMGnnKrNKlNSF5yoq8b68GIspz/Mnni3Z8++arXx/\nhzMVayoTe6vtL0ZtyByyV26jjrxOEMpf0ZLzjkWB+Q9a+Z6QxEcTtpVlsOhnxB9w\ncWFz1hzdOz1ZaMv89k3iYgajdmNIHeUQdz8wwc1621onspo5YlzuruFSorrzz/Ru\nyyg3iHNFmRv2SCNuWcziAFTSd8HBtInzNWmeqBeF7HW1hsCpRoR02ZV4iM+REFrj\nqPVHh3zqURGGSdu1y29uK6M2vjUp0w8NfyuvzbHIy2hJz3Py9kiZotfF4kOgU25D\n11b+/IcaVavqBxCUAz9N4c29aBGZO8reC+X9kPWuNE8NY7e3j4YmPcWppZGfXnY9\nPNV0pLyhLeifev2Wk1ahcLVYLE6l/cFE6qxmThkD8uTrZ7h75JmUqDmKNVjtJW5N\nYS5XSZQz4bFhsdXvpED5F5jwr2NUPpZZDkjuEKXu81ll14F4wx98g776d6LI/zTY\na06arDBhDhmeyDQZFhMtlu575XeFZGdP11IVo4UPSCQKzc/AMxlrjNrQw2wNZJ+t\n6JDEJq75MS7q5C7gvPpBd3qdmbNQwLFvyCj8ohXcpqc1Lgw12BFNtm5L2JXXle/7\nQmhVrMEkSwJznkd+bOqky9uPbI1Nr1fw0+NJBeqCJtxVvjngV3rE97E1RqzHFxaH\nQQvju+iK/j03mKXQes6be6UWIrYz8+RhZ4jwlK2nPDklHM0+0p2sNlha3BYl+Fob\nuXxZug5ze+Lor7aiIiy18xn64MxZ4QBP3pFpKeW3YJKoLcJSexuJlKJ8Ky5WjnJ+\nskZeuWRgmW/OYyRcKyyylrgnWv0A2oyBqe8ujjv5MD2Oi1Oq/mxtA+a8IAQ0oqOL\nF00uc91QcXXoUdXnQ+ZCCeNIUg1shMyx+2v6smyMLuSFEQ3R17Br1Sgw6lu2gD0S\nXMYOX6h8w0Ww9ml1Huth5xm21mYiPLiejT3vPOyWrJNQ7pg4l/0VGBTG+1zaN5fo\npaZzqkJijn+EH7d+G8RVLGhU0gkbplrNqDAIHAiCnO76b3CuBam2ngtjQzBPUlSU\nAqXPtG17rJg2B+fzgPKAgh8vuZLEaXP7/XeNMwNe6QsNuU9gfln7Tt+pqYpwm1gH\nWkqor1xYXy+1md2Ct3tLbznupLFIfQ3NVBkeDW+NVvpPvC+CF/NefkSuzOaBPlTa\nitxMHENeGFxR5cf0Sp43j59iGKdWBtJBCV8uWf4qRgRG8fdbfQ+l1qAJEx4v8r4H\n2Hsm6eS/CeZlEpe9fnobwS1BBNoczKSL+noqpxcmgAjbcEtZtsBXSJVBsj4OCdt3\nfA/6IfpWRsNBIVR1aD2p/a0U/RH3FCZKDhwF2ZhBLeHEWWQOCr1v0W68/rllFuIW\nYcyqOojDEup7oFhc0k4aUwdv50HJAWk3ehaPvbP+zlz84DmyVMQjXYJl9gZShi+9\ntFV4KJ8aZz/kCdufmWwtLJKHIBuVkX/hqbYO8Xg4XyWv2pZpZIGeW779l8wQE1MI\n2Yt6grThI3sytb+dM3JvqUW79clvJ288BqRZMJSNO2vUIo4vPqyM/Wcuy465qS0V\nns+zr0zC2uo3z3LqK57arYABNRm8CV2VxaOqH61GvYyUrA==\n-----END PRIVATE KEY-----\n```\n\n```\n-----BEGIN PRIVATE KEY-----\nMIIKGAIBADALBglghkgBZQMEAxEEggoEBIIKANeytHJUquDbReeTDUqY0sl9jxOX\n0Xidr6FwJLMW6b7JOc4Pf3f421ZE3No2a/5HNL2V9DX/mmE6pUqkHCxpTAQzmgex\n+rtI9SownxGhiY+EjiMi/+Yj7IENs77jNoWFSogmnaMg1RIL/P6JoY4w9xFNg6pA\nSmRrbJlziYYNElIu4ABuI4SBkYZhmyYNEYZk1KYoIhhEgkAomBRhSKZhTEJIoZII\nwjgpUSRICKElwggxCMRxIBQJFINsGKeAhBBuycBwIrVkCLBhDAcEmBJEUYhpWQBG\nIpMgQQYuQrZMARZJFChMQahRgEYKURZRWgggAiJE3JhJ0TJR4TBl08CFkqhREqFk\nADkiCUZiHMcM2Qht0AYmUkCFgEQwkQYsUMgJJMWEGpZtSpgsmQZtpEQyIKdkWjJu\nEbVwIJJhJBOOBIUsCkhyyKBR0wgqmSCAWCQgJAdOWRSIEKRkYMBt4LKNGxkJIDQi\nwCRBCUNxCiEgYaIBUiJSG4CAmjQAE5NN0zIpIhcKmJJpGhRRICchnMAgYqKBSBhp\nGoVNg0RpWyBBAxJCyxhGAakNDAIxg7AhWiJKyJIF2ZBpBDBqSwZK0rIBHEBAgUIy\nUjJyVKZAWhgQDDISksKAUhJiXIIoC7RsA0KNUxAMFAEO4TZSiIQkkQIKY0YmIAYp\nEcIo0CBIArNsojYJWoZIy7Rhi0ZixECCGokJEAJNJLJFIBIlJMkFiCiMycBNWUgi\nCiduwTRkTJBgW0RQgoZJQ4gEQ7KMYDCAoogthKRtjKYp0MaEQgZGiYhRAKmNAUmN\n5DgNpAaN05RxQrJsGoRhG6MoQrQoCKBxGsUx4KBMATdlJChiFCiQCRBh2UAiGzNg\nCQKS0CSBIAQISRhEoyItXIhEFJgIpEZhAZVkCzkKDJRQykBq0rIgwDgBgjCOE7kI\nkYCEFIgpwBiREjUNoCQi4gQG2cKFBCgSHMmJGAJy0kApwggS2AYqmZRxm7hoI4Qp\nGiKJFEUR3IJEUJZFDESEwLIEmqYFQ4YsRDJuiEQhIKhMmjBw47gtYyaIAyVJA0OM\nSKgJyhRyUzROEkMIG6cEWTAi2ZSA4jQigUISnDAqlDQmYQRFJCYoE0YJSjJtESgJ\nGLglYigRE0ENQbIRkIRMixISosaIycAwIgYG0hiOhIYwkERSEogx2SBxE8UoQwYO\nAzBgzKaEWCZSTIgBHvclYshf+kOs+kkhfysXLXu8FGIObZgKcaq73wxF6aIG7LFC\nP+4V3swXYBMAFJ2SI81ubG4fqOQfx8ZJOKtokF/T3NpQ2HCC59DXHRvJsrhMhVI8\nqP5srSlK34O+FbEI/3IdDMh7w906dZAYSw6EVmOpH8nhw8U6YdhnQgsE8JI1V1O8\nZaBjaP1BKV/QmSQTLG+R9nlkwUJnSnJcNDkUxM7PWMB0vK9FWMl795EeB6ptCTjy\n7iuzwajFldY16ENC/eoB3CSyEa0vwoHPd+WREMerxUvwyG1IC5vidkcdydYDzumM\n/as+n8+3A3k1YFSepEUPp7M/uRacRLTSX7nEV/SXkc09oD6slglYE8EFEyzNpOY+\nSSKM0j2KHzeFbxQtk7kNsJ+Cr4kljGOquAR6gMA2yTV+ogRvjcY1TwxSlfNCu0F9\nPP6wsf0zYiwp4Uy72S4TY8ZevUUEt1EjKblnDjLhssZ6VOfxpV+Ln56gToyjpwXm\nKjxeY3N0r7eutt3qYSzeKPAaIC16pONHItJ90/m4mJTQGf1dTXEZ7+NyO7oQTLi7\nCYHgdN46/iANqq6tgmzEXyRNv0Ma+rNO+994JHTS/VcRj2RiFJNO2Zy6OwA+jWej\ng29vGfxBkQzlFj7jrpnrhNUU63YeY2hOpW+XkdLdSqxuYWi5SMgX91oiKssOjNwD\nzEr+j2cVfho2O3+u/58XK5iRNnfFod0IXp7kwiBSwa9YGTEWZz3NO/xfNLhV3MbH\neIVknp5x9D1K6g9Lcsp+2gV4uhPTGmWNLQYKmmb/ae0b55l6L7HScj04+b+r4Y+O\nezzakG5Om16ULI6uspYHDr/TZJR6lAzJeL7Wazd0nm1dzXvoxJREDiuEzs/vuYwL\n7fs8QeM1nSzXGX++cgxIqmxrZGXB7mPjVpwq3HREkTcLf3gm/gt3odGdZBAdAyuR\ngQa0LS73N0flYB/kulDyPt5SHwMagX0VKUpDci6DeHhLbbDPG6norpEdkgG5zpzD\nAZxvXCfLmNomFEtkIlp8kysw92Hnii1Zodi4PsY0Si9t1H52VwbQC/SnmmqSbDup\nHYEsjyx5erF5Zwnl0WhWd4KTUp8ChtAVw7U5lhlkKjM+nlk9bj9TU5lCCOnmozKF\nHX9lJSKpKLkX4n4tbUITff4uv6b7HGeybAJUUoaF9+vb4xWmjqotp2noqfQtPmAA\nfHEzCSaywAEtg+rU5P0e2HLM0ZciAdKwJ/NUWsLTDNeLwddA/sy8b8KgRGxuMOrF\nH1ppCYqi1EfyCFtOTkuSzMJpIdLeR4UYzQkM4meuotJ62lf9iLSXbYn7hDzcz0mn\nbKJnnmgBv6f7AxiW+1BilwS5kjk2u13ThTERIcrfsRmV5ZtzA0z2ftA6uBOGdkjQ\nJYKAh+lJqa/Ra5XXLZmx7coleqwTL/t6Bwmu1anA/wX7Dyu/KECe7XtfWAG+lkzt\nAZ4ct4UdOFHxApBnThn/sAizAcSs9kGiuxQhbh1pyr9Ste8idJaw8weZqFXRF/rT\ndEpvozUD6nmLUt3X7lQmYJ2/zT8ME7Fk1sBR9+1KEZcZpxLjiNMoQCCB/xNUtVTS\nwjev7TsVHEuo6fS964SZowZuJrvGnorwid7HFzHR3FKeqxfvc3RzTA/kdUlMg4Nr\n3TSgO5vImRRxYGG/uY7G5hw+1EOO3K8lJDxkcIa56nAYsNmooLAM7LAKveJJjWnC\nM2EBp3LL5PVxUj9RvQWILN81i4ScwUCqH68iQjoShRzg4z/UiXWklZ+lxf5BjJOQ\ngZGrbnQbd7/gLL1pjueVxGbWFWGeZEE4LG6sAYNO6atzzqgLviNceNqRvXm2+C+J\nl4XWhwDTk+Z1wiJNa3oa0hMgSVZ5ra7XAWe1CGZxOlMQnbe299gTBOzf2Dsxmx7y\nSDBrRa0p593Mhj2sVgSLXWnqF1AR92FMAKhqhjzeGHKokyh4uax+GsW9pJl7cgZP\nDNdfTIFOA03hGsuQE89+qSa05+qs4HDHuiGI760uQx4SI9Rd0FxNhAPC5FzuZBPs\nvnUn6HPkVcTmEKYYOarMC9VtJIPnjymLZqR46y9VjLr8qGvoR7rrAsWyFsjNiP6k\n3ySbCeZwogcDq6wksKkavEpWRmAUQroQvs/TCZOIAFHQf1agWpN556jmvv7j8i+q\nEGOY93BgBuQum+HvidJcJy8RqVCVxYfXE3MihN6dvTxyF7BoniHY6w/2lmg=\n-----END PRIVATE KEY-----\n```\n\n```\n-----BEGIN PRIVATE KEY-----\nMIIKGAIBADALBglghkgBZQMEAxEEggoEBIIKANeytHJUquDbReeTDUqY0sl9jxOX\n0Xidr6FwJLMW6b7JOc4Pf3f421ZE3No2a/5HNL2V9DX/mmE6pUqkHCxpTAQymgex\n+rtI9SownxGhiY+EjiMi/+Yj7IENs77jNoWFSogmnaMg1RIL/P6JoY4w9xFNg6pA\nSmRrbJlziYYNElIu4ABuI4SBkYZhmyYNEYZk1KYoIhhEgkAomBRhSKZhTEJIoZII\nwjgpUSRICKElwggxCMRxIBQJFINsGKeAhBBuycBwIrVkCLBhDAcEmBJEUYhpWQBG\nIpMgQQYuQrZMARZJFChMQahRgEYKURZRWgggAiJE3JhJ0TJR4TBl08CFkqhREqFk\nADkiCUZiHMcM2Qht0AYmUkCFgEQwkQYsUMgJJMWEGpZtSpgsmQZtpEQyIKdkWjJu\nEbVwIJJhJBOOBIUsCkhyyKBR0wgqmSCAWCQgJAdOWRSIEKRkYMBt4LKNGxkJIDQi\nwCRBCUNxCiEgYaIBUiJSG4CAmjQAE5NN0zIpIhcKmJJpGhRRICchnMAgYqKBSBhp\nGoVNg0RpWyBBAxJCyxhGAakNDAIxg7AhWiJKyJIF2ZBpBDBqSwZK0rIBHEBAgUIy\nUjJyVKZAWhgQDDISksKAUhJiXIIoC7RsA0KNUxAMFAEO4TZSiIQkkQIKY0YmIAYp\nEcIo0CBIArNsojYJWoZIy7Rhi0ZixECCGokJEAJNJLJFIBIlJMkFiCiMycBNWUgi\nCiduwTRkTJBgW0RQgoZJQ4gEQ7KMYDCAoogthKRtjKYp0MaEQgZGiYhRAKmNAUmN\n5DgNpAaN05RxQrJsGoRhG6MoQrQoCKBxGsUx4KBMATdlJChiFCiQCRBh2UAiGzNg\nCQKS0CSBIAQISRhEoyItXIhEFJgIpEZhAZVkCzkKDJRQykBq0rIgwDgBgjCOE7kI\nkYCEFIgpwBiREjUNoCQi4gQG2cKFBCgSHMmJGAJy0kApwggS2AYqmZRxm7hoI4Qp\nGiKJFEUR3IJEUJZFDESEwLIEmqYFQ4YsRDJuiEQhIKhMmjBw47gtYyaIAyVJA0OM\nSKgJyhRyUzROEkMIG6cEWTAi2ZSA4jQigUISnDAqlDQmYQRFJCYoE0YJSjJtESgJ\nGLglYigRE0ENQbIRkIRMixISosaIycAwIgYG0hiOhIYwkERSEogx2SBxE8UoQwYO\nAzBgzKaEWCZSTIgBH/clYshf+kOs+kkhfysXLXu8FGIObZgKcaq73wxF6aIG7LFC\nP+4V3swXYBMAFJ2SI81ubG4fqOQfx8ZJOKtokF/T3NpQ2HCC59DXHRvJsrhMhVI8\nqP5srSlK34O+FbEI/3IdDMh7w906dZAYSw6EVmOpH8nhw8U6YdhnQgsE8JI1V1O8\nZaBjaP1BKV/QmSQTLG+R9nlkwUJnSnJcNDkUxM7PWMB0vK9FWMl795EeB6ptCTjy\n7iuzwajFldY16ENC/eoB3CSyEa0vwoHPd+WREMerxUvwyG1IC5vidkcdydYDzumM\n/as+n8+3A3k1YFSepEUPp7M/uRacRLTSX7nEV/SXkc09oD6slglYE8EFEyzNpOY+\nSSKM0j2KHzeFbxQtk7kNsJ+Cr4kljGOquAR6gMA2yTV+ogRvjcY1TwxSlfNCu0F9\nPP6wsf0zYiwp4Uy72S4TY8ZevUUEt1EjKblnDjLhssZ6VOfxpV+Ln56gToyjpwXm\nKjxeY3N0r7eutt3qYSzeKPAaIC16pONHItJ90/m4mJTQGf1dTXEZ7+NyO7oQTLi7\nCYHgdN46/iANqq6tgmzEXyRNv0Ma+rNO+994JHTS/VcRj2RiFJNO2Zy6OwA+jWej\ng29vGfxBkQzlFj7jrpnrhNUU63YeY2hOpW+XkdLdSqxuYWi5SMgX91oiKssOjNwD\nzEr+j2cVfho2O3+u/58XK5iRNnfFod0IXp7kwiBSwa9YGTEWZz3NO/xfNLhV3MbH\neIVknp5x9D1K6g9Lcsp+2gV4uhPTGmWNLQYKmmb/ae0b55l6L7HScj04+b+r4Y+O\nezzakG5Om16ULI6uspYHDr/TZJR6lAzJeL7Wazd0nm1dzXvoxJREDiuEzs/vuYwL\n7fs8QeM1nSzXGX++cgxIqmxrZGXB7mPjVpwq3HREkTcLf3gm/gt3odGdZBAdAyuR\ngQa0LS73N0flYB/kulDyPt5SHwMagX0VKUpDci6DeHhLbbDPG6norpEdkgG5zpzD\nAZxvXCfLmNomFEtkIlp8kysw92Hnii1Zodi4PsY0Si9t1H52VwbQC/SnmmqSbDup\nHYEsjyx5erF5Zwnl0WhWd4KTUp8ChtAVw7U5lhlkKjM+nlk9bj9TU5lCCOnmozKF\nHX9lJSKpKLkX4n4tbUITff4uv6b7HGeybAJUUoaF9+vb4xWmjqotp2noqfQtPmAA\nfHEzCSaywAEtg+rU5P0e2HLM0ZciAdKwJ/NUWsLTDNeLwddA/sy8b8KgRGxuMOrF\nH1ppCYqi1EfyCFtOTkuSzMJpIdLeR4UYzQkM4meuotJ62lf9iLSXbYn7hDzcz0mn\nbKJnnmgBv6f7AxiW+1BilwS5kjk2u13ThTERIcrfsRmV5ZtzA0z2ftA6uBOGdkjQ\nJYKAh+lJqa/Ra5XXLZmx7coleqwTL/t6Bwmu1anA/wX7Dyu/KECe7XtfWAG+lkzt\nAZ4ct4UdOFHxApBnThn/sAizAcSs9kGiuxQhbh1pyr9Ste8idJaw8weZqFXRF/rT\ndEpvozUD6nmLUt3X7lQmYJ2/zT8ME7Fk1sBR9+1KEZcZpxLjiNMoQCCB/xNUtVTS\nwjev7TsVHEuo6fS964SZowZuJrvGnorwid7HFzHR3FKeqxfvc3RzTA/kdUlMg4Nr\n3TSgO5vImRRxYGG/uY7G5hw+1EOO3K8lJDxkcIa56nAYsNmooLAM7LAKveJJjWnC\nM2EBp3LL5PVxUj9RvQWILN81i4ScwUCqH68iQjoShRzg4z/UiXWklZ+lxf5BjJOQ\ngZGrbnQbd7/gLL1pjueVxGbWFWGeZEE4LG6sAYNO6atzzqgLviNceNqRvXm2+C+J\nl4XWhwDTk+Z1wiJNa3oa0hMgSVZ5ra7XAWe1CGZxOlMQnbe299gTBOzf2Dsxmx7y\nSDBrRa0p593Mhj2sVgSLXWnqF1AR92FMAKhqhjzeGHKokyh4uax+GsW9pJl7cgZP\nDNdfTIFOA03hGsuQE89+qSa05+qs4HDHuiGI760uQx4SI9Rd0FxNhAPC5FzuZBPs\nvnUn6HPkVcTmEKYYOarMC9VtJIPnjymLZqR46y9VjLr8qGvoR7rrAsWyFsjNiP6k\n3ySbCeZwogcDq6wksKkavEpWRmAUQroQvs/TCZOIAFHQf1agWpN556jmvv7j8i+q\nEGOY93BgBuQum+HvidJcJy8RqVCVxYfXE3MihN6dvTxyF7BoniHY6w/2lmg=\n-----END PRIVATE KEY-----\n```\n",
          "createdAt": "2025-03-19T11:16:59Z",
          "updatedAt": "2025-03-20T11:37:20Z"
        }
      ]
    },
    {
      "number": 105,
      "id": "I_kwDOIEpj4c6utUP4",
      "title": "Explain how to parse CHOICE correctly",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/105",
      "state": "OPEN",
      "author": "dennisjackson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In the mailing list discussion, a few folks expressed confusion about how to correctly parse the CHOICE representations. In Implementation Considerations, can we spell out that the tags determine which field is present and there's no need to use heuristics like length. e.g. \n\n\"When parsing the private key, the ASN.1 tag explicitly indicates which variant of CHOICE is present. Implementations should use this tag to parse the private key, rather than any other heuristic like length of the OCTET STRING.\" \n\n",
      "createdAt": "2025-03-19T09:42:08Z",
      "updatedAt": "2025-03-19T11:53:44Z",
      "closedAt": null,
      "comments": [
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "If this is useful to note because some readers need a TL;DR shortcut around ASN.1, then perhaps be explicit about the tag values `0x80` for seed only, `0x04` for key only, and `0x30` for both.",
          "createdAt": "2025-03-19T11:53:20Z",
          "updatedAt": "2025-03-19T11:53:44Z"
        }
      ]
    },
    {
      "number": 106,
      "id": "I_kwDOIEpj4c6uuF_l",
      "title": "Spell out parsing of expandedKey",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/106",
      "state": "OPEN",
      "author": "dennisjackson",
      "authorAssociation": "NONE",
      "assignees": [
        "bwesterb"
      ],
      "labels": [],
      "body": "The draft doesn't actually specify how to parse expandedKey. I guess algorithm 25 of FIPS 204 is the right reference to add, but what happens if the input is malformed? ",
      "createdAt": "2025-03-19T10:47:02Z",
      "updatedAt": "2025-03-20T06:13:38Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 123,
      "id": "I_kwDOIEpj4c6vs4Ze",
      "title": "Clarification in Appendix D",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/123",
      "state": "OPEN",
      "author": "GiacomoPope",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I didn't want to make a PR on this as I'm not 100% sure I understand the language, so I'll make the issue instead.\n\nIn appendix D you have both \"external operations\" and \"internal operations\" -- my understanding is external ones are exposed by the API whilst internal ones.... are not!\n\nYou currently list `ExternalMu-ML-DSA.Prehash(pk, M, ctx)` as *external* with `ExternalMu-ML-DSA.Sign(sk, mu)` and `ExternalMu-ML-DSA.Sign_internal(sk, mu, rnd)` as *internal*. \n\nMy reading of this would be that `ExternalMu-ML-DSA.Sign(sk, mu)` should be an external operation in that it needs to be exposed at the API level, but maybe I am misunderstanding what internal/external means in this context",
      "createdAt": "2025-03-25T21:13:05Z",
      "updatedAt": "2025-03-25T21:13:05Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 125,
      "id": "I_kwDOIEpj4c6ws7uA",
      "title": "Rationale for disallowing HashML-DSA",
      "url": "https://github.com/lamps-wg/dilithium-certificates/issues/125",
      "state": "OPEN",
      "author": "dcooper16",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 10.1 says:\n\n> The security reason for disallowing HashML-DSA is that the design of the ML-DSA algorithm provides enhanced resistance against signature collision attacks, compared with conventional RSA or ECDSA signature algorithms. Specifically, ML-DSA binds the hash of the public key tr to the message to-be-signed prior to hashing, as described in line 6 of Algorithm 7 of [[FIPS204](https://lamps-wg.github.io/dilithium-certificates/draft-ietf-lamps-dilithium-certificates.html#FIPS204)]. In practice, this provides binding to the indended verification public key, preventing some attacks that would otherwise allow a signature to be successfully verified against a non-intended public key.\n\nCould someone please explain how HashML-DSA does not provide a binding to the intended verification public key? The difference between ML-DSA and HashML-DSA is:\n\n\u03bc \u2190 H(tr | 0 | len(ctx) | ctx | M)\nvs.\n\u03bc \u2190 H(tr | 1 | len(ctx) | ctx | OID_hash | hash(M))\n\nI understand the later claim about collision attacks requiring a targeted collision against SHAKE256 (with a 64-byte output) versus an untargeted attacker against the hash function used to compute the pre-hash. However, what security property is gained by binding the hash of the public key to the message _prior to hashing_?",
      "createdAt": "2025-04-01T21:02:30Z",
      "updatedAt": "2025-04-07T12:54:04Z",
      "closedAt": null,
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi David,\n\nThis text is basically saying that HashML-DSA binds a digest of the message to the public key whereas ML-DSA binds the message to the public key. In a sense it reiterates that if you pass the whole message you prevent the targeted collisions because the public key is bound to the mu calculation whereas HashML-DSA does not. The next paragraph says the same thing from another perspective. \n\nDo you want to propose a rephrase for the paragraph, if you think it is confusing?\n\n\n",
          "createdAt": "2025-04-03T02:30:49Z",
          "updatedAt": "2025-04-03T02:30:49Z"
        },
        {
          "author": "dcooper16",
          "authorAssociation": "NONE",
          "body": "Currently the text that I quoted seems to be trying to say something different from the sentence that comes after it. The is supported by the last sentence in the paragraph, which says that \"HashML-DSA removes both of these enhanced security properties.\" The text I quoted seems to suggest that with HashML-DSA it might be easier to create a single signature that verifies with two different public keys, but I don't believe that is true.\n\nIf you really want to mention the collision resistance issue, then I would shorten the paragraph to clearly indicate that there is only one issue of concern:\n\n> The security reason for disallowing HashML-DSA is that the design of the ML-DSA algorithm provides enhanced resistance against signature collision attacks, compared with conventional RSA or ECDSA signature algorithms. Specifically, ML-DSA prepends the hash of the public key tr to the message to-be-signed prior to hashing, as described in line 6 of Algorithm 7 of [[FIPS204](https://lamps-wg.github.io/dilithium-certificates/draft-ietf-lamps-dilithium-certificates.html#FIPS204)]. This means that in the unlikely discovery of a collision attack against SHA-3, an attacker would have to perform a public-key-specific collision search in order to find message pairs such that H(tr || m1) = H(tr || m2) since a direct hash collision H(m1) = H(m2) will not suffice. HashML-DSA removes this enhanced security property.\n\nPersonally, however, I don't accept the idea that targeted collisions are significantly more difficult to find than untargeted collisions. With MD5, https://marc-stevens.nl/research/hashclash/rogue-ca/ was able to find targeted collisions, despite it being non-trivial to determine what the target would be. If the target is something long-lived, and publicly known, like a public key, then the need for the collision to be targeted would provide very limited protection.",
          "createdAt": "2025-04-04T19:41:25Z",
          "updatedAt": "2025-04-04T19:41:25Z"
        },
        {
          "author": "HenrickStreamSec",
          "authorAssociation": "NONE",
          "body": "Please let me add that it is questionable whether the notion that the hash of the message isn't bound to the public of the signer, applies to Certificates and CRLs, in the first place. A certificate and a CRL already uniquely identifies which public key must be used to verify the signature. This is a key feature of certificate chaining, and it is typically accomplished solely through the issuer name and signature algorithm identifier, both of which occur early in the certificate and CRL, respectively. Granted, sometimes the Authority Key Identifier extension is necessary to pin down the issuer certificate, This might occur e.g. if the CA has replaced an old CA certificate with a new one, and kept the issuer name without any additions. However, it is unclear what kind of vulnerabilities this open, which would not be possible to counter using any other mean, than by using PureML-DSA, instead of PreHashML-DSA.",
          "createdAt": "2025-04-06T09:23:10Z",
          "updatedAt": "2025-04-06T09:23:10Z"
        },
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "My take is that in the context of CA-issued certificates, whether the signature is bound to the public key or not has no material security relevance. Sure, a lazy attacker *might* want a collision that's effective against every CA, but this is hardly necessary, it is sufficient to attack one CA (at a time), if it is a widely trusted issuer, no other CAs need to be attacked.\n\nAttacks that are portable across multiple signer keys could in theory be of some greater relevant in EE applications, but hardly so with CA certs and CRLs. The solution is to avoid weak hash functions, not to add unnatural constraints on use of signature algorithms in just EE applications or just PKIX.",
          "createdAt": "2025-04-07T12:54:03Z",
          "updatedAt": "2025-04-07T12:54:03Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 5,
      "id": "PR_kwDOIEpj4c5A_td_",
      "title": "Update README.md",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/5",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Make editor link point to the right repo.",
      "createdAt": "2022-10-18T08:50:50Z",
      "updatedAt": "2025-01-22T21:05:52Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "1c17ee20c7c9c0ceb25fc4af13ecdf7264c9eef0",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-patch-2",
      "headRefOid": "025eb33a199ffc98dcc1939b1ffea03681dad21f",
      "closedAt": "2022-10-18T14:37:38Z",
      "mergedAt": "2022-10-18T14:37:38Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "9f65f13fdb5c3b7256c894667af32a4c78a777f6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOIEpj4c5JNtex",
      "title": "Update Appendix Title",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/9",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Not wed to this, but we should pick something.",
      "createdAt": "2023-02-03T15:53:03Z",
      "updatedAt": "2025-01-22T21:05:53Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "7eee210facc674f61bb9696747b30b48a8a35dec",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-AppB-title",
      "headRefOid": "ec43c641453b03d9da779d2ce2da1c6163430fbe",
      "closedAt": "2023-02-03T20:58:27Z",
      "mergedAt": "2023-02-03T20:58:27Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "e15ae0ebbae70070025fdf125cccfc278f6d30ba"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c5Mg-OW",
          "commit": {
            "abbreviatedOid": "ec43c64"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-03T20:58:15Z",
          "updatedAt": "2023-02-03T20:58:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOIEpj4c5NILSX",
      "title": "Remove public/private key wrappers",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/11",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1st of two commits for this PR. This one addresses the ASN.1. Next one should address the removal of the DilithiumPrivateKey and DilithiumPublicKey fields.",
      "createdAt": "2023-03-29T05:43:34Z",
      "updatedAt": "2025-01-22T21:05:54Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "52dbea5787354f76fff832ec254c6a7e36b30bcf",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-no-wrappers",
      "headRefOid": "d64b89deab48011c55e00204f6b9fcaaebe8047e",
      "closedAt": "2023-03-29T18:51:45Z",
      "mergedAt": "2023-03-29T18:51:45Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "c0a12cc7d8f5dc51f0253f5628f8082f57b7bb07"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 13,
      "id": "PR_kwDOIEpj4c5y3G8j",
      "title": "Editorial Nits",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/13",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just making some editorial nits: The \"A\" in ML-DSA is algorithm ;)",
      "createdAt": "2024-06-18T18:41:30Z",
      "updatedAt": "2025-01-22T21:05:56Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "6a67d02bf1714c66b80d76a042033de7002401fb",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-nits-01",
      "headRefOid": "8ac5866252b8bc0d2eb5cd945541921604acb4ec",
      "closedAt": "2024-06-24T19:58:55Z",
      "mergedAt": "2024-06-24T19:58:55Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "1afc70aec2338057fed7b5d49ebbf2ed4431ec39"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 14,
      "id": "PR_kwDOIEpj4c500mze",
      "title": "Address John's comment, editorial, alignment with ML-KEM I-D",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/14",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Partially deals with #12; didn't incorporate the refs to PKCS#10, CMP, CMC, etc.\r\n\r\nSome alignment with ML-KEM I-D.\r\n\r\nEditorial suggestions; added a lot of newlines because in codeview it was much easier to read without always have to scroll right.",
      "createdAt": "2024-07-09T11:51:11Z",
      "updatedAt": "2025-01-22T21:05:56Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "1afc70aec2338057fed7b5d49ebbf2ed4431ec39",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-john",
      "headRefOid": "c4eda20d91263b99345966932062b8c84be204ed",
      "closedAt": "2024-07-18T19:26:46Z",
      "mergedAt": "2024-07-18T19:26:46Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "4c0239dd76ea3dc1e9312aad0e58dfacc750bbbe"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I hate XML - it only took me 7 times to get this to work.",
          "createdAt": "2024-07-09T12:28:11Z",
          "updatedAt": "2024-07-09T12:28:11Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jakemas @csosto-pk @bwesterb PTAL my plan would be to land this over the weekend so we upload a new I-D version to talk about at the LAMPS@IETF120 session. ",
          "createdAt": "2024-07-18T19:01:22Z",
          "updatedAt": "2024-07-18T19:01:22Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Perfect, thanks Sean! I\u2019ll take a look now and merge.\r\n\r\nFrom: Sean Turner ***@***.***>\r\nReply-To: lamps-wg/dilithium-certificates ***@***.***>\r\nDate: Thursday, July 18, 2024 at 12:02\u202fPM\r\nTo: lamps-wg/dilithium-certificates ***@***.***>\r\nCc: \"Massimo, Jake\" ***@***.***>, Mention ***@***.***>\r\nSubject: Re: [lamps-wg/dilithium-certificates] Address John's comment, editorial, alignment with ML-KEM I-D (PR #14)\r\n\r\n\r\n@jakemas<https://github.com/jakemas> @csosto-pk<https://github.com/csosto-pk> @bwesterb<https://github.com/bwesterb> PTAL my plan would be to land this over the weekend so we upload a new I-D version to talk about at the ***@***.*** session.\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/lamps-wg/dilithium-certificates/pull/14#issuecomment-2237334036>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AQHHONEFBXVFFV3EKMTELF3ZNAGJRAVCNFSM6AAAAABKSWLBUGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMZXGMZTIMBTGY>.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\r\n",
          "createdAt": "2024-07-18T19:34:22Z",
          "updatedAt": "2024-07-18T19:34:22Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "lgtm",
          "createdAt": "2024-07-19T12:28:12Z",
          "updatedAt": "2024-07-19T12:28:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6BHFS3",
          "commit": {
            "abbreviatedOid": "639a4db"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:03:52Z",
          "updatedAt": "2024-07-09T12:03:52Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "```suggestion\r\n       <t>The contents of the parameters component for each algorithm <bcp14>MUST</bcp14> be absent.</t>\r\n```",
              "createdAt": "2024-07-09T12:03:52Z",
              "updatedAt": "2024-07-09T12:03:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6BHFz7",
          "commit": {
            "abbreviatedOid": "1f09132"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:04:58Z",
          "updatedAt": "2024-07-09T12:04:58Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "```suggestion\r\n\t      <xref target=\"RFC5280\" format=\"default\"/>. The parameters of these signature algorithms <bcp14>MUST</bcp14> be absent,\r\n```",
              "createdAt": "2024-07-09T12:04:58Z",
              "updatedAt": "2024-07-09T12:04:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6BHHXz",
          "commit": {
            "abbreviatedOid": "96f021d"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:08:10Z",
          "updatedAt": "2024-07-09T12:08:10Z",
          "comments": [
            {
              "originalPosition": 346,
              "body": "```suggestion\r\n\t      structure defined in <xref target=\"mldsapublickey\" format=\"default\"/> is intentionally encoded as a single\r\n```",
              "createdAt": "2024-07-09T12:08:10Z",
              "updatedAt": "2024-07-09T12:08:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6BHJkA",
          "commit": {
            "abbreviatedOid": "79ceea7"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:11:31Z",
          "updatedAt": "2024-07-09T12:11:31Z",
          "comments": [
            {
              "originalPosition": 332,
              "body": "```suggestion\r\n\t      the assumed collision resistance of the hash function used (in this case SHAKE-256).\r\n```",
              "createdAt": "2024-07-09T12:11:31Z",
              "updatedAt": "2024-07-09T12:11:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6BHPNS",
          "commit": {
            "abbreviatedOid": "f9211b2"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:21:20Z",
          "updatedAt": "2024-07-09T12:21:20Z",
          "comments": [
            {
              "originalPosition": 148,
              "body": "```suggestion\r\n      <section anchor=\"mldsapublickey\" numbered=\"true\" toc=\"default\">\r\n```",
              "createdAt": "2024-07-09T12:21:20Z",
              "updatedAt": "2024-07-09T12:21:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6BHQ1z",
          "commit": {
            "abbreviatedOid": "07122b9"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:24:02Z",
          "updatedAt": "2024-07-09T12:24:02Z",
          "comments": [
            {
              "originalPosition": 356,
              "body": "```suggestion\r\n        <reference anchor=\"DRAFTFIPS204\" target=\"https://doi.org/10.6028/NIST.FIPS.204.ipd\">\r\n```",
              "createdAt": "2024-07-09T12:24:02Z",
              "updatedAt": "2024-07-09T12:24:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOIEpj4c501C6_",
      "title": "Address #15",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/16",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #15.",
      "createdAt": "2024-07-09T12:45:38Z",
      "updatedAt": "2025-01-22T21:05:15Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "4c0239dd76ea3dc1e9312aad0e58dfacc750bbbe",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-issue-15",
      "headRefOid": "aae145c3bd7f7eee877edfb0526886363c7ce729",
      "closedAt": "2024-07-18T20:07:07Z",
      "mergedAt": "2024-07-18T20:07:07Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "61845bcf52993650c4375ae33587df54740952d0"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Need to land #14 to get X680 ref.",
          "createdAt": "2024-07-09T13:12:29Z",
          "updatedAt": "2024-07-09T13:12:29Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixing conflict. Again @seanturner let me know if this looks good, and I will merge!",
          "createdAt": "2024-07-18T19:33:40Z",
          "updatedAt": "2024-07-18T19:33:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6BHfDQ",
          "commit": {
            "abbreviatedOid": "90d4f9f"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:48:21Z",
          "updatedAt": "2024-07-09T12:48:21Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n       <t>NOTE: The above syntax is from <xref target=\"RFC5912\"/> and is compatible with the 2021 ASN.1 syntax <xref target=\"X680\"/>}. See\r\n```",
              "createdAt": "2024-07-09T12:48:21Z",
              "updatedAt": "2024-07-09T12:48:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6BHi8i",
          "commit": {
            "abbreviatedOid": "73286dc"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:54:34Z",
          "updatedAt": "2024-07-09T12:54:35Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n   AlgorithmIdentifier{ALGORITHM-TYPE, ALGORITHM-TYPE:AlgorithmSet} ::=\r\n     SEQUENCE {\r\n       algorithm   ALGORITHM-TYPE.&id({AlgorithmSet}),\r\n       parameters  ALGORITHM-TYPE.\r\n                     &Params({AlgorithmSet}{@algorithm}) OPTIONAL\r\n     }\r\n```",
              "createdAt": "2024-07-09T12:54:34Z",
              "updatedAt": "2024-07-09T12:54:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6BHkKz",
          "commit": {
            "abbreviatedOid": "06701c6"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:56:21Z",
          "updatedAt": "2024-07-09T12:56:21Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n       </artwork>\r\n```",
              "createdAt": "2024-07-09T12:56:21Z",
              "updatedAt": "2024-07-09T12:56:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6BHkdK",
          "commit": {
            "abbreviatedOid": "a44ae36"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T12:56:49Z",
          "updatedAt": "2024-07-09T12:56:49Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\n       <artwork type=\"asn.1\">\r\n```",
              "createdAt": "2024-07-09T12:56:49Z",
              "updatedAt": "2024-07-09T12:56:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6BHtUG",
          "commit": {
            "abbreviatedOid": "84686e0"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T13:10:07Z",
          "updatedAt": "2024-07-09T13:10:07Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n       <sourcecode type=\"asn.1\">\r\n   AlgorithmIdentifier{ALGORITHM-TYPE, ALGORITHM-TYPE:AlgorithmSet} ::=\r\n     SEQUENCE {\r\n       algorithm   ALGORITHM-TYPE.\"&amp;\"id({AlgorithmSet}),\r\n       parameters  ALGORITHM-TYPE.\r\n                     \"&amp;\"Params({AlgorithmSet}{@algorithm}) OPTIONAL\r\n     }\r\n       </sourcecode>\r\n```",
              "createdAt": "2024-07-09T13:10:07Z",
              "updatedAt": "2024-07-09T13:10:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOIEpj4c501iqW",
      "title": "Address #17",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/18",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #17.",
      "createdAt": "2024-07-09T13:37:45Z",
      "updatedAt": "2025-01-22T21:05:13Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "4c0239dd76ea3dc1e9312aad0e58dfacc750bbbe",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-issue-17",
      "headRefOid": "fff8dd8710a46ca32107d623788b067c368e6479",
      "closedAt": "2024-07-18T20:08:16Z",
      "mergedAt": "2024-07-18T20:08:16Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "f3757b10302d1c66ba30dfbf481be1c3c08a0330"
      },
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed merge conflict. @seanturner can you confirm that I addressed the conflict in the way you would have intended? If so, then I will merge!",
          "createdAt": "2024-07-18T19:31:31Z",
          "updatedAt": "2024-07-18T19:31:31Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jakemas belatedly lgtm!",
          "createdAt": "2024-07-19T12:50:05Z",
          "updatedAt": "2024-07-19T12:50:05Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you! If that\u2019s all the changes merged, I can release a new WG version ahead of the weekend.\r\n\r\nCheers,\r\nJake\r\n\r\nFrom: Sean Turner ***@***.***>\r\nReply-To: lamps-wg/dilithium-certificates ***@***.***>\r\nDate: Friday, July 19, 2024 at 12:03\u202fPM\r\nTo: lamps-wg/dilithium-certificates ***@***.***>\r\nCc: \"Massimo, Jake\" ***@***.***>, Mention ***@***.***>\r\nSubject: Re: [lamps-wg/dilithium-certificates] Address #17 (PR #18)\r\n\r\n\r\n@jakemas<https://github.com/jakemas> belatedly lgtm!\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/lamps-wg/dilithium-certificates/pull/18#issuecomment-2239066097>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AQHHONFDRO6SVHX3RZFTVVDZNEDRHAVCNFSM6AAAAABKS4XDOCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMZZGA3DMMBZG4>.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\r\n",
          "createdAt": "2024-07-19T19:07:33Z",
          "updatedAt": "2024-07-19T19:07:33Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Feel free to spin a new version when you get chance.",
          "createdAt": "2024-07-22T17:24:42Z",
          "updatedAt": "2024-07-22T17:24:42Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "I did try late Friday night to give you an official version over the weekend (see release 4). But it seems the github workflow has broken, and it wasn\u2019t uploading the new releases. I pulled in new version of the github template we are using, but it didn\u2019t fix the issue. :(\r\n\r\nFrom: Sean Turner ***@***.***>\r\nReply-To: lamps-wg/dilithium-certificates ***@***.***>\r\nDate: Monday, July 22, 2024 at 10:25\u202fAM\r\nTo: lamps-wg/dilithium-certificates ***@***.***>\r\nCc: \"Massimo, Jake\" ***@***.***>, Mention ***@***.***>\r\nSubject: Re: [lamps-wg/dilithium-certificates] Address #17 (PR #18)\r\n\r\n\r\nFeel free to spin a new version when you get chance.\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/lamps-wg/dilithium-certificates/pull/18#issuecomment-2243457030>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AQHHONEHP6BU5RKWURW2SHDZNU57BAVCNFSM6AAAAABKS4XDOCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDENBTGQ2TOMBTGA>.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\r\n",
          "createdAt": "2024-07-22T17:27:21Z",
          "updatedAt": "2024-07-22T17:27:21Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The submission window was closed until Saturday (or maybe Sunday).  Hopefully you can just retry and it'll work.",
          "createdAt": "2024-07-22T17:36:27Z",
          "updatedAt": "2024-07-22T17:36:27Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Ahh okay! Looks like it\u2019s still not opened (https://github.com/lamps-wg/dilithium-certificates/actions/runs/10018760275) but I will keep trying!\r\n\r\nFrom: Sean Turner ***@***.***>\r\nReply-To: lamps-wg/dilithium-certificates ***@***.***>\r\nDate: Monday, July 22, 2024 at 10:37\u202fAM\r\nTo: lamps-wg/dilithium-certificates ***@***.***>\r\nCc: \"Massimo, Jake\" ***@***.***>, Mention ***@***.***>\r\nSubject: Re: [lamps-wg/dilithium-certificates] Address #17 (PR #18)\r\n\r\n\r\nThe submission window was closed until Saturday (or maybe Sunday). Hopefully you can just retry and it'll work.\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/lamps-wg/dilithium-certificates/pull/18#issuecomment-2243476045>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AQHHONFCSHTNK6PNJOS4GP3ZNU7LBAVCNFSM6AAAAABKS4XDOCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDENBTGQ3TMMBUGU>.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\r\n",
          "createdAt": "2024-07-22T18:15:56Z",
          "updatedAt": "2024-07-22T18:15:56Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Got it!\r\n\r\nFrom: Sean Turner ***@***.***>\r\nReply-To: lamps-wg/dilithium-certificates ***@***.***>\r\nDate: Monday, July 22, 2024 at 10:37\u202fAM\r\nTo: lamps-wg/dilithium-certificates ***@***.***>\r\nCc: \"Massimo, Jake\" ***@***.***>, Mention ***@***.***>\r\nSubject: Re: [lamps-wg/dilithium-certificates] Address #17 (PR #18)\r\n\r\n\r\nThe submission window was closed until Saturday (or maybe Sunday). Hopefully you can just retry and it'll work.\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/lamps-wg/dilithium-certificates/pull/18#issuecomment-2243476045>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AQHHONFCSHTNK6PNJOS4GP3ZNU7LBAVCNFSM6AAAAABKS4XDOCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDENBTGQ3TMMBUGU>.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\r\n",
          "createdAt": "2024-07-22T18:18:01Z",
          "updatedAt": "2024-07-22T18:18:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 20,
      "id": "PR_kwDOIEpj4c58LeuF",
      "title": "Update workflows",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/20",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Update archive.yml.",
      "createdAt": "2024-09-20T14:53:35Z",
      "updatedAt": "2025-01-22T21:05:17Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "10697fcb7d67e1e79257e38d1fc66972a111cdb2",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-update-workflow",
      "headRefOid": "13563326f0786735087173b1e3d234247058ab1d",
      "closedAt": "2024-09-23T18:27:11Z",
      "mergedAt": "2024-09-23T18:27:11Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "c6caaa48c681ae45bc3ab4270bb0a679b8b249ff"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 23,
      "id": "PR_kwDOIEpj4c58pWbt",
      "title": "Various updates",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/23",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-25T11:52:49Z",
      "updatedAt": "2024-09-25T17:28:22Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "c6caaa48c681ae45bc3ab4270bb0a679b8b249ff",
      "headRepository": "bwesterb/dilithium-certificates",
      "headRefName": "bas/updates",
      "headRefOid": "326f1f0c971ade82dcdcfbb4945e307282acd53f",
      "closedAt": "2024-09-25T17:28:21Z",
      "mergedAt": "2024-09-25T17:28:21Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "b9064ecfcf8e78858dcc1c6919590247c8eed6b1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6K0cE_",
          "commit": {
            "abbreviatedOid": "326f1f0"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you!",
          "createdAt": "2024-09-25T17:27:56Z",
          "updatedAt": "2024-09-25T17:27:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 25,
      "id": "PR_kwDOIEpj4c59Pjxv",
      "title": "Small updates",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/25",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-01T11:53:29Z",
      "updatedAt": "2024-10-02T16:42:32Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "b9064ecfcf8e78858dcc1c6919590247c8eed6b1",
      "headRepository": "bwesterb/dilithium-certificates",
      "headRefName": "more-updates",
      "headRefOid": "94c22f48a735a1d98600b160eef1ddfd63b1f62c",
      "closedAt": "2024-10-02T16:42:32Z",
      "mergedAt": "2024-10-02T16:42:32Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "408b2f500535f57bb83be833b073ba1565322c08"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 26,
      "id": "PR_kwDOIEpj4c59Pnoc",
      "title": "Don't talk about the internals of ML-DSA where it is not necessary",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/26",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-01T12:01:28Z",
      "updatedAt": "2024-10-02T16:42:54Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "b9064ecfcf8e78858dcc1c6919590247c8eed6b1",
      "headRepository": "bwesterb/dilithium-certificates",
      "headRefName": "remove-internals",
      "headRefOid": "a5c34992d985645d7563f5d44c4230e3e3456759",
      "closedAt": "2024-10-02T16:42:54Z",
      "mergedAt": "2024-10-02T16:42:54Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "3772958eb053f6b2d5d004cdb923880c2436cf59"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 27,
      "id": "PR_kwDOIEpj4c59PvmJ",
      "title": "Rework securiy considerations",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/27",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also removes incorrect remarks on hash-then-sign #19",
      "createdAt": "2024-10-01T12:18:25Z",
      "updatedAt": "2024-10-02T16:43:29Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "b9064ecfcf8e78858dcc1c6919590247c8eed6b1",
      "headRepository": "bwesterb/dilithium-certificates",
      "headRefName": "sec-con-rework",
      "headRefOid": "654f94dc7b6c3106936e207bb93644fba6372639",
      "closedAt": "2024-10-02T16:43:29Z",
      "mergedAt": "2024-10-02T16:43:29Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "baa757ad2260d847b3efebd2c5f0757536140eaa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 28,
      "id": "PR_kwDOIEpj4c59QFBP",
      "title": "Add example of private key",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/28",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-01T12:58:49Z",
      "updatedAt": "2024-10-02T16:44:01Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "b9064ecfcf8e78858dcc1c6919590247c8eed6b1",
      "headRepository": "bwesterb/dilithium-certificates",
      "headRefName": "privatekey",
      "headRefOid": "762d0b06bf2a5829ed374a09309fca2121009b4a",
      "closedAt": "2024-10-02T16:44:01Z",
      "mergedAt": "2024-10-02T16:44:01Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "e63e733341ae2fcac33ea741f084b4e92fbffe0a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 29,
      "id": "PR_kwDOIEpj4c59h_d6",
      "title": "ML-DSA-44 or 65 example?",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/29",
      "state": "MERGED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The public key example looks to be from ML-DSA-65. The public key example looks to have an OID that ends in 65 and also 1.8KB size. So, it is ML-DSA-65, right @jakemas ?\r\n\r\nAlso, I am not sure what \r\n> These parameters MUST be encoded as a single OCTET STRING.\r\nis referring to. @jakemas ",
      "createdAt": "2024-10-03T17:33:11Z",
      "updatedAt": "2024-10-22T15:44:06Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "e63e733341ae2fcac33ea741f084b4e92fbffe0a",
      "headRepository": "csosto-pk/dilithium-certificates",
      "headRefName": "patch-1",
      "headRefOid": "11ac5a18d2747011377889f5359d9cdccd39b0b7",
      "closedAt": "2024-10-22T15:44:06Z",
      "mergedAt": "2024-10-22T15:44:06Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "b1879cef6224c3b7196e371b5a693daf4ce55297"
      },
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "It's 44. See `examples/generate.go`, `examples/*.pub`, etc. Note that 1.8kB is the PEM encoded size and not the raw size.",
          "createdAt": "2024-10-03T18:32:10Z",
          "updatedAt": "2024-10-03T18:32:26Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Shall we remove `These parameters <bcp14>MUST</bcp14> be encoded as a single OCTET STRING.</t>`",
          "createdAt": "2024-10-03T21:58:23Z",
          "updatedAt": "2024-10-03T21:58:23Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I think we should remove \r\n\r\n> These parameters <bcp14>MUST</bcp14> be encoded as a single OCTET STRING.</t>",
          "createdAt": "2024-10-04T16:13:58Z",
          "updatedAt": "2024-10-04T16:13:58Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR still incorrectly renames 44 -> 65.",
          "createdAt": "2024-10-15T10:06:03Z",
          "updatedAt": "2024-10-15T10:06:03Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ACK. Removed the mistake of 44 --> 65. \r\nOnly the removal of the \"OCTET STRING\" remains. ",
          "createdAt": "2024-10-15T16:00:08Z",
          "updatedAt": "2024-10-15T16:00:22Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM. (Can't add myself as reviewer.)",
          "createdAt": "2024-10-15T16:27:06Z",
          "updatedAt": "2024-10-15T16:27:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6OMa4f",
          "commit": {
            "abbreviatedOid": "11ac5a1"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-22T15:43:52Z",
          "updatedAt": "2024-10-22T15:43:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOIEpj4c59iWdT",
      "title": "Added mention of pure ML-DSA and text about CRLs.",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/31",
      "state": "CLOSED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Added text to mention pure ML-DSA.\r\n\r\nAlso added text while pure ML-DSA is fine for X.509 and CRLs.\r\n\r\n@bwesterb , @seanturner please check.",
      "createdAt": "2024-10-03T18:26:32Z",
      "updatedAt": "2024-12-04T11:09:52Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "e63e733341ae2fcac33ea741f084b4e92fbffe0a",
      "headRepository": "csosto-pk/dilithium-certificates",
      "headRefName": "main",
      "headRefOid": "2fff34b31b64fbd74355a74defb47901fd394349",
      "closedAt": "2024-12-04T11:09:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Where did we end up on this one? Are we going to add some tweaked text?",
          "createdAt": "2024-10-28T02:36:51Z",
          "updatedAt": "2024-10-28T02:36:51Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Give me a little time. \r\n\r\nI think we will need HashML-DSA support in our draft although I was against it all along. I recently found out that some HSMs are very much against large MB or even KB size messages. \r\n\r\nI am trying to confirm with other vendors to make sure this is not unique to the things I am hearing here and there we will have to tweak the text. ",
          "createdAt": "2024-10-28T15:21:10Z",
          "updatedAt": "2024-10-28T15:21:38Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this old PR.",
          "createdAt": "2024-12-04T11:09:52Z",
          "updatedAt": "2024-12-04T11:09:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6L4Nbi",
          "commit": {
            "abbreviatedOid": "3c5b967"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T22:02:39Z",
          "updatedAt": "2024-10-03T22:03:44Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "typo \"enough\"",
              "createdAt": "2024-10-03T22:02:39Z",
              "updatedAt": "2024-10-03T22:03:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6NMlWH",
          "commit": {
            "abbreviatedOid": "3c5b967"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T10:36:45Z",
          "updatedAt": "2024-10-15T10:36:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I propose we remove \"The size [...]  ML-DSA performance.\", and add\r\n\r\n> Pure ML-DSA (in contrast to SLH-DSA) allows for streaming the message that has to be signed. The only advantage of the pre-digest version, is that it allows a different hash to be used for hashing the message.",
              "createdAt": "2024-10-15T10:36:45Z",
              "updatedAt": "2024-10-15T10:36:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6NQMAm",
          "commit": {
            "abbreviatedOid": "3c5b967"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T15:40:35Z",
          "updatedAt": "2024-10-15T15:40:36Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The pre-digest people do not argue that you cannot stream the message. Their point is that maybe I don't want to stream it to the HSM over its slow bus. I may want to just send the digest of the message and sign that especially if the message will be signed a lot of times.  I don't fully buy it, but that is their main argument. ",
              "createdAt": "2024-10-15T15:40:35Z",
              "updatedAt": "2024-10-15T15:55:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PxH14",
          "commit": {
            "abbreviatedOid": "3c5b967"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-04T02:06:41Z",
          "updatedAt": "2024-11-04T02:06:41Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n\t      The size of the X.509 content signed in most certificates is small enough to not pose a \r\n```",
              "createdAt": "2024-11-04T02:06:41Z",
              "updatedAt": "2024-11-04T02:06:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOIEpj4c5-pvke",
      "title": "Small fix",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/32",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-15T10:13:38Z",
      "updatedAt": "2024-10-22T16:14:55Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "e63e733341ae2fcac33ea741f084b4e92fbffe0a",
      "headRepository": "bwesterb/dilithium-certificates",
      "headRefName": "bas/fixes",
      "headRefOid": "657c9f9537fe7e99b9e40889b7deb6549aedc5f3",
      "closedAt": "2024-10-22T16:14:55Z",
      "mergedAt": "2024-10-22T16:14:55Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "d788252ff402eb029f1d070102c677a1dbf5254d"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bwesterb I guess go ahead and land this and then I can convert to md.",
          "createdAt": "2024-10-21T19:45:00Z",
          "updatedAt": "2024-10-21T19:45:00Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "SGTM. @seanturner  I don't have permission to merge.",
          "createdAt": "2024-10-21T19:56:48Z",
          "updatedAt": "2024-10-21T19:57:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6ODDP7",
          "commit": {
            "abbreviatedOid": "657c9f9"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-21T19:43:44Z",
          "updatedAt": "2024-10-21T19:43:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOIEpj4c5-uOTU",
      "title": "Move examples & asn.1 to appendicies",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/33",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Moving examples & asn.1 to appendices. Also, moving acks to be last.",
      "createdAt": "2024-10-15T19:33:18Z",
      "updatedAt": "2025-01-22T21:05:18Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "e63e733341ae2fcac33ea741f084b4e92fbffe0a",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-appendicies",
      "headRefOid": "9ae182641d08eea95b9fc089f3431f7474f3c60a",
      "closedAt": "2024-10-28T18:25:38Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed via #42.",
          "createdAt": "2024-10-28T18:09:49Z",
          "updatedAt": "2024-10-28T18:09:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6NST5z",
          "commit": {
            "abbreviatedOid": "702dae6"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T19:34:54Z",
          "updatedAt": "2024-10-15T19:34:55Z",
          "comments": [
            {
              "originalPosition": 250,
              "body": "```suggestion\r\n      </section>\r\n      <section anchor=\"Examples Certificate\" numbered=\"true\" toc=\"default\">\r\n```",
              "createdAt": "2024-10-15T19:34:54Z",
              "updatedAt": "2024-10-15T19:34:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6NSWaL",
          "commit": {
            "abbreviatedOid": "55e6833"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T19:39:39Z",
          "updatedAt": "2024-10-15T19:39:39Z",
          "comments": [
            {
              "originalPosition": 259,
              "body": "```suggestion\r\n     </section>\r\n```",
              "createdAt": "2024-10-15T19:39:39Z",
              "updatedAt": "2024-10-15T19:39:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6NUn-C",
          "commit": {
            "abbreviatedOid": "9ae1826"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T01:26:54Z",
          "updatedAt": "2024-10-16T01:26:55Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "X is a TODO",
              "createdAt": "2024-10-16T01:26:55Z",
              "updatedAt": "2024-10-16T01:26:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6NUoDk",
          "commit": {
            "abbreviatedOid": "9ae1826"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Appendix X should be updated to a TODO",
          "createdAt": "2024-10-16T01:27:17Z",
          "updatedAt": "2024-10-16T01:27:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOIEpj4c5_3vCw",
      "title": "examples: Fix OIDs",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/36",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #35",
      "createdAt": "2024-10-25T08:33:39Z",
      "updatedAt": "2024-10-28T15:59:16Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "e40cee9ed83abdf09027d74254f18b3ab274c381",
      "headRepository": "bwesterb/dilithium-certificates",
      "headRefName": "bas/35",
      "headRefOid": "b12832cf1d6e93e3a80d114564bb343456de3807",
      "closedAt": "2024-10-28T15:59:15Z",
      "mergedAt": "2024-10-28T15:59:15Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "45a6b32b077f2e376e616f0433f63451973ed477"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bwesterb these all use the same seed: 000102\u20261e1f?\r\n\r\nNever mind they are the same key so yep they are the same seed ;)",
          "createdAt": "2024-10-28T02:50:34Z",
          "updatedAt": "2024-10-28T03:02:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 37,
      "id": "PR_kwDOIEpj4c6ACJn8",
      "title": "Update README.md",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/37",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Refer to ML-DSA not Dilithium.",
      "createdAt": "2024-10-28T02:08:33Z",
      "updatedAt": "2025-01-22T21:05:20Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "d788252ff402eb029f1d070102c677a1dbf5254d",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-readme-2",
      "headRefOid": "5659c0ef020340330237fcf7ed9fddba37b7e190",
      "closedAt": "2024-10-28T02:31:59Z",
      "mergedAt": "2024-10-28T02:31:58Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "e40cee9ed83abdf09027d74254f18b3ab274c381"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6O666v",
          "commit": {
            "abbreviatedOid": "5659c0e"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-28T02:30:52Z",
          "updatedAt": "2024-10-28T02:30:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOIEpj4c6ACXV-",
      "title": "Drop \"ML-DSA-XX\" from private key file",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/38",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think it's just supposed to be\r\n\r\n     ----BEGIN PRIVATE KEY----\r\n     ----END PRIVATE KEY----\r\n\r\nwithout the ML-DSA-XX.",
      "createdAt": "2024-10-28T02:56:35Z",
      "updatedAt": "2025-01-22T21:05:21Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "e40cee9ed83abdf09027d74254f18b3ab274c381",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-drop-name",
      "headRefOid": "bd1dfa9bcbd9c720b9d5af95ae0599c2c4d43a73",
      "closedAt": "2024-10-28T13:01:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Change is included in #36 now so we can close this PR.",
          "createdAt": "2024-10-28T10:11:38Z",
          "updatedAt": "2024-10-28T10:11:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 39,
      "id": "PR_kwDOIEpj4c6AIcuL",
      "title": "Switch to MD",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/39",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This removes the XML & TXT files and adds markdown. ",
      "createdAt": "2024-10-28T17:14:53Z",
      "updatedAt": "2024-10-28T17:55:44Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "45a6b32b077f2e376e616f0433f63451973ed477",
      "headRepository": "seanturner/ml-dsa-certificates",
      "headRefName": "seanturner-switch2md",
      "headRefOid": "e97f710d227af86024391967e7415fc9f80c169c",
      "closedAt": "2024-10-28T17:55:44Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 40,
      "id": "PR_kwDOIEpj4c6AIvIM",
      "title": "Swtich to MD",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/40",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-28T17:50:23Z",
      "updatedAt": "2025-01-22T21:05:21Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "45a6b32b077f2e376e616f0433f63451973ed477",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-switch2md",
      "headRefOid": "90a1f71836748a29c70168149d08cb26141dcfa9",
      "closedAt": "2024-10-28T18:00:59Z",
      "mergedAt": "2024-10-28T18:00:59Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "940b40ee6eb96cdd58020faf6d2320990dd627a7"
      },
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Perfect!",
          "createdAt": "2024-10-28T17:53:02Z",
          "updatedAt": "2024-10-28T17:53:02Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jakemas I think we're good to go now!",
          "createdAt": "2024-10-28T18:00:29Z",
          "updatedAt": "2024-10-28T18:00:29Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Switched over to MD.",
          "createdAt": "2024-10-28T18:00:56Z",
          "updatedAt": "2024-10-28T18:00:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6PCiv8",
          "commit": {
            "abbreviatedOid": "9a14a0d"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T17:55:03Z",
          "updatedAt": "2024-10-28T17:55:11Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "``` \r\ngithub: \"lamps-wg/dilithium-certificates\"\r\nlatest: \"https://lamps-wg.github.io/dilithium-certificates/#go.draft-ietf-lamps-dilithium-certificates.html\"\r\n```",
              "createdAt": "2024-10-28T17:55:03Z",
              "updatedAt": "2024-10-28T17:56:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCjvc",
          "commit": {
            "abbreviatedOid": "0ce01b2"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T17:57:06Z",
          "updatedAt": "2024-10-28T17:57:06Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  github: \"lamps-wg/dilithium-certificates\"\r\n  latest: \"https://lamps-wg.github.io/kyber-certificates/#go.draft-ietf-lamps-dilithium-certificates.html\"\r\n```",
              "createdAt": "2024-10-28T17:57:06Z",
              "updatedAt": "2024-10-28T17:57:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCksL",
          "commit": {
            "abbreviatedOid": "32d097f"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T17:59:02Z",
          "updatedAt": "2024-10-28T17:59:02Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  latest: \"https://lamps-wg.github.io/dilithium-certificates/#go.draft-ietf-lamps-dilithium-certificates.html\"\r\n```",
              "createdAt": "2024-10-28T17:59:02Z",
              "updatedAt": "2024-10-28T17:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCkmn",
          "commit": {
            "abbreviatedOid": "32d097f"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I missed this one too!",
          "createdAt": "2024-10-28T17:58:51Z",
          "updatedAt": "2024-10-28T17:59:07Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  latest: \"https://lamps-wg.github.io/dilithium-certificates/#go.draft-ietf-lamps-dilithium-certificates.html\"\r\n```",
              "createdAt": "2024-10-28T17:58:52Z",
              "updatedAt": "2024-10-28T17:59:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PKMiy",
          "commit": {
            "abbreviatedOid": "90a1f71"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T13:06:01Z",
          "updatedAt": "2024-10-29T13:06:01Z",
          "comments": [
            {
              "originalPosition": 336,
              "body": "We can use an include directive now.",
              "createdAt": "2024-10-29T13:06:01Z",
              "updatedAt": "2024-10-29T13:06:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOIEpj4c6AI079",
      "title": "Seanturner refactor",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/41",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-28T18:03:15Z",
      "updatedAt": "2024-10-28T18:03:53Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "940b40ee6eb96cdd58020faf6d2320990dd627a7",
      "headRepository": "seanturner/ml-dsa-certificates",
      "headRefName": "seanturner-refactor",
      "headRefOid": "55d7ebc23cbb3f22549bed42cbb0e20f8ef76414",
      "closedAt": "2024-10-28T18:03:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 42,
      "id": "PR_kwDOIEpj4c6AI2xg",
      "title": "Refactor",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/42",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Move ASN.1 and examples to appendices. Trim some text down.\r\n\r\nAdd ASN.1 as separate file.",
      "createdAt": "2024-10-28T18:07:23Z",
      "updatedAt": "2025-01-22T21:05:22Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "940b40ee6eb96cdd58020faf6d2320990dd627a7",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-refactor",
      "headRefOid": "ba69248737c4dd0226f6cc93c053b5d225781270",
      "closedAt": "2024-10-28T18:25:18Z",
      "mergedAt": "2024-10-28T18:25:18Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "183aeaa321dc4ce7844a483871c04c31dd04068b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6PCq9R",
          "commit": {
            "abbreviatedOid": "5be294f"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:11:51Z",
          "updatedAt": "2024-10-28T18:11:52Z",
          "comments": [
            {
              "originalPosition": 284,
              "body": "```suggestion\r\n{::include ./examples/ML-DSA-44.priv}\r\n```",
              "createdAt": "2024-10-28T18:11:52Z",
              "updatedAt": "2024-10-28T18:11:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCrWc",
          "commit": {
            "abbreviatedOid": "fcc5f34"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:12:34Z",
          "updatedAt": "2024-10-28T18:12:34Z",
          "comments": [
            {
              "originalPosition": 302,
              "body": "```suggestion\r\n{::include ./examples/ML-DSA-65.priv}\r\n```",
              "createdAt": "2024-10-28T18:12:34Z",
              "updatedAt": "2024-10-28T18:12:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCrhM",
          "commit": {
            "abbreviatedOid": "dba4ec4"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:12:55Z",
          "updatedAt": "2024-10-28T18:12:55Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "```suggestion\r\n{::include ./examples/ML-DSA-87.priv}\r\n```",
              "createdAt": "2024-10-28T18:12:55Z",
              "updatedAt": "2024-10-28T18:12:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCrst",
          "commit": {
            "abbreviatedOid": "e1ae1fc"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:13:16Z",
          "updatedAt": "2024-10-28T18:13:17Z",
          "comments": [
            {
              "originalPosition": 345,
              "body": "```suggestion\r\n{::include ./examples/ML-DSA-44.pub}\r\n```",
              "createdAt": "2024-10-28T18:13:16Z",
              "updatedAt": "2024-10-28T18:13:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCr5D",
          "commit": {
            "abbreviatedOid": "f911d2c"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:13:34Z",
          "updatedAt": "2024-10-28T18:13:35Z",
          "comments": [
            {
              "originalPosition": 444,
              "body": "```suggestion\r\n{::include ./examples/ML-DSA-65.pub}\r\n```",
              "createdAt": "2024-10-28T18:13:34Z",
              "updatedAt": "2024-10-28T18:13:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCsEK",
          "commit": {
            "abbreviatedOid": "5b2b92c"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:13:55Z",
          "updatedAt": "2024-10-28T18:13:56Z",
          "comments": [
            {
              "originalPosition": 583,
              "body": "```suggestion\r\n{::include ./examples/ML-DSA-87.pub}\r\n```",
              "createdAt": "2024-10-28T18:13:55Z",
              "updatedAt": "2024-10-28T18:13:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCs0P",
          "commit": {
            "abbreviatedOid": "fa0c47b"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:15:10Z",
          "updatedAt": "2024-10-28T18:15:11Z",
          "comments": [
            {
              "originalPosition": 353,
              "body": "trailing whitespace",
              "createdAt": "2024-10-28T18:15:10Z",
              "updatedAt": "2024-10-28T18:15:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCs-o",
          "commit": {
            "abbreviatedOid": "fa0c47b"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:15:31Z",
          "updatedAt": "2024-10-28T18:15:32Z",
          "comments": [
            {
              "originalPosition": 234,
              "body": "```suggestion\r\n{{examples}} contains example ML-DSA private keys encoded using the\r\n```",
              "createdAt": "2024-10-28T18:15:31Z",
              "updatedAt": "2024-10-28T18:15:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCtBt",
          "commit": {
            "abbreviatedOid": "fa0c47b"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:15:37Z",
          "updatedAt": "2024-10-28T18:15:37Z",
          "comments": [
            {
              "originalPosition": 353,
              "body": "```suggestion\r\n16 1313:   BIT STRING\r\n```",
              "createdAt": "2024-10-28T18:15:37Z",
              "updatedAt": "2024-10-28T18:15:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCtfY",
          "commit": {
            "abbreviatedOid": "3579fec"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:16:25Z",
          "updatedAt": "2024-10-28T18:16:25Z",
          "comments": [
            {
              "originalPosition": 758,
              "body": "```suggestion\r\n## Example Certificate {#example-certificate}\r\n```",
              "createdAt": "2024-10-28T18:16:25Z",
              "updatedAt": "2024-10-28T18:16:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PCuLp",
          "commit": {
            "abbreviatedOid": "a871a8a"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T18:17:55Z",
          "updatedAt": "2024-10-28T18:17:56Z",
          "comments": [
            {
              "originalPosition": 138,
              "body": "```suggestion\r\n{{examples}} contains example ML-DSA private keys encoded using the\r\n```",
              "createdAt": "2024-10-28T18:17:55Z",
              "updatedAt": "2024-10-28T18:17:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 43,
      "id": "PR_kwDOIEpj4c6AJhqq",
      "title": "Section 4 and Section 6 rewrite",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/43",
      "state": "MERGED",
      "author": "jakemas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To address comments regarding the use of OCTET vs BIT STRING for private/public key encoding, I am modifying the draft to be more consistent with [draft-ietf-lamps-kyber-certificates](https://datatracker.ietf.org/doc/draft-ietf-lamps-kyber-certificates/) and [draft-ietf-lamps-x509-slhdsa](https://datatracker.ietf.org/doc/draft-ietf-lamps-x509-slhdsa/).\r\n\r\n",
      "createdAt": "2024-10-28T19:27:47Z",
      "updatedAt": "2024-10-29T20:45:51Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "183aeaa321dc4ce7844a483871c04c31dd04068b",
      "headRepository": "jakemas/dilithium-certificates",
      "headRefName": "encodingrewrite",
      "headRefOid": "dc20d492de4e6dbe39b8ef37da10e44fd8068890",
      "closedAt": "2024-10-29T20:45:51Z",
      "mergedAt": "2024-10-29T20:45:51Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "05efb174039ef1787fd52469f1604e55c665db43"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6PFQVu",
          "commit": {
            "abbreviatedOid": "4c145eb"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T01:24:27Z",
          "updatedAt": "2024-10-29T01:24:27Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "```suggestion\r\nthe raw octet string encoding of the 32-octet seed. The publicKey field\r\n```",
              "createdAt": "2024-10-29T01:24:27Z",
              "updatedAt": "2024-10-29T01:24:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PFQaI",
          "commit": {
            "abbreviatedOid": "4c145eb"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T01:24:51Z",
          "updatedAt": "2024-10-29T01:24:52Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "```suggestion\r\n#  Private Key Format\r\n```",
              "createdAt": "2024-10-29T01:24:51Z",
              "updatedAt": "2024-10-29T01:24:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 44,
      "id": "PR_kwDOIEpj4c6ALCnj",
      "title": "Update ASN.1 Module",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/44",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Based on [X509-SLHDSA-2024.asn](https://github.com/lamps-wg/x509-slhdsa/blob/main/X509-SLHDSA-2024.asn).",
      "createdAt": "2024-10-29T00:25:05Z",
      "updatedAt": "2025-01-22T21:05:23Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "183aeaa321dc4ce7844a483871c04c31dd04068b",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-asn1-module",
      "headRefOid": "45eac5e1de43cf178d9bcbe69b893c7fba407b16",
      "closedAt": "2024-10-29T20:46:32Z",
      "mergedAt": "2024-10-29T20:46:32Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "7723cb81fd802db8d39e89b6cb171d177d4dbabe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6PFJ7W",
          "commit": {
            "abbreviatedOid": "21afa2c"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T00:51:32Z",
          "updatedAt": "2024-10-29T00:51:33Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nRFC EDITOR: Please replace TBD2 with the value assigned by IANA during the publication of {{I-D.salter-lamps-cms-ml-dsa}}. Also please replace {{I-D.salter-lamps-cms-ml-dsa}} in the module with a reference to the published RFC.\r\n```",
              "createdAt": "2024-10-29T00:51:32Z",
              "updatedAt": "2024-10-29T00:51:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6PFLG5",
          "commit": {
            "abbreviatedOid": "b7d5aa9"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T00:58:03Z",
          "updatedAt": "2024-10-29T00:58:04Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2024-10-29T00:58:04Z",
              "updatedAt": "2024-10-29T00:58:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOIEpj4c6AvfPv",
      "title": "Update README.md",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/45",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-04T02:00:05Z",
      "updatedAt": "2025-01-22T21:05:25Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "7723cb81fd802db8d39e89b6cb171d177d4dbabe",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-readme-#1010220",
      "headRefOid": "a53c50bf4a21f092eef27e6a0c5419a55b03d5d0",
      "closedAt": "2024-11-04T13:18:37Z",
      "mergedAt": "2024-11-04T13:18:36Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "a7a685791d2971951087b56d07fee62cfb1e7d3d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 46,
      "id": "PR_kwDOIEpj4c6AzWHZ",
      "title": "align OID string",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/46",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "NIST uses id-ml-dsa, we should do the same.",
      "createdAt": "2024-11-04T13:42:36Z",
      "updatedAt": "2025-01-22T21:05:26Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "a7a685791d2971951087b56d07fee62cfb1e7d3d",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-oid-name",
      "headRefOid": "ef6b9d73af467ad056dec9bca39b72e800faa191",
      "closedAt": "2024-11-04T17:27:29Z",
      "mergedAt": "2024-11-04T17:27:29Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "7aa7d1254a47b103ccfbd9d5d5b02842cf295cad"
      },
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "lgtm. (I'm still not a Github contributor on this repo btw.)",
          "createdAt": "2024-11-04T14:29:28Z",
          "updatedAt": "2024-11-04T14:29:28Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bwesterb I added you and Panos as Admin.",
          "createdAt": "2024-11-04T17:29:40Z",
          "updatedAt": "2024-11-04T17:29:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 47,
      "id": "PR_kwDOIEpj4c6A8qAV",
      "title": "Mention pure ML-DSA's prehashing support",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/47",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "as discussed in the working group meeting 121 on Tuesday.\r\n\r\ncc @csosto-pk ",
      "createdAt": "2024-11-05T15:42:18Z",
      "updatedAt": "2024-11-14T12:31:05Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "3c97682adaf7626777066823f7792c8510595072",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "alg7l6",
      "headRefOid": "52c788179169228f172d9d72d287d1f4eb08cb73",
      "closedAt": "2024-11-14T12:31:05Z",
      "mergedAt": "2024-11-14T12:31:05Z",
      "mergedBy": "bwesterb",
      "mergeCommit": {
        "oid": "52c788179169228f172d9d72d287d1f4eb08cb73"
      },
      "comments": [
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I dislike this option more than HashML-DSA. Breaking up the signature has implication to its security analysis. \r\n\r\nI responded to the list with my counterpoints to Sophie's points (it does not seem to have appeared in the list yet). I am not convinced that taking mu out of the signature is more secure than HashML-DSA. And even if it was, it means SLH-DSA would need to something else, which means less alignment. \r\n\r\nAnyway, if the WG concludes that taking mu is preferred than HashML-DSA, then I can live with it. In a sense it solves my problem. But I will try to make arguments against it. \r\n\r\nWe also need to confirm that NIST will certify external mu SigGen and SigVer because that broke with ECDSA SigVer recently. ",
          "createdAt": "2024-11-06T04:46:10Z",
          "updatedAt": "2024-11-06T04:46:34Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "> We also need to confirm that NIST will certify external mu SigGen and SigVer because that broke with ECDSA SigVer recently.\r\n\r\nDang confirmed, pointing to the comment on line 6 of algorithm 7. Deb confirmed too for CNSA 2.\r\n\r\n",
          "createdAt": "2024-11-06T08:17:08Z",
          "updatedAt": "2024-11-06T08:17:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6QAwpK",
          "commit": {
            "abbreviatedOid": "52c7881"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-05T16:21:25Z",
          "updatedAt": "2024-11-05T16:21:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6Qkcvl",
          "commit": {
            "abbreviatedOid": "52c7881"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-09T16:37:35Z",
          "updatedAt": "2024-11-09T16:37:35Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Nit. Maybe use function instead of module. I would refrain from using the word module. We don't need FIPS nomenclature in this doc. We just explain this can be done. If both modules will be FIPS or one, or none, we don't really care in this spec.  ",
              "createdAt": "2024-11-09T16:37:35Z",
              "updatedAt": "2024-11-09T16:37:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 48,
      "id": "PR_kwDOIEpj4c6BZPnT",
      "title": "Adding ExternalMu-ML-DSA",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/48",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adds the real pre-hash mode and forbids the FIPS 204 HashML-DSA section 5.4 mode.",
      "createdAt": "2024-11-09T10:48:30Z",
      "updatedAt": "2024-11-14T12:52:33Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "3c97682adaf7626777066823f7792c8510595072",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "mikeo_externalmu",
      "headRefOid": "62acac2b3a5cb07326c16947982113544b351ce1",
      "closedAt": "2024-11-14T12:31:03Z",
      "mergedAt": "2024-11-14T12:31:03Z",
      "mergedBy": "bwesterb",
      "mergeCommit": {
        "oid": "c9825b274212d73e61fb0c821ef159fbe206f5a9"
      },
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for this. Left some nits. Please rebase on https://github.com/lamps-wg/dilithium-certificates/pull/47/files",
          "createdAt": "2024-11-09T14:32:12Z",
          "updatedAt": "2024-11-09T14:32:12Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you all for the quick review! I have incorporated all feedback, including rebasing on top of #47 \r\n\r\n@bwesterb I think this is ready to merge. I'll let you press the big green button.",
          "createdAt": "2024-11-13T16:34:03Z",
          "updatedAt": "2024-11-13T16:34:03Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Great. I'll probably merge first thing tomorrow.\r\n@seanturner, please have a look. ",
          "createdAt": "2024-11-13T16:39:52Z",
          "updatedAt": "2024-11-13T16:39:52Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed a spec bug (tr is not part of the public key), and some editing: https://github.com/lamps-wg/dilithium-certificates/pull/50",
          "createdAt": "2024-11-14T12:52:30Z",
          "updatedAt": "2024-11-14T12:52:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6Qj04m",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "frumioj",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Editorial comments from quick review of commit - thanks for doing the work!",
          "createdAt": "2024-11-09T13:00:33Z",
          "updatedAt": "2024-11-09T13:10:54Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "\"are to be\" -> \"may\" or even \"MAY\"?",
              "createdAt": "2024-11-09T13:00:33Z",
              "updatedAt": "2024-11-09T13:10:54Z"
            },
            {
              "originalPosition": 13,
              "body": "MUST NOT \"be be\" -> MUST NOT \"be\"",
              "createdAt": "2024-11-09T13:01:12Z",
              "updatedAt": "2024-11-09T13:10:54Z"
            },
            {
              "originalPosition": 15,
              "body": "More specific references than 'Algorithm 2' and 'Algorithm 7'? e.g.\r\n\r\n[Algorithm 2](https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.204.pdf#algorithm.2) ML-DSA.Sign(\ud835\udc60\ud835\udc58, \ud835\udc40, \ud835\udc50\ud835\udc61\ud835\udc65) and [Algorithm7](https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.204.pdf#algorithm.7) ML-DSA.Sign_internal(\ud835\udc60\ud835\udc58, \ud835\udc40 \u2032, \ud835\udc5f\ud835\udc5b\ud835\udc51)  in [FIPS204] \r\n\r\n(or similar)",
              "createdAt": "2024-11-09T13:08:32Z",
              "updatedAt": "2024-11-09T13:10:54Z"
            },
            {
              "originalPosition": 17,
              "body": "\"are to be} -> \"may\" or \"MAY\"?",
              "createdAt": "2024-11-09T13:09:04Z",
              "updatedAt": "2024-11-09T13:10:54Z"
            },
            {
              "originalPosition": 11,
              "body": "\"produces signatures values\" -> \"produces signature values\"",
              "createdAt": "2024-11-09T13:10:22Z",
              "updatedAt": "2024-11-09T13:10:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6QkOXb",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-09T14:29:46Z",
          "updatedAt": "2024-11-09T14:29:46Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "\"signature mode\" is a bit confusing. Maybe \"flow\"?",
              "createdAt": "2024-11-09T14:29:46Z",
              "updatedAt": "2024-11-09T14:29:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6QkOfB",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-09T14:30:36Z",
          "updatedAt": "2024-11-09T14:30:37Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Technically the procedures are not modified.",
              "createdAt": "2024-11-09T14:30:36Z",
              "updatedAt": "2024-11-09T14:30:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6QkOlx",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-09T14:31:08Z",
          "updatedAt": "2024-11-09T14:31:08Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "There could be two modules. Signing is spread over two modules.",
              "createdAt": "2024-11-09T14:31:08Z",
              "updatedAt": "2024-11-09T14:31:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6QkcyN",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-09T16:39:05Z",
          "updatedAt": "2024-11-09T16:39:06Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Nit. \r\n> compliant with [FIPS204]\r\n\r\nNo need for FIPS nomenclature. Say \r\n\r\n> specified by [FIPS204]",
              "createdAt": "2024-11-09T16:39:05Z",
              "updatedAt": "2024-11-09T16:39:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Qk9rk",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "darrentjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-10T00:21:55Z",
          "updatedAt": "2024-11-10T00:21:55Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Should there be a check to ensure mu is a 64-byte value or did you intentionally leave that out because you don't want to restrict that?",
              "createdAt": "2024-11-10T00:21:55Z",
              "updatedAt": "2024-11-10T00:21:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Qk9vr",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "darrentjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-10T00:24:42Z",
          "updatedAt": "2024-11-10T00:24:42Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "You say that you present ExternalMu-ML-DSA, and that ExternalMu-ML-DSA really produce signatures that are indistinguishable from signatures produced by ML-DSA.Sign(). Before I go off on a tangent for no reason, are you referring to the function ExternalMu-ML-DSA defined below? or the combination of the two functions defined below?\r\nIf the former, then I disagree.  as ML-DSA.Sign() defines specific encoding of the message M but ExternalMu-ML-DSA simply takes a byte array called mu and processes it.\r\nBut if you mean the latter, then it makes sense.",
              "createdAt": "2024-11-10T00:24:42Z",
              "updatedAt": "2024-11-10T00:30:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6QvkHX",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-12T00:59:02Z",
          "updatedAt": "2024-11-12T00:59:02Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n# Pre-hashed mode (ExternalMu-ML-DSA)\r\n```",
              "createdAt": "2024-11-12T00:59:02Z",
              "updatedAt": "2024-11-12T00:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6RD56o",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-13T16:08:25Z",
          "updatedAt": "2024-11-13T16:08:26Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Fair point. Tricky. What exactly does \"MAY\" mean here? Does that mean \"This RFC allows you to __\", or \"FIPS allows you to ___\"?\r\n\r\nI think I'll just change it to \"Internal operations:\" and remove the back half of the sentence.",
              "createdAt": "2024-11-13T16:08:26Z",
              "updatedAt": "2024-11-13T16:08:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6RD7Cl",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-13T16:09:46Z",
          "updatedAt": "2024-11-13T16:09:46Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Yeah, I mean this entire flow. I'll re-phrase that.",
              "createdAt": "2024-11-13T16:09:46Z",
              "updatedAt": "2024-11-13T16:09:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6RD_s2",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-13T16:16:23Z",
          "updatedAt": "2024-11-13T16:16:24Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Agreed. I used the word \"alternate versions of\" above, and then removed this sentence.",
              "createdAt": "2024-11-13T16:16:24Z",
              "updatedAt": "2024-11-13T16:16:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6REATY",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-13T16:17:22Z",
          "updatedAt": "2024-11-13T16:17:22Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Agreed. The concept of \"a cryptographic module\" is a bit fuzzy here. I removed this sentence.",
              "createdAt": "2024-11-13T16:17:22Z",
              "updatedAt": "2024-11-13T16:17:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6REDOg",
          "commit": {
            "abbreviatedOid": "919472c"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-13T16:22:02Z",
          "updatedAt": "2024-11-13T16:22:03Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Good suggestion!\r\nIf it's not 64 bytes, then your pre-hash step is messed up, but it's a check that we can do here, so might as well.",
              "createdAt": "2024-11-13T16:22:03Z",
              "updatedAt": "2024-11-13T16:22:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOIEpj4c6BjoU2",
      "title": "fix ASN.1 decoding after OID fix",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/49",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the PR #36 fixed the binary files, but it didn't fix the ASN.1 decoding (also the ML-DSA-87 public key still had the last element of the OID wrong)",
      "createdAt": "2024-11-11T20:58:59Z",
      "updatedAt": "2024-11-14T13:52:09Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "3c97682adaf7626777066823f7792c8510595072",
      "headRepository": "tomato42/dilithium-certificates",
      "headRefName": "ans.1-dec-fix",
      "headRefOid": "01746fe415be30782fc757a9e07013ffd3acdb0c",
      "closedAt": "2024-11-14T12:52:50Z",
      "mergedAt": "2024-11-14T12:52:50Z",
      "mergedBy": "bwesterb",
      "mergeCommit": {
        "oid": "fae1038b28cab107741f80cff3cbf93eaca34f56"
      },
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for this. @seanturner could you check? We should really just automate this.",
          "createdAt": "2024-11-13T10:58:57Z",
          "updatedAt": "2024-11-13T10:58:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 50,
      "id": "PR_kwDOIEpj4c6B6u8v",
      "title": "Tighten up prehash section and fix spec bug",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/50",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-14T12:50:46Z",
      "updatedAt": "2024-12-04T11:23:12Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "c9825b274212d73e61fb0c821ef159fbe206f5a9",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "bas/tighten-prehash",
      "headRefOid": "14db0c74ed743a9567490eaab100c60db675a970",
      "closedAt": "2024-12-04T11:08:53Z",
      "mergedAt": "2024-12-04T11:08:53Z",
      "mergedBy": "bwesterb",
      "mergeCommit": {
        "oid": "5d7e57e104a21566d26ab5e95a276d4afa5dd70f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6RZddU",
          "commit": {
            "abbreviatedOid": "14db0c7"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-15T18:37:47Z",
          "updatedAt": "2024-11-15T18:37:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6SCG91",
          "commit": {
            "abbreviatedOid": "14db0c7"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "PR is an improvement. Could be merged as-is, but I left some suggestions.",
          "createdAt": "2024-11-21T01:18:21Z",
          "updatedAt": "2024-11-21T01:25:15Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "CRLs do tend to be large (up to 1 mb), but very rarely would you sign a lot of them at the same time. Typically a CA will only issue 1 CRL per day. That's why I also had the example of issuing a large number of certificates containing large public keys.",
              "createdAt": "2024-11-21T01:18:21Z",
              "updatedAt": "2024-11-21T01:25:15Z"
            },
            {
              "originalPosition": 46,
              "body": "Suggest:\r\n\r\nTogether these are functionally equivalent to `ML-DSA.Sign()` from [FIPS204] in that they create exactly the same signatures as regular pure ML-DSA, which can be verified by the regular `ML-DSA.Verify()`. ",
              "createdAt": "2024-11-21T01:23:17Z",
              "updatedAt": "2024-11-21T01:25:15Z"
            },
            {
              "originalPosition": 58,
              "body": "Suggest:\r\n\r\n... public keys identified by these OIDs MUST NOT be used within X.509 certificates, and the signature algorithms identified by these OIDs MUST NOT be used within X.509 and related PKIX protocols.",
              "createdAt": "2024-11-21T01:24:18Z",
              "updatedAt": "2024-11-21T01:25:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6TtdPC",
          "commit": {
            "abbreviatedOid": "14db0c7"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T11:07:01Z",
          "updatedAt": "2024-12-04T11:07:02Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Will tweak in separate PR.",
              "createdAt": "2024-12-04T11:07:02Z",
              "updatedAt": "2024-12-04T11:07:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Ttd9Z",
          "commit": {
            "abbreviatedOid": "14db0c7"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T11:07:34Z",
          "updatedAt": "2024-12-04T11:07:34Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Will tweak in separate PR.",
              "createdAt": "2024-12-04T11:07:34Z",
              "updatedAt": "2024-12-04T11:07:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Ttfpb",
          "commit": {
            "abbreviatedOid": "14db0c7"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T11:08:41Z",
          "updatedAt": "2024-12-04T11:08:41Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Will tweak in separate PR.",
              "createdAt": "2024-12-04T11:08:41Z",
              "updatedAt": "2024-12-04T11:08:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Ttp6T",
          "commit": {
            "abbreviatedOid": "14db0c7"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T11:23:12Z",
          "updatedAt": "2024-12-04T11:23:12Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "https://github.com/lamps-wg/dilithium-certificates/pull/55",
              "createdAt": "2024-12-04T11:23:12Z",
              "updatedAt": "2024-12-04T11:23:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 51,
      "id": "PR_kwDOIEpj4c6B6-_M",
      "title": "Add example certificate and autogenerate pretty versions",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/51",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-14T13:24:08Z",
      "updatedAt": "2024-12-04T11:09:21Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "fae1038b28cab107741f80cff3cbf93eaca34f56",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "bas/crt-and-autopretty",
      "headRefOid": "59f2a70df3be2e0977b5e117234820d8df9fba65",
      "closedAt": "2024-12-04T11:09:21Z",
      "mergedAt": "2024-12-04T11:09:21Z",
      "mergedBy": "bwesterb",
      "mergeCommit": {
        "oid": "50fddc7fa3811139ad8feceb16fcd48e41f56bd3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6RZbjs",
          "commit": {
            "abbreviatedOid": "59f2a70"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-15T18:32:26Z",
          "updatedAt": "2024-11-15T18:36:59Z",
          "comments": [
            {
              "originalPosition": 111,
              "body": "There seems to be a compatibility issue here with `der2ascii`:\r\n```\r\nSyntax error: line 111: encoding/hex: invalid byte: U+000A\r\n```",
              "createdAt": "2024-11-15T18:32:26Z",
              "updatedAt": "2024-11-15T18:36:59Z"
            },
            {
              "originalPosition": 1,
              "body": "Was able to successfully generate this cert from PEM, extract the public key, and verify in AWS-LC. See `kMLDSA65Cert` in the gtest `TestMLDSA65`.\r\n\r\nAdded to AWS-LC:\r\n\r\nhttps://github.com/aws/aws-lc/pull/1963/commits/c71bbac49160038ba8262b9f1996b43e197410ba#diff-e8a50b868e2b0f2f27afa3c9b1fbc844dce0cac6883ea9615882149e16eb4e35 ",
              "createdAt": "2024-11-15T18:36:48Z",
              "updatedAt": "2024-11-15T18:36:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Rf1Wl",
          "commit": {
            "abbreviatedOid": "59f2a70"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-17T14:15:11Z",
          "updatedAt": "2024-11-17T14:15:11Z",
          "comments": [
            {
              "originalPosition": 111,
              "body": "It's because the long lines are wrapped using `fold`. Check out `examples/pretty`.",
              "createdAt": "2024-11-17T14:15:11Z",
              "updatedAt": "2024-11-17T14:15:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6TtgXH",
          "commit": {
            "abbreviatedOid": "59f2a70"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T11:09:14Z",
          "updatedAt": "2024-12-04T11:09:15Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Great, thanks for testing!",
              "createdAt": "2024-12-04T11:09:14Z",
              "updatedAt": "2024-12-04T11:09:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOIEpj4c6CBNgu",
      "title": "Preempt comment from Deb on repetitive text",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/52",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-15T08:47:45Z",
      "updatedAt": "2024-11-15T13:07:19Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "fae1038b28cab107741f80cff3cbf93eaca34f56",
      "headRepository": "danvangeest/dilithium-certificates",
      "headRefName": "dvg/preempt_Deb_comment",
      "headRefOid": "cbc68878845cfd6a3de1eb88e36e4c5e5828741d",
      "closedAt": "2024-11-15T13:07:19Z",
      "mergedAt": "2024-11-15T13:07:19Z",
      "mergedBy": "bwesterb",
      "mergeCommit": {
        "oid": "5683122a16aa7c60b6ecd5baff76ead58342b86b"
      },
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "With this change, it suggests that we define that type here instead of citing the definition.",
          "createdAt": "2024-11-15T10:39:50Z",
          "updatedAt": "2024-11-15T10:39:50Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Line 191 says \"NOTE: The above syntax is from {{!RFC5912}}...\" although that is still not explicit without following the reference.\r\n\r\nLine 191 could be changed to \"... The above definition if from...\", or line 179 could be changed to \"The AlgorithmIdentifier type is defined in {{!RFC5912}} as follows:\"",
          "createdAt": "2024-11-15T12:24:41Z",
          "updatedAt": "2024-11-15T12:24:41Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Perfect.",
          "createdAt": "2024-11-15T12:53:49Z",
          "updatedAt": "2024-11-15T12:53:49Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Perfect.\r\n\r\nYou didn't express a preference for either of the options I proposed so I picked one :)",
          "createdAt": "2024-11-15T12:57:05Z",
          "updatedAt": "2024-11-15T12:57:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6RWJJZ",
          "commit": {
            "abbreviatedOid": "ff02d53"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-15T12:56:34Z",
          "updatedAt": "2024-11-15T12:56:34Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThe AlgorithmIdentifier type is defined in {{!RFC5912}} as follows:\r\n```",
              "createdAt": "2024-11-15T12:56:34Z",
              "updatedAt": "2024-11-15T12:56:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOIEpj4c6C2hTT",
      "title": "More discussion of ExternalMu",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/54",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I added some more implementation and security considerations as well as the rationale for disallowing HashML-DSA, which I feel needs to be stated clearly (this comes from recent IETF and pqc-forum mail list discussions).",
      "createdAt": "2024-11-22T18:02:54Z",
      "updatedAt": "2025-01-14T14:45:02Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "5683122a16aa7c60b6ecd5baff76ead58342b86b",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "ounsworth-more-externalmu",
      "headRefOid": "b09d19ba8b5de4c8590d8b2890e66e9d5643b240",
      "closedAt": "2025-01-14T14:45:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See #65.",
          "createdAt": "2024-12-18T15:34:24Z",
          "updatedAt": "2024-12-18T15:34:24Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It looks like we are going to focus on #65; see #65.",
          "createdAt": "2025-01-07T13:09:12Z",
          "updatedAt": "2025-01-07T13:09:12Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ounsworth you okay with me closing this one out?",
          "createdAt": "2025-01-08T19:11:24Z",
          "updatedAt": "2025-01-08T19:11:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6SXR34",
          "commit": {
            "abbreviatedOid": "aff485b"
          },
          "author": "johngray-dev",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-22T20:27:26Z",
          "updatedAt": "2024-11-22T20:27:27Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "typo..   `ExternalMu-ML-DSA.Prahash()'  should be prehash.\r\n\r\nHow does HashML-DSA equally violate the security assumption?   It doesn't require the public key, only a Hash algorithm.",
              "createdAt": "2024-11-22T20:27:26Z",
              "updatedAt": "2024-11-22T20:27:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6SXSl4",
          "commit": {
            "abbreviatedOid": "aff485b"
          },
          "author": "johngray-dev",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-22T20:29:22Z",
          "updatedAt": "2024-11-22T20:29:22Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Great comment!",
              "createdAt": "2024-11-22T20:29:22Z",
              "updatedAt": "2024-11-22T20:29:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6S8wwv",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "johngray-dev",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-27T15:45:15Z",
          "updatedAt": "2024-11-27T15:45:15Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "ExternalMu-DL-DSA.Prehash()  - typo\r\n\r\n- language typos... Check over.",
              "createdAt": "2024-11-27T15:45:15Z",
              "updatedAt": "2024-11-27T15:45:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6TmJSI",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-03T16:44:34Z",
          "updatedAt": "2024-12-03T17:11:26Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I think the entire ExternalMu-ML-DSA section should be an appendix rather than a core part of the document.\r\n\r\nIn fact, I think the entire ExternalMu-ML-DSA section shouldn't contain any normative language.  It is an implementation detail which does not affect interoperability.  It's not even a \"mode\" of signing, it IS pure ML-DSA.Sign, just split across two functions.\r\n\r\nThe point of the ExternalMu-ML-DSA section should be \"If you want to perform the hashing step locally and send a digest to an HSM, FIPS 204 allows you to do that and here's explicitly how it can be done.\"",
              "createdAt": "2024-12-03T16:44:34Z",
              "updatedAt": "2024-12-03T17:11:26Z"
            },
            {
              "originalPosition": 15,
              "body": "I strongly disagree with \"Implementations are RECOMMENDED to expose interfaces for both ML-DSA and ExternalMu-ML-DSA so that applications blah blah blah\".  ExternalMu-ML-DSA is only needed if you need to send the message representative to an HSM/smartcard/non-local-whatever.  If you're writing an implementation for an HSM/smartcard/non-local-whatever then sure, implement ExternalMu-ML-DSA, but you shouldn't even need to expose ExternalMu-ML-DSA to the application, that's only something that your HSM/smartcard/non-local-whatever driver needs to know about.",
              "createdAt": "2024-12-03T17:11:20Z",
              "updatedAt": "2024-12-03T17:11:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Vp3LM",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T04:39:30Z",
          "updatedAt": "2024-12-18T04:39:30Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I agree. I suggest to remove the normative language here. Good to point out that the entity that does the prehashing and requests for the signature has the public key beforehand\r\n\r\n> ExternalMu-ML-DSA requires the public key, or its prehash, as input to the pre-digesting function. This assumes the signer generating the pre-hash is in possession of the public key before signing and is different from conventional pre-hashing which only requires the message and the hash function as input and .\r\n\r\n",
              "createdAt": "2024-12-18T04:39:30Z",
              "updatedAt": "2024-12-18T04:39:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Vp4IL",
          "commit": {
            "abbreviatedOid": "aff485b"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T04:42:25Z",
          "updatedAt": "2024-12-18T04:42:25Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I find this a little verbose and a little alarmist. The collision resistance of SHA-2 or SHAKE256 is fine. I think there is value in pointing out that HashML-DSA is a different signature than PureML-DSA which is not ideal. But ExternalMuML-DSA generates the same signature as Pure ML-DSA (same OID too), thus why we picked it. ",
              "createdAt": "2024-12-18T04:42:25Z",
              "updatedAt": "2024-12-18T04:42:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Vp5-y",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T04:49:53Z",
          "updatedAt": "2024-12-18T04:49:53Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I agree. \r\n\r\nThe way the ExternalMu-ML-DSA section looks right now may create misconceptions that we are defining a tweak on ML-DSA, but we are just saying \"get the mu from outside of the signature\". ",
              "createdAt": "2024-12-18T04:49:53Z",
              "updatedAt": "2024-12-18T04:49:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VufvZ",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T14:24:57Z",
          "updatedAt": "2024-12-18T14:24:58Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@ounsworth which document is {{sec-disallow-hash}} in?",
              "createdAt": "2024-12-18T14:24:58Z",
              "updatedAt": "2024-12-18T14:24:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VuhPt",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T14:27:14Z",
          "updatedAt": "2024-12-18T14:27:14Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "@johngray-dev Did you confirm there was a typo?",
              "createdAt": "2024-12-18T14:27:14Z",
              "updatedAt": "2024-12-18T14:27:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VujRO",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T14:30:21Z",
          "updatedAt": "2024-12-18T14:30:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Never mind it's lower down.",
              "createdAt": "2024-12-18T14:30:21Z",
              "updatedAt": "2024-12-18T14:30:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Vu5Bq",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T15:03:26Z",
          "updatedAt": "2024-12-18T15:03:26Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I think this is getting resolved via Panos' re-write.",
              "createdAt": "2024-12-18T15:03:26Z",
              "updatedAt": "2024-12-18T15:03:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Vvczz",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "russhousley",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T15:56:23Z",
          "updatedAt": "2024-12-18T15:56:23Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I see no reason for this document to get into the API discussion.  Just drop the text altogether about \"... Implementations are RECOMMENDED to expose interfaces ...\"",
              "createdAt": "2024-12-18T15:56:23Z",
              "updatedAt": "2024-12-18T15:56:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VveqZ",
          "commit": {
            "abbreviatedOid": "b09d19b"
          },
          "author": "russhousley",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T15:59:15Z",
          "updatedAt": "2024-12-18T15:59:16Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Whether the hash is computed internal to the ML-DSA or external is not important for interoperability.  The signature comes out the same.  So, I am not sure this deserves any discussion.",
              "createdAt": "2024-12-18T15:59:15Z",
              "updatedAt": "2024-12-18T15:59:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOIEpj4c6EBYTT",
      "title": "Suggestions by Mike on PR #50",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/55",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-04T11:23:04Z",
      "updatedAt": "2024-12-11T13:40:42Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "50fddc7fa3811139ad8feceb16fcd48e41f56bd3",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "bas/mike",
      "headRefOid": "6c99cca9fb099358e92fbfd9ad2a5a2f0c239ff4",
      "closedAt": "2024-12-11T13:40:42Z",
      "mergedAt": "2024-12-11T13:40:42Z",
      "mergedBy": "bwesterb",
      "mergeCommit": {
        "oid": "21cb170f24b8b066e47a685416caaa35f96bd855"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6TxShU",
          "commit": {
            "abbreviatedOid": "e74f1c5"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T15:51:11Z",
          "updatedAt": "2024-12-04T15:51:11Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nExamples in [RFC5280] are certificate and certificate revocation list\r\n```",
              "createdAt": "2024-12-04T15:51:11Z",
              "updatedAt": "2024-12-04T15:51:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6TxTBS",
          "commit": {
            "abbreviatedOid": "e74f1c5"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T15:51:57Z",
          "updatedAt": "2024-12-04T15:51:57Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nfollowed by `ExternalMu-ML-DSA.Sign()`. Together these are functionally\r\nequivalent to `ML-DSA.Sign()` from [FIPS204] in that they create\r\nexactly the same signatures as regular pure ML-DSA, which can be\r\nverified by the unmodified `ML-DSA.Verify()`.\r\n```",
              "createdAt": "2024-12-04T15:51:57Z",
              "updatedAt": "2024-12-04T15:51:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOIEpj4c6EJc2h",
      "title": "Fix nits",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/56",
      "state": "MERGED",
      "author": "loganaden",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "varius -> various",
      "createdAt": "2024-12-05T08:38:51Z",
      "updatedAt": "2024-12-05T16:54:15Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "50fddc7fa3811139ad8feceb16fcd48e41f56bd3",
      "headRepository": "cyberstormdotmu/dilithium-certificates",
      "headRefName": "main",
      "headRefOid": "aef6a41b610d4d73acf0a12b01f3c2ade3be4bdb",
      "closedAt": "2024-12-05T09:27:54Z",
      "mergedAt": "2024-12-05T09:27:54Z",
      "mergedBy": "bwesterb",
      "mergeCommit": {
        "oid": "21b18a015893eaf1e9fcf605158685f8ad9ae50a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6T9WgD",
          "commit": {
            "abbreviatedOid": "aef6a41"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Looks good. ",
          "createdAt": "2024-12-05T16:54:15Z",
          "updatedAt": "2024-12-05T16:54:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOIEpj4c6E80uA",
      "title": "Ref update",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/57",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Now refer to I-D.lamps-cms-ml-dsa.",
      "createdAt": "2024-12-12T03:22:25Z",
      "updatedAt": "2025-01-22T21:05:29Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "21cb170f24b8b066e47a685416caaa35f96bd855",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-ref-update",
      "headRefOid": "60b97e1413a294803342bb1a4a601db961f0c250",
      "closedAt": "2024-12-12T14:28:20Z",
      "mergedAt": "2024-12-12T14:28:20Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "e41816f2a5858fde8da71c9fd3daa4aad127a568"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good catch about the module!",
          "createdAt": "2024-12-12T14:26:47Z",
          "updatedAt": "2024-12-12T14:26:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6U9K7E",
          "commit": {
            "abbreviatedOid": "61892b2"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Please update the reference in the ASN.1 module as well.",
          "createdAt": "2024-12-12T11:24:58Z",
          "updatedAt": "2024-12-12T11:26:53Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n{{!I-D.ietf-lamps-cms-ml-dsa}}.\r\n```",
              "createdAt": "2024-12-12T11:24:58Z",
              "updatedAt": "2024-12-12T11:26:53Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nRFC EDITOR: Please replace TBD2 with the value assigned by IANA during the publication of {{I-D.ietf-lamps-cms-ml-dsa}}. Also please replace {{I-D.ietf-lamps-cms-ml-dsa}} in the module with a reference to the published RFC.\r\n```",
              "createdAt": "2024-12-12T11:25:13Z",
              "updatedAt": "2024-12-12T11:26:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6U9kYC",
          "commit": {
            "abbreviatedOid": "76c7723"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-12T11:51:52Z",
          "updatedAt": "2024-12-12T11:51:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6VACTC",
          "commit": {
            "abbreviatedOid": "cbbbf16"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-12T14:27:22Z",
          "updatedAt": "2024-12-12T14:27:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  FROM ML-DSA-Module-2024 -- From [I-D.ietf-lamps-cms-ml-dsa]\r\n```",
              "createdAt": "2024-12-12T14:27:22Z",
              "updatedAt": "2024-12-12T14:27:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 58,
      "id": "PR_kwDOIEpj4c6E9ADy",
      "title": "Refer to public key examples",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/58",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Refer to public key examples from public key section.",
      "createdAt": "2024-12-12T03:51:15Z",
      "updatedAt": "2025-01-22T21:05:27Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "21cb170f24b8b066e47a685416caaa35f96bd855",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-pub-examples",
      "headRefOid": "bef862f29bc1f37cc5061bb0b868004fae23d5da",
      "closedAt": "2024-12-12T14:28:42Z",
      "mergedAt": "2024-12-12T14:28:42Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "e4838fc7ac7a3d76113b3a1d3e6289301ab7e4fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6U-OWF",
          "commit": {
            "abbreviatedOid": "bef862f"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-12T12:33:49Z",
          "updatedAt": "2024-12-12T12:33:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "PR_kwDOIEpj4c6FBtwS",
      "title": "Remove two TODOs",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/60",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-12T14:22:02Z",
      "updatedAt": "2024-12-12T14:29:14Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "21cb170f24b8b066e47a685416caaa35f96bd855",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "bas/ednotes",
      "headRefOid": "8d38509e6fdc4f6a3b7e314255fc90a258b40eb0",
      "closedAt": "2024-12-12T14:29:14Z",
      "mergedAt": "2024-12-12T14:29:14Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "be15c1424f3a7ce9bfbc9fbcb27a04514ed0d43c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6VADbx",
          "commit": {
            "abbreviatedOid": "8d38509"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-12T14:29:07Z",
          "updatedAt": "2024-12-12T14:29:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOIEpj4c6FB0C0",
      "title": "Clarify meaning of sizes in table",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/61",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Cf #1\r\nCC @csosto-pk",
      "createdAt": "2024-12-12T14:33:39Z",
      "updatedAt": "2024-12-17T15:29:36Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "be15c1424f3a7ce9bfbc9fbcb27a04514ed0d43c",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "bas/issue-1",
      "headRefOid": "136ca93f3e74cf0fa459824a3698a8b9aad6eddb",
      "closedAt": "2024-12-17T15:29:36Z",
      "mergedAt": "2024-12-17T15:29:36Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "f2cf5050c35c9fbaa3aec5a5d56716358d67f2f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6VA42_",
          "commit": {
            "abbreviatedOid": "136ca93"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-12T15:38:03Z",
          "updatedAt": "2024-12-12T15:38:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOIEpj4c6FCQxk",
      "title": "Allow for HashML-DSA only in the pub key of EE certs and define ctx",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/62",
      "state": "MERGED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- ctx = empty string\r\n- Prescribe PureML-DSA OIDS only except for the public key of EE certs which could be used beyond PKIX for use-cases we are not aware of. ",
      "createdAt": "2024-12-12T15:23:29Z",
      "updatedAt": "2024-12-17T15:36:16Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "be15c1424f3a7ce9bfbc9fbcb27a04514ed0d43c",
      "headRepository": "csosto-pk/dilithium-certificates",
      "headRefName": "patch-2",
      "headRefOid": "8cd7f3488789d32d58385b764c63469e007bf456",
      "closedAt": "2024-12-17T15:36:16Z",
      "mergedAt": "2024-12-17T15:36:16Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "4fedd86baba4ff20981bce474b436e418e3e280e"
      },
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "This sets the context string to the empty string for all use cases. That's too broad. We should only dictate that in the case the key is used to sign a certificate, CRL, etc.",
          "createdAt": "2024-12-12T15:48:51Z",
          "updatedAt": "2024-12-12T15:48:51Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> This sets the context string to the empty string for all use cases. That's too broad. We should only dictate that in the case the key is used to sign a certificate, CRL, etc.\r\n\r\n@bwesterb , check again please. I made a slight change in another `MUST NOT` also. ",
          "createdAt": "2024-12-12T16:00:03Z",
          "updatedAt": "2024-12-12T16:00:03Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me!",
          "createdAt": "2024-12-12T18:12:07Z",
          "updatedAt": "2024-12-12T18:12:07Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The proposed normative change on use of prehashing OIDs in EE certs should at least be highlighted in the title/description of the PR, and preferably mentioned on the list.\r\n\r\nDone",
          "createdAt": "2024-12-13T16:48:08Z",
          "updatedAt": "2024-12-13T16:48:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6VBGvR",
          "commit": {
            "abbreviatedOid": "122cca1"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-12T15:58:55Z",
          "updatedAt": "2024-12-12T15:58:56Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Empty string only for PKIX stuff, not everything. ",
              "createdAt": "2024-12-12T15:58:55Z",
              "updatedAt": "2024-12-12T15:58:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VBG5N",
          "commit": {
            "abbreviatedOid": "122cca1"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-12T15:59:10Z",
          "updatedAt": "2024-12-12T15:59:11Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I am not married to it. We could remove it.\r\n\r\nThe point here is that the PK in the leaf cert may be used for Secure Boot or any other use-case we are not aware of. HashML-DSA could be used there. Certs have many uses we are not aware of.",
              "createdAt": "2024-12-12T15:59:10Z",
              "updatedAt": "2024-12-12T15:59:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VBIBV",
          "commit": {
            "abbreviatedOid": "122cca1"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-12T16:01:00Z",
          "updatedAt": "2024-12-12T16:01:00Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "These two lines should not be modified as these comments are still useful in case we want to do \"prehashing\" in a use case where context string is allowed.",
              "createdAt": "2024-12-12T16:01:00Z",
              "updatedAt": "2024-12-12T16:01:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VBu4u",
          "commit": {
            "abbreviatedOid": "122cca1"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-12T16:58:25Z",
          "updatedAt": "2024-12-12T16:58:26Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Done",
              "createdAt": "2024-12-12T16:58:25Z",
              "updatedAt": "2024-12-12T16:58:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VB1Ri",
          "commit": {
            "abbreviatedOid": "8110287"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-12T17:06:41Z",
          "updatedAt": "2024-12-12T17:06:41Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "There's a trailing whitespace at the end of line 435 that the linter is not happy with!",
              "createdAt": "2024-12-12T17:06:41Z",
              "updatedAt": "2024-12-12T17:06:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VCeP5",
          "commit": {
            "abbreviatedOid": "122cca1"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-12T18:12:03Z",
          "updatedAt": "2024-12-12T18:12:03Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Fixed.",
              "createdAt": "2024-12-12T18:12:03Z",
              "updatedAt": "2024-12-12T18:12:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VH7vo",
          "commit": {
            "abbreviatedOid": "a283ef1"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-13T09:57:12Z",
          "updatedAt": "2024-12-13T09:57:13Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I'd leave it at\r\n\r\n> [...] Public Key in end-entity X.509 certificates, which has use beyond PKIX.",
              "createdAt": "2024-12-13T09:57:13Z",
              "updatedAt": "2024-12-13T09:57:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VH8ml",
          "commit": {
            "abbreviatedOid": "a283ef1"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "The proposed normative change on use of prehashing OIDs in EE certs should at least be highlighted in the title/description of the PR, and preferably mentioned on the list.",
          "createdAt": "2024-12-13T09:58:54Z",
          "updatedAt": "2024-12-13T09:58:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6VLGxP",
          "commit": {
            "abbreviatedOid": "a283ef1"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-13T16:47:54Z",
          "updatedAt": "2024-12-13T16:47:54Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Done",
              "createdAt": "2024-12-13T16:47:54Z",
              "updatedAt": "2024-12-13T16:47:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Vj5iT",
          "commit": {
            "abbreviatedOid": "faaa288"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T15:32:02Z",
          "updatedAt": "2024-12-17T15:32:03Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n(X.509 certificates, CRLs) is the empty string.\r\n```",
              "createdAt": "2024-12-17T15:32:02Z",
              "updatedAt": "2024-12-17T15:32:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Vj7ia",
          "commit": {
            "abbreviatedOid": "3577bf7"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-17T15:35:07Z",
          "updatedAt": "2024-12-17T15:35:07Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nabsent. The ctx value used in the ML-DSA signing and verification\r\n{{FIPS204}} of ML-DSA signatures defined in this specification\r\n```",
              "createdAt": "2024-12-17T15:35:07Z",
              "updatedAt": "2024-12-17T15:35:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 63,
      "id": "PR_kwDOIEpj4c6FH2xS",
      "title": "Just some suggestions",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/63",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-13T09:37:39Z",
      "updatedAt": "2024-12-17T15:37:59Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "be15c1424f3a7ce9bfbc9fbcb27a04514ed0d43c",
      "headRepository": "danvangeest/dilithium-certificates",
      "headRefName": "dvg/just_some_suggestions",
      "headRefOid": "78514611d5ebcb5587ea71ca0bcd4626e888c9f4",
      "closedAt": "2024-12-17T15:37:59Z",
      "mergedAt": "2024-12-17T15:37:59Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "9fa821db54d7acda86bf616c3b9fe5e6c827634a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6VH5rt",
          "commit": {
            "abbreviatedOid": "7851461"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks.",
          "createdAt": "2024-12-13T09:53:06Z",
          "updatedAt": "2024-12-13T09:53:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 64,
      "id": "PR_kwDOIEpj4c6FgI8z",
      "title": "Import Keys",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/64",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add imports for ML-DSA-PrivateKey and ML-DSA-PublicKey.",
      "createdAt": "2024-12-17T14:28:38Z",
      "updatedAt": "2025-01-22T21:05:30Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "be15c1424f3a7ce9bfbc9fbcb27a04514ed0d43c",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-import-keys",
      "headRefOid": "db1e3ae1a87a560c1cd540c75c0298418ee43ce8",
      "closedAt": "2024-12-17T16:14:43Z",
      "mergedAt": "2024-12-17T16:14:43Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "053b6293eaa52c239259b9a2d12b73b3b9985bf8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6VjZR1",
          "commit": {
            "abbreviatedOid": "db1e3ae"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-17T14:46:47Z",
          "updatedAt": "2024-12-17T14:46:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOIEpj4c6FqlPA",
      "title": "ExternalMu Shuffle",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/65",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Moved \" Pre-hash Mode\" section to an Appendix.\r\n\r\nThere are editorial tweaks, but more importantly 2119 language is removed from the Appendix.  I want to call attention to the four (4) 2119 language changes:\r\n* reworked some of this into Security Considerations: This specification uses exclusively ExternalMu-ML-DSA for pre-hashed use cases, and thus HashML-DSA as defined in [FIPS204] and identified by `id-hash-ml-dsa-44-with-sha512`, `id-hash-ml-dsa-65-with-sha512`, and `id-hash-ml-dsa-87-with-sha512` MUST NOT be used in X.509 and related PKIX protocols.\r\n* Implementions are RECOMMENDED -> whole paragraph re-written.\r\n* An ML-DSA key and certificate [MAY->can] be used with either ML-DSA or ExternalMu-ML-DSA interchangeably.\r\n* Implementors [SHOULD->should] to pay careful attention to how the public key or its hash is delivered to the `ExternalMu-ML-DSA.Prehash()` routine, and from where they are sourcing this data.\r\n\r\nAlso, if this PR is adopted we can close #54.",
      "createdAt": "2024-12-18T15:29:48Z",
      "updatedAt": "2025-01-14T14:57:26Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "053b6293eaa52c239259b9a2d12b73b3b9985bf8",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-external_mu-shuffle",
      "headRefOid": "cdc23cddba84853e2c38c1d607764b24ec162357",
      "closedAt": "2025-01-14T14:45:01Z",
      "mergedAt": "2025-01-14T14:45:01Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "bf24775a4d62a9073d57760bd535e48c9ce91f0a"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ounsworth @bwesterb @csosto-pk PTAL",
          "createdAt": "2025-01-13T15:24:38Z",
          "updatedAt": "2025-01-13T15:24:38Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Apart from the comments I left just now, I'm ok with this change. It's still a bit wordy, but not too bad.",
          "createdAt": "2025-01-14T13:39:43Z",
          "updatedAt": "2025-01-14T13:40:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6VvMJv",
          "commit": {
            "abbreviatedOid": "34d56ff"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T15:31:38Z",
          "updatedAt": "2024-12-18T15:31:38Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "```suggestion\r\nThe HashML-DSA mode defined in Section 5.4 of {{FIPS204}} MUST NOT be\r\n```",
              "createdAt": "2024-12-18T15:31:38Z",
              "updatedAt": "2024-12-18T15:31:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VvMiX",
          "commit": {
            "abbreviatedOid": "b1089d7"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-18T15:32:14Z",
          "updatedAt": "2024-12-18T15:32:14Z",
          "comments": [
            {
              "originalPosition": 180,
              "body": "```suggestion\r\ndefined in Section 5.4 of {{FIPS204}}. This specification uses exclusively\r\n```",
              "createdAt": "2024-12-18T15:32:14Z",
              "updatedAt": "2024-12-18T15:32:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6VzXDa",
          "commit": {
            "abbreviatedOid": "ba84d8c"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Good overall, but I proposed some improvements.",
          "createdAt": "2024-12-19T04:07:43Z",
          "updatedAt": "2024-12-19T04:19:42Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "\"unlikely discovery of a collision attack ...\"",
              "createdAt": "2024-12-19T04:07:43Z",
              "updatedAt": "2024-12-19T04:19:42Z"
            },
            {
              "originalPosition": 121,
              "body": "Remove \"simple\". Finding a collision on a good hash functions should not be considered simple. ",
              "createdAt": "2024-12-19T04:08:22Z",
              "updatedAt": "2024-12-19T04:19:42Z"
            },
            {
              "originalPosition": 124,
              "body": "Remove \"therefore is a weaker signature algorithm.\" In practice it is not weaker because SHA-3 does not have collisions. Better to not be too alarmist. ",
              "createdAt": "2024-12-19T04:09:25Z",
              "updatedAt": "2024-12-19T04:19:42Z"
            },
            {
              "originalPosition": 131,
              "body": "\"cross-protocol forgery attacks in some contexts\"? \r\nThe OID and the ctx in M' are preventing those. I suggest  to remove \r\n\" which itself introduces some risk of cross-protocol forgery attacks in some contexts\"",
              "createdAt": "2024-12-19T04:10:39Z",
              "updatedAt": "2024-12-19T04:19:42Z"
            },
            {
              "originalPosition": 250,
              "body": "Remove the mention to HashML-DSA, it is covered already in the Security Considerations.",
              "createdAt": "2024-12-19T04:13:40Z",
              "updatedAt": "2024-12-19T04:19:42Z"
            },
            {
              "originalPosition": 247,
              "body": "Remove \r\n> Second, a malicious or tricked signer could potentially produce a signature which validates under a different public key, which weakens the implicit security assumptions of the ML-DSA algorithm.\r\n\r\nThis sentence sounds a little alarmist. I suggest to remove it. You can fool the signer that generates tr to use a different public key, but then you would also need to fool the rest of the signing to use a different private key. It means you control the whole signature generation which means you can do anything. \r\n\r\nThe next sentence is fine though. tr should be generated with a public key we can trust regardless of how it is to exploit it. ",
              "createdAt": "2024-12-19T04:19:22Z",
              "updatedAt": "2024-12-23T16:56:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6W2P1l",
          "commit": {
            "abbreviatedOid": "ba84d8c"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-04T23:31:56Z",
          "updatedAt": "2025-01-04T23:31:57Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "I didn't mean \"simple\" in the sense of \"easy\", but rather in the sense that it's not domain-separated by the public key.\r\n\r\nMaybe \"... since a direct hash collision `H(m1) = H(m2)` will not suffice.\" captures the idea better?",
              "createdAt": "2025-01-04T23:31:56Z",
              "updatedAt": "2025-01-04T23:31:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6W2P31",
          "commit": {
            "abbreviatedOid": "ba84d8c"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-04T23:33:45Z",
          "updatedAt": "2025-01-04T23:33:45Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "Is there a less alarmist wording that still captures the same idea?\r\n\r\nMaybe \"... and therefore weakens some of the security properties built in to the ML-DSA design\" ?",
              "createdAt": "2025-01-04T23:33:45Z",
              "updatedAt": "2025-01-04T23:33:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6W2P5C",
          "commit": {
            "abbreviatedOid": "ba84d8c"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I'm good with moving this to an appendix.\r\nI also like Panos' comments. Once those are resolved, I'm good with this being merged.",
          "createdAt": "2025-01-04T23:34:34Z",
          "updatedAt": "2025-01-04T23:48:19Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "```suggestion\r\nThe implementation reason for disallowing HashML-DSA stems from the fact\r\n```\r\n\r\ntypo",
              "createdAt": "2025-01-04T23:34:34Z",
              "updatedAt": "2025-01-04T23:48:19Z"
            },
            {
              "originalPosition": 131,
              "body": "Agreed. The 0x00 | 0x01 domain separator in M' does a good job of preventing attacks here.",
              "createdAt": "2025-01-04T23:36:13Z",
              "updatedAt": "2025-01-04T23:48:19Z"
            },
            {
              "originalPosition": 247,
              "body": "I think there's something useful to be said about allowing `tr` to be manipulated outside the crypto module that holds the private key, but I don't feel strongly enough about it to keep it in. Feel free to remove.",
              "createdAt": "2025-01-04T23:47:42Z",
              "updatedAt": "2025-01-04T23:48:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XDmN2",
          "commit": {
            "abbreviatedOid": "ba84d8c"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T13:10:48Z",
          "updatedAt": "2025-01-07T13:10:48Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "```suggestion\r\nnon-intended public key. Also, this binding means that in the unlikely\r\ndiscovery of a collision attack against SHA-3, an attacker would\r\n```",
              "createdAt": "2025-01-07T13:10:48Z",
              "updatedAt": "2025-01-07T13:10:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XDnt3",
          "commit": {
            "abbreviatedOid": "9e4a496"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T13:13:44Z",
          "updatedAt": "2025-01-07T13:13:44Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "```suggestion\r\nmessage pairs such that `H(tr || m1) = H(tr || m2)` since a direct hash\r\n```",
              "createdAt": "2025-01-07T13:13:44Z",
              "updatedAt": "2025-01-07T13:13:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XDpYc",
          "commit": {
            "abbreviatedOid": "33a755d"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T13:17:03Z",
          "updatedAt": "2025-01-07T13:17:03Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "```suggestion\r\n`HashML-DSA.Verify()`. Additionally, since\r\n```",
              "createdAt": "2025-01-07T13:17:03Z",
              "updatedAt": "2025-01-07T13:17:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XDp_d",
          "commit": {
            "abbreviatedOid": "952f9f0"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T13:18:18Z",
          "updatedAt": "2025-01-07T13:18:18Z",
          "comments": [
            {
              "originalPosition": 252,
              "body": "```suggestion\r\nthis data.\r\n```",
              "createdAt": "2025-01-07T13:18:18Z",
              "updatedAt": "2025-01-07T13:18:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XDrHZ",
          "commit": {
            "abbreviatedOid": "e26f94e"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T13:20:25Z",
          "updatedAt": "2025-01-07T13:20:25Z",
          "comments": [
            {
              "originalPosition": 246,
              "body": "```suggestion\r\nwill independently compute `tr` from the public key. Implementors should pay careful\r\n```",
              "createdAt": "2025-01-07T13:20:25Z",
              "updatedAt": "2025-01-07T13:20:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XKEcW",
          "commit": {
            "abbreviatedOid": "ba84d8c"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-08T04:54:53Z",
          "updatedAt": "2025-01-08T04:54:53Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "I am proposing the below rephrase \r\n\r\n> [...] Also, this binding means that in the **unlikely, theoretical** case of a collision attack against SHA-3, an attacker would have to perform a public-key-specific collision search in order to find message pairs such that H(tr || m1) = H(tr || m2) since a simple hash collision H(m1) = H(m2) will not suffice. HashML-DSA removes both of these enhanced security properties. ~~and therefore is a weaker signature algorithm.~~",
              "createdAt": "2025-01-08T04:54:53Z",
              "updatedAt": "2025-01-08T04:54:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XPHR1",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-08T14:37:04Z",
          "updatedAt": "2025-01-08T14:37:05Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "I think the length and order of paragraphs gives undue emphasis to the security aspect. I don't mind mentioning the difference, but it should be toned down.",
              "createdAt": "2025-01-08T14:37:05Z",
              "updatedAt": "2025-01-08T14:37:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XPIiY",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-08T14:38:50Z",
          "updatedAt": "2025-01-08T14:38:51Z",
          "comments": [
            {
              "originalPosition": 138,
              "body": "Also there is a hash that has to be specified in HashML-DSA.",
              "createdAt": "2025-01-08T14:38:51Z",
              "updatedAt": "2025-01-08T14:38:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XzOl3",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T14:28:59Z",
          "updatedAt": "2025-01-13T14:29:00Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "```suggestion\r\nThe HashML-DSA mode defined in Section 5.4 of {{FIPS204}} MUST NOT be\r\nused; in other words, public keys identified by\r\n`id-hash-ml-dsa-44-with-sha512`, `id-hash-ml-dsa-65-with-sha512`, and\r\n`id-hash-ml-dsa-87-with-sha512` MUST NOT be in X.509 certificates used for\r\nCRLs, OCSP, certificate issuance and related PKIX protocols (e.g. TLS).\r\nThe use of HashML-DSA public keys within end entity certificates is not\r\nprohibited, but conventions for doing so are outside the scope of this\r\ndocument.\r\n```",
              "createdAt": "2025-01-13T14:28:59Z",
              "updatedAt": "2025-01-13T14:50:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6XzTtc",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T14:34:56Z",
          "updatedAt": "2025-01-13T14:34:56Z",
          "comments": [
            {
              "originalPosition": 138,
              "body": "```suggestion\r\n`HashML-DSA.Verify()` along with the hash algorithm to use. Additionally, since\r\n```",
              "createdAt": "2025-01-13T14:34:56Z",
              "updatedAt": "2025-01-13T14:34:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6Xzk25",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T14:54:48Z",
          "updatedAt": "2025-01-13T14:54:48Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "```suggestion\r\nnon-intended public key. Also, this unlikely, theoretical binding means that in the unlikely\r\ndiscovery of a collision attack against SHA-3, an attacker would\r\nhave to perform a public-key-specific collision search in order to find\r\nmessage pairs such that `H(tr || m1) = H(tr || m2)` since a direct hash\r\ncollision `H(m1) = H(m2)` will not suffice. HashML-DSA removes both of\r\nthese enhanced security properties.\r\n```",
              "createdAt": "2025-01-13T14:54:48Z",
              "updatedAt": "2025-01-13T14:54:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6X6V78",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T02:59:30Z",
          "updatedAt": "2025-01-14T02:59:30Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "Sorry, more rephrases\r\n\r\n> Also, this binding means that in the unlikely, theoretical discovery of a collision attack against SHA-3\r\n",
              "createdAt": "2025-01-14T02:59:30Z",
              "updatedAt": "2025-01-14T03:00:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6X6Xco",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T03:01:03Z",
          "updatedAt": "2025-01-14T03:01:04Z",
          "comments": [
            {
              "originalPosition": 138,
              "body": "Look good",
              "createdAt": "2025-01-14T03:01:03Z",
              "updatedAt": "2025-01-14T03:01:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6X6YEi",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T03:01:37Z",
          "updatedAt": "2025-01-14T03:01:38Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Look good. ",
              "createdAt": "2025-01-14T03:01:38Z",
              "updatedAt": "2025-01-14T03:01:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6X-aAH",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T13:36:00Z",
          "updatedAt": "2025-01-14T13:36:01Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "This is a good improvement.",
              "createdAt": "2025-01-14T13:36:01Z",
              "updatedAt": "2025-01-14T13:36:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6X-a-h",
          "commit": {
            "abbreviatedOid": "c6023ac"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T13:37:49Z",
          "updatedAt": "2025-01-14T13:37:49Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "Concretely, can we move the security paragraph second?",
              "createdAt": "2025-01-14T13:37:49Z",
              "updatedAt": "2025-01-14T13:37:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6X_C1R",
          "commit": {
            "abbreviatedOid": "ae6ed79"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T14:29:09Z",
          "updatedAt": "2025-01-14T14:29:10Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "```suggestion\r\nThis restriction is for both implementation and security reasons.\r\n\r\nThe implementation reason for disallowing HashML-DSA stems from the fact\r\nthat ML-DSA and HashML-DSA are incompatible algorithms that require\r\ndifferent `Verify()` routines. This forwards to the protocol the\r\ncomplexity of informing the client whether to use `ML-DSA.Verify()` or\r\n`HashML-DSA.Verify()` along with the hash algorithm to use. Additionally, since\r\nthe same OIDs are used to identify the ML-DSA\r\npublic keys and ML-DSA signature algorithms, an implementation would\r\nneed to commit a given public key to be either of type `ML-DSA` or\r\n`HashML-DSA` at the time of certificate creation. This is anticipated\r\nto cause operational issues in contexts where the operator does not\r\nknow at key generation time whether the key will need to produce pure\r\nor pre-hashed signatures. ExternalMu-ML-DSA avoids all of these\r\noperational concerns by virtue of having keys and signatures that are\r\nindistinguishable from ML-DSA (i.e., ML-DSA and ExternalMu-ML-DSA are\r\nmathematically equivalent algorithms). The difference between ML-DSA\r\nand ExternalMu-ML-DSA is merely an internal implementation detail of\r\nthe signer and has no impact on the verifier or network protocol.\r\n\r\nThe security reason for disallowing HashML-DSA is that the design of the\r\nML-DSA algorithm provides enhanced resistance against signature\r\ncollision attacks, compared with conventional RSA or ECDSA signature\r\nalgorithms. Specifically, ML-DSA binds the hash of the public key `tr`\r\nto the message to-be-signed prior to hashing, as described in line 6 of\r\nAlgorithm 7 of {{FIPS204}}. In practice, this provides binding to the\r\nindended verification public key, preventing some attacks that would\r\notherwise allow a signature to be successfully verified against a\r\nnon-intended public key. Also, this unlikely, theoretical binding means that in the unlikely\r\ndiscovery of a collision attack against SHA-3, an attacker would\r\nhave to perform a public-key-specific collision search in order to find\r\nmessage pairs such that `H(tr || m1) = H(tr || m2)` since a direct hash\r\ncollision `H(m1) = H(m2)` will not suffice. HashML-DSA removes both of\r\nthese enhanced security properties.\r\n```",
              "createdAt": "2025-01-14T14:29:09Z",
              "updatedAt": "2025-01-14T14:29:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6X_ZQ1",
          "commit": {
            "abbreviatedOid": "ae6ed79"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T14:57:26Z",
          "updatedAt": "2025-01-14T14:57:26Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "Perf.",
              "createdAt": "2025-01-14T14:57:26Z",
              "updatedAt": "2025-01-14T14:57:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOIEpj4c6G_JRT",
      "title": "Update Makefile",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/67",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add file dependencies.",
      "createdAt": "2025-01-07T21:13:18Z",
      "updatedAt": "2025-01-22T21:05:35Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "053b6293eaa52c239259b9a2d12b73b3b9985bf8",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-add-deps",
      "headRefOid": "66de18377c6dbf97c6f4689134660222ed24189a",
      "closedAt": "2025-01-07T22:38:08Z",
      "mergedAt": "2025-01-07T22:38:08Z",
      "mergedBy": "bwesterb",
      "mergeCommit": {
        "oid": "44543cd87d64ae1bb6be5385369d998184ca1da9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6XIM1j",
          "commit": {
            "abbreviatedOid": "66de183"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-07T22:38:01Z",
          "updatedAt": "2025-01-07T22:38:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOIEpj4c6HBD27",
      "title": "Removing redundancy about absent parameters",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/68",
      "state": "MERGED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "No need to say it twice.\r\n",
      "createdAt": "2025-01-08T05:01:34Z",
      "updatedAt": "2025-01-08T14:18:21Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "44543cd87d64ae1bb6be5385369d998184ca1da9",
      "headRepository": "csosto-pk/dilithium-certificates",
      "headRefName": "patch-3",
      "headRefOid": "30d993157d053011950315356c26ed51cda99c40",
      "closedAt": "2025-01-08T14:18:21Z",
      "mergedAt": "2025-01-08T14:18:21Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "6447ff910756405e74491418459e3895d9a26104"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6XNo0L",
          "commit": {
            "abbreviatedOid": "30d9931"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-08T11:48:30Z",
          "updatedAt": "2025-01-08T11:48:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOIEpj4c6HBJ2O",
      "title": "Adding reference to the section with the rationale why not HashML-DSA",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/69",
      "state": "MERGED",
      "author": "csosto-pk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-08T05:24:26Z",
      "updatedAt": "2025-01-08T14:18:12Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "seanturner-external_mu-shuffle",
      "baseRefOid": "ea5eba951d4f46fe92ba083d9f8c9f37d869b2ef",
      "headRepository": "csosto-pk/dilithium-certificates",
      "headRefName": "patch-4",
      "headRefOid": "8edf1b7cc1728ed4b1703ec98a9dbabe05ca75d5",
      "closedAt": "2025-01-08T14:18:11Z",
      "mergedAt": "2025-01-08T14:18:11Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "c6023acb33d3c9a4a010783dec5e210613e26f5c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6XNpAJ",
          "commit": {
            "abbreviatedOid": "8edf1b7"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-08T11:48:53Z",
          "updatedAt": "2025-01-08T11:48:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 70,
      "id": "PR_kwDOIEpj4c6HFcjH",
      "title": "Address #66",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/70",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(partial) Closes #66.",
      "createdAt": "2025-01-08T14:36:54Z",
      "updatedAt": "2025-01-22T21:05:37Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "6447ff910756405e74491418459e3895d9a26104",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-66",
      "headRefOid": "9ba541b555515c357fd9c62a7a0968900bd23c46",
      "closedAt": "2025-01-08T14:46:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, this is fixed in #65 so we can close this one out.",
          "createdAt": "2025-01-08T14:46:48Z",
          "updatedAt": "2025-01-08T14:46:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6XPI8H",
          "commit": {
            "abbreviatedOid": "9ba541b"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-08T14:39:26Z",
          "updatedAt": "2025-01-08T14:39:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOIEpj4c6HF3S1",
      "title": "Address #71",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/72",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #71",
      "createdAt": "2025-01-08T15:27:49Z",
      "updatedAt": "2025-01-22T21:06:01Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "6447ff910756405e74491418459e3895d9a26104",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-71",
      "headRefOid": "d12a9c23036dcf5910251777a73c66d2b1f5758d",
      "closedAt": "2025-01-14T14:45:18Z",
      "mergedAt": "2025-01-14T14:45:18Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "b65edf3f8ad8162c4c24d079ea9c7cd3cd607616"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6XP8qd",
          "commit": {
            "abbreviatedOid": "d12a9c2"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-08T15:53:12Z",
          "updatedAt": "2025-01-08T15:53:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOIEpj4c6H1MiX",
      "title": "cms-ml-dsa ask: Set digitalSignature bit in example certificate.",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/73",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This allows draft-ietf-lamps-cms-ml-dsa to reuse our example.",
      "createdAt": "2025-01-15T10:59:47Z",
      "updatedAt": "2025-01-15T17:40:35Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "b65edf3f8ad8162c4c24d079ea9c7cd3cd607616",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "bas/cms-ask",
      "headRefOid": "a7b062beef2cef8c8a433a8d32f6f5a571040d27",
      "closedAt": "2025-01-15T17:40:35Z",
      "mergedAt": "2025-01-15T17:40:35Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "38f4eecfa55428e992ea0b10f395dbae3f7b61ff"
      },
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me!",
          "createdAt": "2025-01-15T17:40:28Z",
          "updatedAt": "2025-01-15T17:40:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6YIH2L",
          "commit": {
            "abbreviatedOid": "a7b062b"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I can confirm that we can now validate our cms-ml-dsa examples with these certificates.",
          "createdAt": "2025-01-15T11:12:10Z",
          "updatedAt": "2025-01-15T11:12:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOIEpj4c6H_G9c",
      "title": "Bring ASN.1 and key encoding text over from cms-ml-dsa draft",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/74",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-16T10:37:28Z",
      "updatedAt": "2025-01-22T19:44:16Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "38f4eecfa55428e992ea0b10f395dbae3f7b61ff",
      "headRepository": "danvangeest/dilithium-certificates",
      "headRefName": "dvg/full_ans1_and_key_encoding",
      "headRefOid": "3adbfbb9c82b6954822794e6d37c612f9849d579",
      "closedAt": "2025-01-22T19:44:16Z",
      "mergedAt": "2025-01-22T19:44:16Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "d01b666b43136ab1cb0469e6358ff665f0d599b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6ZD4dL",
          "commit": {
            "abbreviatedOid": "3adbfbb"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-22T18:06:59Z",
          "updatedAt": "2025-01-22T18:06:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOIEpj4c6Irdh3",
      "title": "KU warning",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/75",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Need to warn that example certificates set KUs for digitialSignature, keyCertSign, and cRLSign, but that might not be a great choice for production CAs.",
      "createdAt": "2025-01-22T21:02:03Z",
      "updatedAt": "2025-01-27T17:11:43Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "d01b666b43136ab1cb0469e6358ff665f0d599b5",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-ku-warning-1",
      "headRefOid": "5f5d8f80e5ad882ceb07a6960dd26bbca652af50",
      "closedAt": "2025-01-27T17:11:32Z",
      "mergedAt": "2025-01-27T17:11:32Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "709c6fd6191fb529c3eb66e83d419618e4ecbaaf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6ZFOJj",
          "commit": {
            "abbreviatedOid": "ab20144"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-22T21:08:06Z",
          "updatedAt": "2025-01-22T21:08:07Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n```",
              "createdAt": "2025-01-22T21:08:06Z",
              "updatedAt": "2025-01-22T21:08:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6ZFPRo",
          "commit": {
            "abbreviatedOid": "57dd217"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-22T21:10:18Z",
          "updatedAt": "2025-01-22T21:10:18Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n```",
              "createdAt": "2025-01-22T21:10:18Z",
              "updatedAt": "2025-01-22T21:10:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6ZFUWm",
          "commit": {
            "abbreviatedOid": "5f5d8f8"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-22T21:23:36Z",
          "updatedAt": "2025-01-22T21:23:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOIEpj4c6LxlB6",
      "title": "Drop comments",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/78",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Remove commented out text.",
      "createdAt": "2025-02-19T16:13:34Z",
      "updatedAt": "2025-02-19T17:18:37Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "709c6fd6191fb529c3eb66e83d419618e4ecbaaf",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-drop-comments",
      "headRefOid": "35dcad7b6c36581dd60b33d4238a2390c49e67eb",
      "closedAt": "2025-02-19T17:18:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm, an issue on line 809? I can't spot why CI is failing.",
          "createdAt": "2025-02-19T17:14:14Z",
          "updatedAt": "2025-02-19T17:14:14Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed via #80.",
          "createdAt": "2025-02-19T17:18:37Z",
          "updatedAt": "2025-02-19T17:18:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6cmqI1",
          "commit": {
            "abbreviatedOid": "35dcad7"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-19T16:34:53Z",
          "updatedAt": "2025-02-19T17:01:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6cm57p",
          "commit": {
            "abbreviatedOid": "881c2ad"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-19T16:59:40Z",
          "updatedAt": "2025-02-19T16:59:41Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "```suggestion\r\n        objects in which they are wrapped.\r\n        \r\n```",
              "createdAt": "2025-02-19T16:59:40Z",
              "updatedAt": "2025-02-19T16:59:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6cm7Qh",
          "commit": {
            "abbreviatedOid": "070de05"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-19T17:01:46Z",
          "updatedAt": "2025-02-19T17:01:47Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2025-02-19T17:01:47Z",
              "updatedAt": "2025-02-19T17:01:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 79,
      "id": "PR_kwDOIEpj4c6LxvrA",
      "title": "Add Acks",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/79",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adding acknowledgements and thanks.",
      "createdAt": "2025-02-19T16:34:24Z",
      "updatedAt": "2025-02-19T17:10:12Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "709c6fd6191fb529c3eb66e83d419618e4ecbaaf",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-add-acks",
      "headRefOid": "f5a108814219018d27d569983ee7507e3308e4c4",
      "closedAt": "2025-02-19T17:10:11Z",
      "mergedAt": "2025-02-19T17:10:11Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "75bd5e07979cdca949636d88d4baf01d55461830"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6cmrSp",
          "commit": {
            "abbreviatedOid": "f5a1088"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-19T16:36:38Z",
          "updatedAt": "2025-02-19T16:36:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOIEpj4c6Lx_Yk",
      "title": "Drop comments (again)",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/80",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixing deletion issues.",
      "createdAt": "2025-02-19T17:04:59Z",
      "updatedAt": "2025-02-19T17:18:54Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "709c6fd6191fb529c3eb66e83d419618e4ecbaaf",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-drops-comments",
      "headRefOid": "cec2da4d526b81b27e3d34df6ab40a30e36d158d",
      "closedAt": "2025-02-19T17:18:54Z",
      "mergedAt": "2025-02-19T17:18:54Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "6142a82a649e5233dd0963b453bb3e3bd3247f11"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry about this couldn't figure out which change was blowing up the other PR so I am redoing it.",
          "createdAt": "2025-02-19T17:12:12Z",
          "updatedAt": "2025-02-19T17:12:12Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah I couldn't spot it either, no worries!",
          "createdAt": "2025-02-19T17:14:52Z",
          "updatedAt": "2025-02-19T17:14:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6cnAoH",
          "commit": {
            "abbreviatedOid": "0642d66"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-19T17:10:40Z",
          "updatedAt": "2025-02-19T17:10:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOIEpj4c6Lz35W",
      "title": "added Implementation Considerations",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/81",
      "state": "MERGED",
      "author": "jakemas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "### Addresses:\r\nIssue https://github.com/lamps-wg/dilithium-certificates/issues/77\r\n\r\n### Call-outs:\r\n\r\nAdded implementation considerations based upon similar draft in the Kyber spec (https://github.com/lamps-wg/kyber-certificates/blob/main/draft-ietf-lamps-kyber-certificates.md#implementation-considerations)\r\n\r\nI used the verbiage from NISTs FAQs at https://csrc.nist.gov/Projects/post-quantum-cryptography/faqs#Rdc7 as the original standard doesn't provide this update.",
      "createdAt": "2025-02-19T21:59:00Z",
      "updatedAt": "2025-02-20T21:27:43Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "6142a82a649e5233dd0963b453bb3e3bd3247f11",
      "headRepository": "jakemas/dilithium-certificates",
      "headRefName": "impl-consid",
      "headRefOid": "3c9e251d9a8b62d4322a5c3f0af8e3ee5049bc02",
      "closedAt": "2025-02-20T21:27:43Z",
      "mergedAt": "2025-02-20T21:27:43Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "0d412a853430352a277c7e5006282e335bc13ab5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6cu0Cw",
          "commit": {
            "abbreviatedOid": "3c9e251"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-20T11:05:50Z",
          "updatedAt": "2025-02-20T11:05:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOIEpj4c6MOG0R",
      "title": "Fix Typo",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/82",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Pubblic -> Public",
      "createdAt": "2025-02-24T01:57:07Z",
      "updatedAt": "2025-02-24T18:18:46Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "0d412a853430352a277c7e5006282e335bc13ab5",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-pubblic",
      "headRefOid": "729997071bbbe95319c992a5dea7266345c296dc",
      "closedAt": "2025-02-24T18:18:45Z",
      "mergedAt": "2025-02-24T18:18:45Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "c48fab342edd1662d2d01572cd47a08f9ab19700"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 83,
      "id": "PR_kwDOIEpj4c6MsEnN",
      "title": "Update ASN.1 Module",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/83",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Updating ASN.1 module.",
      "createdAt": "2025-02-26T18:11:36Z",
      "updatedAt": "2025-02-26T18:48:36Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "c48fab342edd1662d2d01572cd47a08f9ab19700",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-asn-module",
      "headRefOid": "c357b73094c682427ea5af7df90e442b71f53ee8",
      "closedAt": "2025-02-26T18:48:36Z",
      "mergedAt": "2025-02-26T18:48:36Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "79332c3fc4a4eb7ee03062901e3e16a024d6aded"
      },
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "is CI failing just because the file name changed to 2025, and it's checking against the tip of main?",
          "createdAt": "2025-02-26T18:44:56Z",
          "updatedAt": "2025-02-26T18:44:56Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think so. I will go ahead and merge and we'll see if it goes away. Crossing my fingers.",
          "createdAt": "2025-02-26T18:46:45Z",
          "updatedAt": "2025-02-26T18:46:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6drsUR",
          "commit": {
            "abbreviatedOid": "c357b73"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-26T18:30:34Z",
          "updatedAt": "2025-02-26T18:30:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOIEpj4c6MsXpg",
      "title": "Update IANA Considerations",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/84",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Update reference to module name.",
      "createdAt": "2025-02-26T18:55:38Z",
      "updatedAt": "2025-02-26T19:02:00Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "c4d6e222814b0751a31c97a48406524f3f9a75d7",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-iana-considerations",
      "headRefOid": "3bb9f7139e264225f3dda0682317a0a7087f68d4",
      "closedAt": "2025-02-26T19:02:00Z",
      "mergedAt": "2025-02-26T19:01:59Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "0d0cdfe361a0aaa8c5f561222955cfa1dc2eecea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6dsG3Q",
          "commit": {
            "abbreviatedOid": "3bb9f71"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-26T19:01:55Z",
          "updatedAt": "2025-02-26T19:01:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOIEpj4c6MshsF",
      "title": "sa-ml-dsa-*",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/86",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Put text in the main body for sa-ml-dsa-44, sa-ml-dsa-65, and sa-ml-dsa-87.\r\n\r\nCloses #85.",
      "createdAt": "2025-02-26T19:13:37Z",
      "updatedAt": "2025-03-10T15:56:13Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "0d0cdfe361a0aaa8c5f561222955cfa1dc2eecea",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-sa-ml-dsa",
      "headRefOid": "7cdbfb0782247808a912630e4bc10a0fd333130c",
      "closedAt": "2025-03-10T15:56:13Z",
      "mergedAt": "2025-03-10T15:56:13Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "3c9599b1faf3a35d6f88c9be390a12b8d66ef22b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6dsU_3",
          "commit": {
            "abbreviatedOid": "7cdbfb0"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-26T19:23:46Z",
          "updatedAt": "2025-02-26T19:23:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 87,
      "id": "PR_kwDOIEpj4c6MuFiQ",
      "title": "ML-DSA private key details",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/87",
      "state": "MERGED",
      "author": "jakemas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "## Changes to Support Multiple Private Key Formats\r\n\r\nThis PR updates the specification and examples to support three different private key formats as defined in the ASN.1 module:\r\n\r\n## Key Changes\r\n- updated public key section 4 to no longer describe private keys `ML-DSA-XX-PublicKey`\r\n- updated private key section 6 to provide description of `ML-DSA-XX-PrivateKey` e.g.\r\n```\r\nML-DSA-65-PrivateKey ::= CHOICE {\r\n  seed [0] OCTET STRING (SIZE (32)),\r\n  expandedKey OCTET STRING (SIZE (4032)),\r\n  both SEQUENCE {\r\n      seed OCTET STRING (SIZE (32)),\r\n      expandedKey OCTET STRING (SIZE (4032))\r\n      }\r\n  }\r\n```\r\n- updated `generate.go` source code for new examples (seed, expanded, both)\r\n- added new examples (and ASN.1 pretty print)\r\n\r\n## Examples\r\n\r\nEach security level (ML-DSA-44, ML-DSA-65, ML-DSA-87) now includes examples of all three formats, showing:\r\n- How the same seed produces different expanded keys\r\n- ASN.1 structure and encoding\r\n\r\n## Implementation Notes\r\n\r\nThe PR includes updates to the example generation code to support all formats and ensure consistent encoding across implementations.\r\n\r\n",
      "createdAt": "2025-02-26T23:23:39Z",
      "updatedAt": "2025-03-10T16:08:58Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "0d0cdfe361a0aaa8c5f561222955cfa1dc2eecea",
      "headRepository": "jakemas/dilithium-certificates",
      "headRefName": "priv-key",
      "headRefOid": "05e3534146776dc83d2e1bf30c3f16115d75f593",
      "closedAt": "2025-03-10T16:08:58Z",
      "mergedAt": "2025-03-10T16:08:58Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "acbce24a872c8f484dd6562bdb94218e28c62919"
      },
      "comments": [
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "why is only 1 workflow running?",
          "createdAt": "2025-02-27T08:38:51Z",
          "updatedAt": "2025-02-27T08:38:51Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we tag the expandedKey rather than the seed?\r\n\r\n```\r\nML-DSA-65-PrivateKey ::= CHOICE {\r\n  seed OCTET STRING (SIZE (32)),\r\n  expandedKey [0] OCTET STRING (SIZE (4032)),\r\n  both SEQUENCE {\r\n      seed OCTET STRING (SIZE (32)),\r\n      expandedKey OCTET STRING (SIZE (4032))\r\n      }\r\n  }\r\n```\r\n\r\n~~It saves total seed encoding size, i.e. the compressed format.~~ I was hoping we'd also retain closer backwards compatibility with previous versions of the spec, but that isn't the case. We'll leave the tag on the seed.",
          "createdAt": "2025-02-28T07:24:47Z",
          "updatedAt": "2025-03-01T01:41:41Z"
        },
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "> Should we tag the expandedKey rather than the seed?\r\n> \r\n> ```\r\n> ML-DSA-65-PrivateKey ::= CHOICE {\r\n>   seed OCTET STRING (SIZE (32)),\r\n>   expandedKey [0] OCTET STRING (SIZE (4032)),\r\n>   both SEQUENCE {\r\n>       seed OCTET STRING (SIZE (32)),\r\n>       expandedKey OCTET STRING (SIZE (4032))\r\n>       }\r\n>   }\r\n> ```\r\n> \r\n> It saves total seed encoding size, i.e. the compressed format.\r\n\r\nThe tags are **IMPLICIT**, which side has the tag has no impact on size. **ALL** it does is change the tag from `0x04` to `0x80`, the rest of the data is completely unchanged.\r\nSince having the expanded key be an OCTET STRING (rather than IMPLICIT OCTET STRING) interoperates with OQS, it is best to NOT switch the tags.\r\n\r\nIn summary, let's NOT make the switch.",
          "createdAt": "2025-03-01T00:12:22Z",
          "updatedAt": "2025-03-01T00:12:22Z"
        },
        {
          "author": "dghgit",
          "authorAssociation": "NONE",
          "body": "There was a discussion early on about tagging the expanded key instead, but tagging the seed means it's compatible with what we were all shipping prior to IETF Dublin 2024 - Bouncy Castle was also using the expanded key as it was used in the earlier drafts. As Viktor points out, the tag's implicit, so no cost - the expanded-key and seed strings are both \"optimal\".\r\n\r\nSo, yes, tag the seed, no-one's had a great time with the private key encoding, but if we actually manage to emerge with something that's backwards compatible, at least we can finish this knowing some people are happy.",
          "createdAt": "2025-03-01T01:17:32Z",
          "updatedAt": "2025-03-01T01:17:32Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Should we tag the expandedKey rather than the seed?\r\n> > ```\r\n> > ML-DSA-65-PrivateKey ::= CHOICE {\r\n> >   seed OCTET STRING (SIZE (32)),\r\n> >   expandedKey [0] OCTET STRING (SIZE (4032)),\r\n> >   both SEQUENCE {\r\n> >       seed OCTET STRING (SIZE (32)),\r\n> >       expandedKey OCTET STRING (SIZE (4032))\r\n> >       }\r\n> >   }\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > It saves total seed encoding size, i.e. the compressed format.\r\n> \r\n> The tags are **IMPLICIT**, which side has the tag has no impact on size. **ALL** it does is change the tag from `0x04` to `0x80`, the rest of the data is completely unchanged. Since having the expanded key be an OCTET STRING (rather than IMPLICIT OCTET STRING) interoperates with OQS, it is best to NOT switch the tags.\r\n> \r\n> In summary, let's NOT make the switch.\r\n\r\nThank you! Came to this realisation myself today also - agreed. Keep it as it is.",
          "createdAt": "2025-03-01T01:24:39Z",
          "updatedAt": "2025-03-01T01:24:39Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": ">There was a discussion early on about tagging the expanded key instead, but tagging the seed means it's compatible with what we were all shipping prior to IETF Dublin 2024 - Bouncy Castle was also using the expanded key as it was used in the earlier drafts. As Viktor points out, the tag's implicit, so no cost - the expanded-key and seed strings are both \"optimal\".\r\n\r\nCompletely agree here, thank you for the confirmation -- you can see what I was thinking with trying to preserve backwards compatibility with previous versions of the draft here by moving the tag from the seed.\r\n\r\n",
          "createdAt": "2025-03-01T01:38:09Z",
          "updatedAt": "2025-03-01T01:38:09Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you both [dghgit](https://github.com/dghgit) and [vdukhovni](https://github.com/vdukhovni) for taking a look here! I wanted to get both your feedback on the proposed private key format.",
          "createdAt": "2025-03-01T01:48:07Z",
          "updatedAt": "2025-03-01T01:48:07Z"
        },
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "> Thank you both [dghgit](https://github.com/dghgit) and [vdukhovni](https://github.com/vdukhovni) for taking a look here! I wanted to get both your feedback on the proposed private key format.\r\n\r\nMany thanks for the prompt fix. I have confirmed that the new files are identical to those I generate from the same seed for all three choices and all three parameter sets.",
          "createdAt": "2025-03-01T02:12:08Z",
          "updatedAt": "2025-03-01T02:12:08Z"
        },
        {
          "author": "dghgit",
          "authorAssociation": "NONE",
          "body": "Yes, thanks, I can also confirm being able to parse the new files.",
          "createdAt": "2025-03-01T03:28:59Z",
          "updatedAt": "2025-03-01T03:28:59Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This one seems to loose the pretty print. Should we add those back in?",
          "createdAt": "2025-03-05T18:02:05Z",
          "updatedAt": "2025-03-05T18:02:05Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "> This one seems to loose the pretty print. Should we add those back in?\r\n\r\nThanks Sean! Great catch, updated `pretty` to generate these new pretty print examples, and updated make file.",
          "createdAt": "2025-03-05T19:17:38Z",
          "updatedAt": "2025-03-05T19:17:38Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jakemas Are you going to add the section that describes how to generate pk from sk (mentioned in response to Viktor) into this PR or another?\r\n\r\nBTW - I checked all 9 PEM examples and they look right to me.",
          "createdAt": "2025-03-07T20:47:01Z",
          "updatedAt": "2025-03-07T20:47:01Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the review! As the `pk` from `sk` section will be independent of this, and this is already a sizable PR, I will split into a new PR. I created https://github.com/lamps-wg/dilithium-certificates/issues/93 to track the `pk` from `sk` section.",
          "createdAt": "2025-03-07T22:01:43Z",
          "updatedAt": "2025-03-07T22:04:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6eG9dr",
          "commit": {
            "abbreviatedOid": "15df1ec"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "My comments are largely editorial nits based on availability of private -> public key recovery in ML-DSA.",
          "createdAt": "2025-03-02T03:45:52Z",
          "updatedAt": "2025-03-02T03:53:20Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "While the ML-DSA private key does not contain a copy of the public key, the latter can be computed from the private key even in the absence of a seed. So the last sentence is misleading. It seems to suggest that the expanded key would require providing the public key separately, which is not the case.\r\n\r\nComputing the public key from the seed entails:\r\n\r\n1. Generating the private key s1 and s2 vectors and matrix from the seed.\r\n2. Computing the public key from the s1, s2 and the matrix.\r\n\r\nWhile with the expanded key, one need only compute the matrix in step 1.\r\n\r\nSo the \"public\" key is irrelevant here, or else the expanded key actually has an advantage!\r\nThe seed is of course more space efficient vs. the expanded key for representing the private key, and one may be more confident that `s1` and `s2` are validly generated, ... but I don't think the reason given for the preference holds up.",
              "createdAt": "2025-03-02T03:45:53Z",
              "updatedAt": "2025-03-02T03:53:20Z"
            },
            {
              "originalPosition": 129,
              "body": "Same issue here.  The first sentence is correct (more compact representation), but what follows again suggests that the public key can only be recovered from the seed, which is NOT the case. OpenSSL, for example, always recovers the public key from the private alone when importing ML-DSA private keys (if a public key is also supplied on import it is compared with the generated value and the pair reject if it does not match).",
              "createdAt": "2025-03-02T03:49:21Z",
              "updatedAt": "2025-03-02T03:53:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6efci8",
          "commit": {
            "abbreviatedOid": "15df1ec"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-04T21:19:48Z",
          "updatedAt": "2025-03-04T21:19:48Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "I agree with your comments, and understand exactly how the public key can be computed from the private. \r\n\r\nI don't see how this text seems to suggest that the expanded key would require providing the public key separately. It simply points out that the private key expands to both the public and private key, which is not true of other signature schemes -- so I feel important to point out. \r\n\r\n",
              "createdAt": "2025-03-04T21:19:48Z",
              "updatedAt": "2025-03-04T21:19:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6efgf8",
          "commit": {
            "abbreviatedOid": "15df1ec"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-04T21:24:20Z",
          "updatedAt": "2025-03-04T21:24:20Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Agree here also, similarly, AWS-LC does the same, we generate the public key based on the provided private key. Again, the sentence you interpret differently to me is simply pointing out that the seed _can_ provide both pub and priv, not that it can _only_ be recovered this way.\r\n\r\nI was actually going to propose a section in the draft that speaks to how to generate pk from sk, given that this isn't provided in the reference implementation. I mentioned that in this issue: https://github.com/lamps-wg/dilithium-certificates/issues/77. Perhaps such an inclusion can then be referred to in the text you point out here and above, to indicate that the pk can be constructed from the sk. I think that should help satisfy your remarks.",
              "createdAt": "2025-03-04T21:24:20Z",
              "updatedAt": "2025-03-04T21:25:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6eiK66",
          "commit": {
            "abbreviatedOid": "15df1ec"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-05T03:19:17Z",
          "updatedAt": "2025-03-05T03:19:17Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Well, the text seems to say that the seed is recommended **because**:\r\n```\r\nit efficiently stores both the private and public key\r\n```\r\nBut this is NOT a reason to prefer the seed, because the expanded key also stores \"both the private and public key\". If the reason is just that it is smaller than than the expanded key, that should be reason. If the reason is about being sure that the private vectors are valid outputs of keygen, then that should be the reason, ... but avoiding the need to separately provide a public key is NOT a reason that the seed is preferred over `sk`.",
              "createdAt": "2025-03-05T03:19:17Z",
              "updatedAt": "2025-03-05T03:19:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6eiMgV",
          "commit": {
            "abbreviatedOid": "15df1ec"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-05T03:25:46Z",
          "updatedAt": "2025-03-05T03:25:47Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Well, just a subset (5\u20138) of the Algorithm 6 ML-DSA.KeyGen_internal(\ud835\udf09) steps, since the private vectors are generated, and then the public key just from those.",
              "createdAt": "2025-03-05T03:25:46Z",
              "updatedAt": "2025-03-05T03:26:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6fO0zq",
          "commit": {
            "abbreviatedOid": "05e3534"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-10T15:48:21Z",
          "updatedAt": "2025-03-10T15:48:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOIEpj4c6M5kSl",
      "title": "Add Pairwise Consistency Testing section",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/88",
      "state": "MERGED",
      "author": "jakemas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "### Addresses\r\nIssue: https://github.com/lamps-wg/dilithium-certificates/issues/76\r\n\r\n### Description:\r\nThis PR adds a new section specifying recommended pairwise consistency testing procedures for ML-DSA implementations. The changes include:\r\n\r\n- Added new section \"Pairwise Consistency Testing\" with recommendations for:\r\n  - Verifying consistency between seed-derived and provided expanded key material\r\n  - Test message signing and verification\r\n  - Requirements for rejecting inconsistent key pairs\r\n- Fixed citation formatting for FIPS204 reference to ML-DSA.KeyGen_internal\r\n- Aligned with FIPS 140-3 Implementation Guidance Section 10.3.A requirements\r\n- Added FIPS 140-3 reference needed for Implementation Guidance citations\r\n\r\nThe PCTs are a FIPS requirement, but are hidden away in 140-3, so I think it's nice to bring them to the attention here, combined with sanity checks on expanded seeds with provided expanded material. \r\n\r\nGiven this all requires key gen capability, I kept language around RECOMMENDED and SHOULD to keep options open to implementors who might just want to sign/verify. Mostly want to put the onus on key generators here, before first use.\r\n\r\nThese changes help ensure proper validation of ML-DSA key pairs during generation and import operations, which is particularly important for certificate issuance.\r\n\r\nThe PR also fixes a minor citation formatting issue where {{FIPS204}} was incorrectly placed in the middle rather than end of the referenced functions.\r\n\r\nRelated issues: None",
      "createdAt": "2025-02-28T07:20:14Z",
      "updatedAt": "2025-03-10T20:14:32Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "acbce24a872c8f484dd6562bdb94218e28c62919",
      "headRepository": "jakemas/dilithium-certificates",
      "headRefName": "PCT",
      "headRefOid": "96d0f9efba824e42eb620233cc2cdde87d07ad45",
      "closedAt": "2025-03-10T20:14:31Z",
      "mergedAt": "2025-03-10T20:14:31Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "a079dcc4fb1c597a378d7c8ff17d688a0dfe9762"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi! I think the WG has been discussing text that includes a lot less text and I thought the only left was whether the last 2119-requirements is a MUST or SHOULD: \r\n\r\n    When receiving a private key that contains both the seed and the\r\n    expandedKey, the recipient SHOULD perform a seed consistency check to\r\n    ensure that the sender properly generated the private key.  \r\n\r\n    If the check is done and the seed and the expandedKey are not consistent,\r\n    the recipient [MUST/SHOULD] reject the private key as malformed.\r\n",
          "createdAt": "2025-03-05T01:46:03Z",
          "updatedAt": "2025-03-05T01:46:03Z"
        },
        {
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "body": "> Hi! I think the WG has been discussing text that includes a lot less text and I thought the only left was whether the last 2119-requirements is a MUST or SHOULD:\r\n> \r\n> ```\r\n> When receiving a private key that contains both the seed and the\r\n> expandedKey, the recipient SHOULD perform a seed consistency check to\r\n> ensure that the sender properly generated the private key.  \r\n> \r\n> If the check is done and the seed and the expandedKey are not consistent,\r\n> the recipient [MUST/SHOULD] reject the private key as malformed.\r\n> ```\r\n\r\nThanks -- updated accordingly [3664348](https://github.com/lamps-wg/dilithium-certificates/pull/88/commits/366434829e06cde196444e54ec8e807c72de6f7e). I'll keep MUST/SHOULD until that decision is made.",
          "createdAt": "2025-03-05T17:37:36Z",
          "updatedAt": "2025-03-05T17:38:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6eC1my",
          "commit": {
            "abbreviatedOid": "1ae9f73"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-02-28T18:46:04Z",
          "updatedAt": "2025-02-28T18:51:28Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I suggest to remove normative \"RECOMMENDED\". You have a \"SHOULD\" below which I think is fine. ",
              "createdAt": "2025-02-28T18:46:05Z",
              "updatedAt": "2025-02-28T18:51:28Z"
            },
            {
              "originalPosition": 41,
              "body": "\"SHOULD\" CAs generally verify the ML-DSA public key before issuing the cert? ",
              "createdAt": "2025-02-28T18:48:27Z",
              "updatedAt": "2025-02-28T18:51:28Z"
            },
            {
              "originalPosition": 43,
              "body": "I agree with this, but let's see what normative work the WG converges to too. ",
              "createdAt": "2025-02-28T18:49:03Z",
              "updatedAt": "2025-02-28T18:51:28Z"
            },
            {
              "originalPosition": 55,
              "body": "ACK, but let's see what the list decides. There is intricate text being proposed right now. \r\n\r\n> When receiving a private key that contains both the seed and the expandedKey, the recipient SHOULD perform a seed consistency check to ensure that the sender properly generated the private key.\r\n> \r\n> If the check is done and the seed and the expandedKey are not consistent, the recipient MUST reject the private key as malformed.\r\n",
              "createdAt": "2025-02-28T18:51:00Z",
              "updatedAt": "2025-02-28T18:51:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6eDWo_",
          "commit": {
            "abbreviatedOid": "1ae9f73"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-28T20:05:34Z",
          "updatedAt": "2025-02-28T20:05:35Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Thanks, removed in [def88ec](https://github.com/lamps-wg/dilithium-certificates/pull/88/commits/def88ec82eab0e26964913430cdc9edbf736eb9b).",
              "createdAt": "2025-02-28T20:05:34Z",
              "updatedAt": "2025-02-28T20:05:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6eDXIp",
          "commit": {
            "abbreviatedOid": "1ae9f73"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-28T20:06:51Z",
          "updatedAt": "2025-02-28T20:06:51Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Yes, I added some text here to describe what they might like to do, it essentially falls in line exactly with FIPS 204 section 3.6 additional requirements. i.e., check the public key is of the correct size given the parameter set. [def88ec](https://github.com/lamps-wg/dilithium-certificates/pull/88/commits/def88ec82eab0e26964913430cdc9edbf736eb9b)",
              "createdAt": "2025-02-28T20:06:51Z",
              "updatedAt": "2025-02-28T20:06:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6eDXnL",
          "commit": {
            "abbreviatedOid": "1ae9f73"
          },
          "author": "jakemas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-28T20:08:06Z",
          "updatedAt": "2025-02-28T20:08:06Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "Perfect! This seems to read very similar to my proposal. ",
              "createdAt": "2025-02-28T20:08:06Z",
              "updatedAt": "2025-02-28T20:08:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6eG7Dn",
          "commit": {
            "abbreviatedOid": "1ae9f73"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-02T02:02:09Z",
          "updatedAt": "2025-03-02T02:02:09Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "I'd like to suggest that the proposed text is not appropriate in the context of this document.\r\n\r\n1. This document specifies a serialisation format for public and private keys.\r\n    - It is not a replacement of or implementation guide for FIPS 204.\r\n2. In particular, key generation, when not part of seed-based key import is entirely out of scope here.\r\n3. It is also odd to see requirements here that apply to particular uses of the keys, e.g. by Certification Authorities [sic] (the proposal uses the informal term \"Certificate Authorities\").\r\n\r\nIf the goal is to recommend a consistency check when \"both\" the seed and the \"expanded\" key are present in the input, and perhaps require the input be rejected when they don't match, then this is what should be covered, without wading into unrelated implementation guidance for the algorithm generally.",
              "createdAt": "2025-03-02T02:02:09Z",
              "updatedAt": "2025-03-02T02:02:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6fBoxj",
          "commit": {
            "abbreviatedOid": "3664348"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-07T18:23:25Z",
          "updatedAt": "2025-03-07T18:23:26Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nIf the check is done and the seed and the expandedKey are not consistent,\r\nthe recipient MUST reject the private key as malformed.\r\n```\r\n\r\nThis has been suggested on list and it appears to be holding.",
              "createdAt": "2025-03-07T18:23:25Z",
              "updatedAt": "2025-03-07T18:23:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6fGp6J",
          "commit": {
            "abbreviatedOid": "9d98b70"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-09T05:49:12Z",
          "updatedAt": "2025-03-09T05:49:22Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Note this could be misleading, as NIST and the CMVP use the term PCT to refer only to checking the pairwise consistency of a private key with the corresponding public key. Applying it to \"pairwise consistency\" of two distinct representations of the private key is novel, and is not covered by the term PCT in FIPS.\r\n\r\nThe text is mostly fine, but perhaps a different heading (not \"Pairwise Consistency Testing\") would be more appropriate.\r\nHow about \"Private Key consistency testing\". (Two distinct private keys are not a \"key pair\" in the usual sense, though they are two keys).",
              "createdAt": "2025-03-09T05:49:13Z",
              "updatedAt": "2025-03-09T05:49:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6fO7g6",
          "commit": {
            "abbreviatedOid": "9d98b70"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-10T15:57:26Z",
          "updatedAt": "2025-03-10T15:57:27Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n# Private Key Consistency Testing\r\n```",
              "createdAt": "2025-03-10T15:57:26Z",
              "updatedAt": "2025-03-10T15:57:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6fO7rA",
          "commit": {
            "abbreviatedOid": "9d98b70"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-10T15:57:38Z",
          "updatedAt": "2025-03-10T15:57:39Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I can get behind that.",
              "createdAt": "2025-03-10T15:57:39Z",
              "updatedAt": "2025-03-10T15:57:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6fPSpp",
          "commit": {
            "abbreviatedOid": "96d0f9e"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-10T16:30:53Z",
          "updatedAt": "2025-03-10T16:30:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOIEpj4c6NgYzQ",
      "title": "Update workflow permissions",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/90",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add:\r\n\r\n    permissions:\r\n      contents: write",
      "createdAt": "2025-03-05T17:16:43Z",
      "updatedAt": "2025-03-05T17:27:36Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "0d0cdfe361a0aaa8c5f561222955cfa1dc2eecea",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-workflow-permissions",
      "headRefOid": "66ba8ab9201521f6fa836cf59b3085a0b26efcf1",
      "closedAt": "2025-03-05T17:27:35Z",
      "mergedAt": "2025-03-05T17:27:35Z",
      "mergedBy": "jakemas",
      "mergeCommit": {
        "oid": "ec3ae0edf2ea7c555a8fe5aafcb4b356ee242315"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 94,
      "id": "PR_kwDOIEpj4c6OwPdI",
      "title": "Fix nit",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/94",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "drop unnecessary the",
      "createdAt": "2025-03-15T04:51:00Z",
      "updatedAt": "2025-03-17T06:20:47Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "a079dcc4fb1c597a378d7c8ff17d688a0dfe9762",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-nitty-nit-23",
      "headRefOid": "0f366b23d7162826cafc9c6ce10e8696a24bad5a",
      "closedAt": "2025-03-17T06:20:47Z",
      "mergedAt": "2025-03-17T06:20:47Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "b31fd0e78aae016fba0b6c95a4eee3887f5a2208"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6gQScE",
          "commit": {
            "abbreviatedOid": "0f366b2"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-16T11:46:42Z",
          "updatedAt": "2025-03-16T11:46:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 95,
      "id": "PR_kwDOIEpj4c6OwROT",
      "title": "Tweak ML-DSA-PublicKey text",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/95",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Technically there are three of them and you use the size that works for your key size.",
      "createdAt": "2025-03-15T05:00:24Z",
      "updatedAt": "2025-03-17T06:22:34Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "a079dcc4fb1c597a378d7c8ff17d688a0dfe9762",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-mldsa-publickey-text-tweak",
      "headRefOid": "54678e0d93a9124f66737662401efd7219ee1e78",
      "closedAt": "2025-03-17T06:22:34Z",
      "mergedAt": "2025-03-17T06:22:34Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "3a15b10eedf35f42aab42d245f25dd14eebca985"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6gQSbK",
          "commit": {
            "abbreviatedOid": "54678e0"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-16T11:46:29Z",
          "updatedAt": "2025-03-16T11:46:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 96,
      "id": "PR_kwDOIEpj4c6OwVCc",
      "title": "Add internal refs",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/96",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adding two internal refs so we don't have to keep track of numbering.",
      "createdAt": "2025-03-15T05:21:55Z",
      "updatedAt": "2025-03-15T05:26:40Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "a079dcc4fb1c597a378d7c8ff17d688a0dfe9762",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-internal-refs",
      "headRefOid": "3ebb35f9dcd5d3805917f6f16e093baaa954e6ba",
      "closedAt": "2025-03-15T05:26:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 97,
      "id": "PR_kwDOIEpj4c6OwW-y",
      "title": "Internal References",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/97",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This time with the right references.",
      "createdAt": "2025-03-15T05:30:36Z",
      "updatedAt": "2025-03-17T06:24:17Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "a079dcc4fb1c597a378d7c8ff17d688a0dfe9762",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-internal-refs-2",
      "headRefOid": "a0bbfa38806f2701471b2e152ce647905a6ccb37",
      "closedAt": "2025-03-17T06:24:16Z",
      "mergedAt": "2025-03-17T06:24:16Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "39695cd7e7fd15f23a6cff017eff3c37d17b576c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6gQSZU",
          "commit": {
            "abbreviatedOid": "a0bbfa3"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-16T11:45:59Z",
          "updatedAt": "2025-03-16T11:45:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 98,
      "id": "PR_kwDOIEpj4c6OwZjS",
      "title": "Move note",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/98",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We should really move this note up to the beginning of the section.",
      "createdAt": "2025-03-15T05:40:53Z",
      "updatedAt": "2025-03-18T05:55:42Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "a079dcc4fb1c597a378d7c8ff17d688a0dfe9762",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-move-note",
      "headRefOid": "7cb2a01ab0de6c04074bfaca23ab207b18c54a29",
      "closedAt": "2025-03-18T05:06:46Z",
      "mergedAt": "2025-03-18T05:06:46Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "31cdca558fff06169cad5ac0d1dba68a360c11c0"
      },
      "comments": [
        {
          "author": "t-j-h",
          "authorAssociation": "NONE",
          "body": "The wording here still needs adjusting IMHO. \r\nSeed is an option. \r\nBOTH are recommended for maximum interoperablity. \r\n\r\nThis should align with the wording for ML-KEM and not have its own separately phrased/worded approach or we will end up with a non-interoperable context. Anything that propogates a seed-only approach for import and transport inherently limits interoperability. ",
          "createdAt": "2025-03-16T02:53:34Z",
          "updatedAt": "2025-03-16T02:53:34Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we need to recommend both for maximum interop. Both are supported for interop, that is great. But the long discussions in the list made good points for using one if we can afford it. \r\n\r\n+1 on aligning the text from the two drafts. ",
          "createdAt": "2025-03-16T03:10:31Z",
          "updatedAt": "2025-03-16T03:10:31Z"
        },
        {
          "author": "t-j-h",
          "authorAssociation": "NONE",
          "body": "> Both are supported for interop, that is great. But the long discussions in the list made good points for using one if we can afford it.\r\n\r\nWhere you have implemetations that will only process one and not the other (and that is the case currently) then **for maximum interop you _must_ have both**.  Anything short of that is cutting off the implementations that for whatever reason (and there are good reasons to select one **or** the other) will be non-interoperable if you only provide one.  \r\n",
          "createdAt": "2025-03-16T03:39:41Z",
          "updatedAt": "2025-03-16T03:39:41Z"
        },
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "> > Both are supported for interop, that is great. But the long discussions in the list made good points for using one if we can afford it.\r\n> \r\n> Where you have implemetations that will only process one and not the other (and that is the case currently) then **for maximum interop you _must_ have both**. Anything short of that is cutting off the implementations that for whatever reason (and there are good reasons to select one **or** the other) will be non-interoperable if you only provide one.\r\n\r\nOr, in any case, the main reason for publishing both is **interoperability**. Sure you can also do better cross-validation, but that isn't the primary driver. Implementations that support retention of seeds will want to have the seed present, while those that support only the expanded key will need that present.",
          "createdAt": "2025-03-16T10:54:55Z",
          "updatedAt": "2025-03-16T10:54:55Z"
        },
        {
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry @vdukhovni , @t-j-h , I don't see it. It seems we went from adding expanded and supporting both in the ASN.1 to enable some use-cases that adopted early and got NIST certified, to recommending both everywhere. I am not sure it makes sense. Supporting both is not the same as recommending both. ",
          "createdAt": "2025-03-17T02:08:07Z",
          "updatedAt": "2025-03-17T02:08:42Z"
        },
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "> Sorry @vdukhovni , @t-j-h , I don't see it. It seems we went from adding expanded and supporting both in the ASN.1 to enable some use-cases that adopted early and got NIST certified, to recommending both everywhere. I am not sure it makes sense. Supporting both is not the same as recommending both.\r\n\r\nWell, whether or not both is the most recommended, the reason for using it is primarily to maximise interop, not to maximise opportunities for cross checks. If someone has a different priority (minimise size or opportunities for inconsistent input, ...) they might choose seed. Their choice, but from my perspective interop seems to be a sensible priority, others may see it differently.",
          "createdAt": "2025-03-17T02:28:55Z",
          "updatedAt": "2025-03-17T02:28:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6gPxiK",
          "commit": {
            "abbreviatedOid": "2a048b6"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-16T02:29:26Z",
          "updatedAt": "2025-03-16T02:29:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6gQSLO",
          "commit": {
            "abbreviatedOid": "2a048b6"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-16T11:41:58Z",
          "updatedAt": "2025-03-16T11:41:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6gSoed",
          "commit": {
            "abbreviatedOid": "2a048b6"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-17T06:20:20Z",
          "updatedAt": "2025-03-17T06:20:20Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nproduces different expanded keys for each security level.\r\n```\r\n\r\nI think that we should trim this note down. The requirements are found elsewhere in the draft.",
              "createdAt": "2025-03-17T06:20:20Z",
              "updatedAt": "2025-03-17T06:20:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6gStPq",
          "commit": {
            "abbreviatedOid": "2a048b6"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-17T06:30:17Z",
          "updatedAt": "2025-03-17T06:30:18Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Also, the note in the same in the ML-KEM draft [PR](https://github.com/lamps-wg/kyber-certificates/pull/102); if we make this change here I will make the same change over there.",
              "createdAt": "2025-03-17T06:30:17Z",
              "updatedAt": "2025-03-17T06:30:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6gS68a",
          "commit": {
            "abbreviatedOid": "2a048b6"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-17T06:59:44Z",
          "updatedAt": "2025-03-17T06:59:45Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "However a problem remains, in that the initial description of the three formats still emphasises the secondary aspect of the `both` format:\r\nhttps://github.com/lamps-wg/dilithium-certificates/blob/67b52e5c7cfbc7369c7ef27ddb4f83d5fd18489b/draft-ietf-lamps-dilithium-certificates.md?plain=1#L510-L511\r\nIt should instead note that `both` is for interoperability with a broad range of consumers, some that may want to use and retain the seed, others that may only support expanded keys.",
              "createdAt": "2025-03-17T06:59:44Z",
              "updatedAt": "2025-03-17T06:59:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6gTHAl",
          "commit": {
            "abbreviatedOid": "042da08"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-17T07:26:34Z",
          "updatedAt": "2025-03-17T07:26:34Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Ah you were talking about this. I think this captures what you are asking for.",
              "createdAt": "2025-03-17T07:26:34Z",
              "updatedAt": "2025-03-17T07:26:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6gVcRz",
          "commit": {
            "abbreviatedOid": "042da08"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-17T10:34:25Z",
          "updatedAt": "2025-03-17T10:34:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6gWzqJ",
          "commit": {
            "abbreviatedOid": "042da08"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-17T12:40:23Z",
          "updatedAt": "2025-03-17T12:40:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6gY8_Y",
          "commit": {
            "abbreviatedOid": "042da08"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-17T14:57:00Z",
          "updatedAt": "2025-03-17T14:57:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I am good with this, but I would suggest to remove the \"broad range of consumers\". I don't think it adds much. Maybe \r\n\r\n> for interoperability with consumers that may want to use and retain the seed, and others that may only support expanded keys. \r\n\r\nI am not married to it. I would live with the text as is. ",
              "createdAt": "2025-03-17T14:57:00Z",
              "updatedAt": "2025-03-17T14:57:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6gg1Na",
          "commit": {
            "abbreviatedOid": "042da08"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-18T05:00:27Z",
          "updatedAt": "2025-03-18T05:00:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n   for interoperability, some that may\r\n```",
              "createdAt": "2025-03-18T05:00:28Z",
              "updatedAt": "2025-03-18T05:00:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6ghQa4",
          "commit": {
            "abbreviatedOid": "042da08"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-18T05:55:42Z",
          "updatedAt": "2025-03-18T05:55:42Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "The result ended up a bit mangled grammatically. :-(",
              "createdAt": "2025-03-18T05:55:42Z",
              "updatedAt": "2025-03-18T05:55:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 99,
      "id": "PR_kwDOIEpj4c6OwyKZ",
      "title": "Remove some HashML-DSA constraints",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/99",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #92.",
      "createdAt": "2025-03-15T08:14:29Z",
      "updatedAt": "2025-03-17T06:25:17Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "a079dcc4fb1c597a378d7c8ff17d688a0dfe9762",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-address-92",
      "headRefOid": "d9497238fed5aae2c38836915ad876157a8cbf72",
      "closedAt": "2025-03-17T06:25:17Z",
      "mergedAt": "2025-03-17T06:25:17Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "67b52e5c7cfbc7369c7ef27ddb4f83d5fd18489b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6gPxk3",
          "commit": {
            "abbreviatedOid": "d949723"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-16T02:30:11Z",
          "updatedAt": "2025-03-16T02:30:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6gQST3",
          "commit": {
            "abbreviatedOid": "d949723"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-16T11:43:58Z",
          "updatedAt": "2025-03-16T11:43:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOIEpj4c6PDDnJ",
      "title": "Grammar tweaks",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/100",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-18T07:00:47Z",
      "updatedAt": "2025-03-18T07:33:38Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "31cdca558fff06169cad5ac0d1dba68a360c11c0",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-grammar-tweak",
      "headRefOid": "4d0ec62030cb1bc41327348a36a26baf97d31827",
      "closedAt": "2025-03-18T07:33:38Z",
      "mergedAt": "2025-03-18T07:33:38Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "d66c86fe66e8e7e6aa8173e2e8506405065fe49f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6gh42S",
          "commit": {
            "abbreviatedOid": "4d0ec62"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-18T07:06:57Z",
          "updatedAt": "2025-03-18T07:06:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDOIEpj4c6PMkjB",
      "title": "Private Key Format text",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/101",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I hope this addresses #93.",
      "createdAt": "2025-03-19T01:54:16Z",
      "updatedAt": "2025-03-19T06:32:23Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "d66c86fe66e8e7e6aa8173e2e8506405065fe49f",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-key-text",
      "headRefOid": "989efd6f19d8a27a439021208f802c1b539600b8",
      "closedAt": "2025-03-19T06:32:23Z",
      "mergedAt": "2025-03-19T06:32:23Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "5bb2ffad99bb56bc53b1275b9373a0e1607cc8a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6gvF7h",
          "commit": {
            "abbreviatedOid": "8000044"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-19T01:54:29Z",
          "updatedAt": "2025-03-19T01:54:30Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n NOTE: The above syntax is from {{!RFC5912}} and is compatible with\r\n```",
              "createdAt": "2025-03-19T01:54:30Z",
              "updatedAt": "2025-03-19T01:54:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6gvGGF",
          "commit": {
            "abbreviatedOid": "8000044"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-19T01:54:48Z",
          "updatedAt": "2025-03-19T01:54:48Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nNOTE: The above syntax is from {{!RFC5912}} and is compatible with\r\n```",
              "createdAt": "2025-03-19T01:54:48Z",
              "updatedAt": "2025-03-19T01:54:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6gvGTL",
          "commit": {
            "abbreviatedOid": "74e7d8b"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-19T01:55:22Z",
          "updatedAt": "2025-03-19T01:55:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n NOTE: The above syntax is from {{RFC5912}} and is compatible with the\r\n```",
              "createdAt": "2025-03-19T01:55:22Z",
              "updatedAt": "2025-03-19T01:55:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6gvN8A",
          "commit": {
            "abbreviatedOid": "1f55621"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-19T02:22:28Z",
          "updatedAt": "2025-03-19T02:22:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  NOTE: The above syntax is from {{RFC5912}} and is compatible with the\r\n```",
              "createdAt": "2025-03-19T02:22:28Z",
              "updatedAt": "2025-03-19T02:22:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6gwRVJ",
          "commit": {
            "abbreviatedOid": "989efd6"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-19T06:00:40Z",
          "updatedAt": "2025-03-19T06:00:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 103,
      "id": "PR_kwDOIEpj4c6POy09",
      "title": "Add text to appease",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/103",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #102",
      "createdAt": "2025-03-19T08:39:07Z",
      "updatedAt": "2025-03-25T16:45:06Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "5bb2ffad99bb56bc53b1275b9373a0e1607cc8a2",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-more-words",
      "headRefOid": "fe247626f6c5b95c6faf2702501064427975c5e2",
      "closedAt": "2025-03-25T16:45:06Z",
      "mergedAt": "2025-03-25T16:45:06Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "549dd1c4bc5d6d47a1289fbfe512834658cfb66d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6gy5wl",
          "commit": {
            "abbreviatedOid": "1919620"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-19T09:42:31Z",
          "updatedAt": "2025-03-19T09:42:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6hOHKW",
          "commit": {
            "abbreviatedOid": "1919620"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-21T06:07:03Z",
          "updatedAt": "2025-03-21T06:07:03Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nand compare operations, but are unable to ensure that the `seed` and\r\n`expandedKey` match.\r\n```",
              "createdAt": "2025-03-21T06:07:03Z",
              "updatedAt": "2025-03-21T06:07:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6hORwK",
          "commit": {
            "abbreviatedOid": "5fe477a"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-21T06:33:57Z",
          "updatedAt": "2025-03-21T06:33:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nIf the check is done and the seed and the `expandedKey` are not consistent,\r\n```",
              "createdAt": "2025-03-21T06:33:58Z",
              "updatedAt": "2025-03-21T06:33:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6hPild",
          "commit": {
            "abbreviatedOid": "fe24762"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T09:05:21Z",
          "updatedAt": "2025-03-21T09:05:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 107,
      "id": "PR_kwDOIEpj4c6PZPxm",
      "title": "Spell out consistency checks",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/107",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From Dennis; see #104.",
      "createdAt": "2025-03-20T05:04:48Z",
      "updatedAt": "2025-03-25T16:47:06Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "5bb2ffad99bb56bc53b1275b9373a0e1607cc8a2",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-seed-check-text",
      "headRefOid": "aee4695e5615190526e8b6fbcf2f4ef5cfabc018",
      "closedAt": "2025-03-25T16:47:06Z",
      "mergedAt": "2025-03-25T16:47:06Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "22f872c0c50f2d065f87803a80921984726f6b8a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hBsX7",
          "commit": {
            "abbreviatedOid": "c02bbd1"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-20T07:42:23Z",
          "updatedAt": "2025-03-20T07:42:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6hHKhO",
          "commit": {
            "abbreviatedOid": "c02bbd1"
          },
          "author": "dennisjackson",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-20T14:36:59Z",
          "updatedAt": "2025-03-20T14:36:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6hOH6o",
          "commit": {
            "abbreviatedOid": "c02bbd1"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-21T06:08:02Z",
          "updatedAt": "2025-03-21T06:08:03Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nthe seed via `ML-DSA.KeyGen_internal` and ensuring it is bytewise equal to\r\n```",
              "createdAt": "2025-03-21T06:08:03Z",
              "updatedAt": "2025-03-21T06:08:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 108,
      "id": "PR_kwDOIEpj4c6PZRiq",
      "title": "Add privKey parsing text",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/108",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From Dennis; see #105.\r\n\r\n@dennisjackson @vdukhovni PTAL.",
      "createdAt": "2025-03-20T05:09:41Z",
      "updatedAt": "2025-03-25T16:47:31Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "5bb2ffad99bb56bc53b1275b9373a0e1607cc8a2",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-choice-text",
      "headRefOid": "79cd6d852fb6d0031258eccb2f9ed40e5ea7e313",
      "closedAt": "2025-03-25T16:47:31Z",
      "mergedAt": "2025-03-25T16:47:30Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "e4693be309bb55ad164a8ec2349511d4aa1875cf"
      },
      "comments": [
        {
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "body": "> LGTM!\r\n> \r\n> Extremely minor: Referencing both the tag name and the tag value makes the connection clearer for readers. e.g.\r\n> \r\n> > When parsing the private key, the ASN.1 tag explicitly indicates which variant of CHOICE is present. Implementations should use tag `UNIVERSAL IMPLICIT [0]` (raw value `0x80`) for seed only, `OCTET STRING` (`0x04`) for expanded key only, and `SEQUENCE` (`0x30`) for both to parse the private key, rather than any other heuristic like length of the OCTET STRING.\r\n\r\nPerhaps end with: ... length of the *enclosing* OCTET STRING.",
          "createdAt": "2025-03-20T15:22:45Z",
          "updatedAt": "2025-03-20T15:22:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hAjA5",
          "commit": {
            "abbreviatedOid": "65569be"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-20T05:36:58Z",
          "updatedAt": "2025-03-20T05:36:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6hBs1t",
          "commit": {
            "abbreviatedOid": "65569be"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-20T07:43:29Z",
          "updatedAt": "2025-03-20T07:43:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6hHTf1",
          "commit": {
            "abbreviatedOid": "65569be"
          },
          "author": "dennisjackson",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "LGTM! \r\n\r\nExtremely minor: Referencing both the tag name and the tag value makes the connection clearer for readers. e.g.\r\n\r\n>When parsing the private key, the ASN.1 tag explicitly indicates which variant of CHOICE is present. Implementations should use tag `UNIVERSAL IMPLICIT [0]` (raw value `0x80`) for seed only, `OCTET STRING` (`0x04`) for expanded key only, and `SEQUENCE` (`0x30`) for both to parse the private key, rather than any other heuristic like length of the OCTET STRING.\r\n",
          "createdAt": "2025-03-20T14:46:57Z",
          "updatedAt": "2025-03-20T14:47:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6hOKLd",
          "commit": {
            "abbreviatedOid": "65569be"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-21T06:11:29Z",
          "updatedAt": "2025-03-21T06:11:29Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nvariant of `CHOICE` is present. Implementations should use tag `UNIVERSAL IMPLICIT [0]`\r\n(raw value `0x80`) for `seed`, `OCTET STRING` (`0x04`) for `expandedKey`, and\r\n`SEQUENCE` (`0x30`) for `both` to parse the private key, rather than any other heuristic like length of the `OCTET STRING`.\r\n```",
              "createdAt": "2025-03-21T06:11:29Z",
              "updatedAt": "2025-03-21T06:11:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6hOLYm",
          "commit": {
            "abbreviatedOid": "8374729"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-21T06:15:00Z",
          "updatedAt": "2025-03-21T06:15:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nvariant of `CHOICE` is present. Implementations should use tag `UNIVERSAL IMPLICIT [0]`\r\n(raw value `0x80`) for `seed`, `OCTET STRING` (`0x04`) for `expandedKey`, and\r\n`SEQUENCE` (`0x30`) for `both` to parse the private key, rather than any\r\nother heuristic like length of the enclosing `OCTET STRING`.\r\n```",
              "createdAt": "2025-03-21T06:15:00Z",
              "updatedAt": "2025-03-21T06:15:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6hOSFO",
          "commit": {
            "abbreviatedOid": "79cd6d8"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T06:34:59Z",
          "updatedAt": "2025-03-21T06:34:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 109,
      "id": "PR_kwDOIEpj4c6Pjx22",
      "title": "Add quotes for fields",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/109",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "just making it consistent across the draft.",
      "createdAt": "2025-03-21T04:38:00Z",
      "updatedAt": "2025-03-21T05:51:43Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "5bb2ffad99bb56bc53b1275b9373a0e1607cc8a2",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-quotes",
      "headRefOid": "7137110969f087014f3f5c93b0ed1fc253b20a49",
      "closedAt": "2025-03-21T05:51:43Z",
      "mergedAt": "2025-03-21T05:51:43Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "cab83f15c662457baf7b3bc59726ddc5aa19127f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 110,
      "id": "PR_kwDOIEpj4c6PkXSa",
      "title": "Be consistent: expanded private key",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/110",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Sometimes expanded key sometimes expanded private key. Went with the later.",
      "createdAt": "2025-03-21T06:39:00Z",
      "updatedAt": "2025-03-25T16:48:47Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "cab83f15c662457baf7b3bc59726ddc5aa19127f",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-exprivkey-text",
      "headRefOid": "abcadd663fd250f9ee8eaae2c3dee4c841c0f9c5",
      "closedAt": "2025-03-25T16:48:47Z",
      "mergedAt": "2025-03-25T16:48:47Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "01aa34ecd65b6b1928ec9afc63c2fd4a51046bb0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hPhms",
          "commit": {
            "abbreviatedOid": "abcadd6"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T09:03:59Z",
          "updatedAt": "2025-03-21T09:03:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 111,
      "id": "PR_kwDOIEpj4c6Pkaqh",
      "title": "Fix description of CHOICE structure",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/111",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I removed the bit about `OCTET STRING` because only two of the choices are that the other is a `SEQUENCE`.",
      "createdAt": "2025-03-21T06:45:39Z",
      "updatedAt": "2025-03-25T17:02:12Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "cab83f15c662457baf7b3bc59726ddc5aa19127f",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-choice-description",
      "headRefOid": "e9200657a3d49a58d491ad1e0f5006f7984deddc",
      "closedAt": "2025-03-25T17:02:12Z",
      "mergedAt": "2025-03-25T17:02:12Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "63310270af5fc00089aadc56acd2de4f2ac1dc52"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hzBwF",
          "commit": {
            "abbreviatedOid": "2a95222"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-25T16:55:34Z",
          "updatedAt": "2025-03-25T16:55:34Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nthe following DER-encoded `CHOICE` structures. The `seed` format is a\r\nfixed 32 byte `OCTET STRING` (34 bytes total with the `0x8020` tag and\r\nlength) for all security levels, while the `expandedKey` and `both` formats\r\n```",
              "createdAt": "2025-03-25T16:55:34Z",
              "updatedAt": "2025-03-25T16:55:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 112,
      "id": "PR_kwDOIEpj4c6PkkcX",
      "title": "Plural",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/112",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We got lots of examples ;)",
      "createdAt": "2025-03-21T07:10:35Z",
      "updatedAt": "2025-03-21T07:12:02Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "cab83f15c662457baf7b3bc59726ddc5aa19127f",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-plural",
      "headRefOid": "6f65a794fe3c0ebf745e15b98b077d38666bbd97",
      "closedAt": "2025-03-21T07:12:02Z",
      "mergedAt": "2025-03-21T07:12:02Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "9adc709e13335cd02542b38422de8e168020fd21"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 113,
      "id": "PR_kwDOIEpj4c6PlMUS",
      "title": "Add Negative Examples",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/113",
      "state": "OPEN",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Includes Viktor's negative examples; see #104. Also, Closes #104.",
      "createdAt": "2025-03-21T08:43:15Z",
      "updatedAt": "2025-03-26T15:14:27Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "d4d3895b3aa44fe0932a97301bf7a8394286c31e",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-negative-examples",
      "headRefOid": "80f66db1b82e81f5ad811e1c221e15fc62115f39",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@vdukhovni PTAL.",
          "createdAt": "2025-03-21T08:47:32Z",
          "updatedAt": "2025-03-21T08:47:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hQEq6",
          "commit": {
            "abbreviatedOid": "865e77b"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-21T09:52:22Z",
          "updatedAt": "2025-03-21T09:52:22Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "In contrast to the other two, we don't have any normative language (yet) on whether an implementation should accept or reject the third example.",
              "createdAt": "2025-03-21T09:52:22Z",
              "updatedAt": "2025-03-21T09:53:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6hQFQM",
          "commit": {
            "abbreviatedOid": "865e77b"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T09:53:19Z",
          "updatedAt": "2025-03-21T09:53:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6hQJ0N",
          "commit": {
            "abbreviatedOid": "865e77b"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-21T09:59:50Z",
          "updatedAt": "2025-03-21T09:59:50Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "Editorial: $`tr`$ is not $`t(r)`$ and $`t_0`$ is subscripted, not parameterised by `0`.  So, if MATHML is to be avoided perhaps, just \\`tr\\` and \\`t0\\` or \\`t_0\\`?",
              "createdAt": "2025-03-21T09:59:50Z",
              "updatedAt": "2025-03-21T09:59:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6hQPdD",
          "commit": {
            "abbreviatedOid": "865e77b"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-03-21T10:06:17Z",
          "updatedAt": "2025-03-21T10:06:58Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n3. The third is an `expandedKey` for which the recomputed public `t_0`\r\n   fails to match the private key, i.e., the \"low bits\" of the `t` vector computed\r\n   as part of recovering the public key from the private do not match the\r\n   corresponding data in the private key. (Only the \"high bits\" `t_1` are\r\n   ultimately included in the public key).\r\n```",
              "createdAt": "2025-03-21T10:06:18Z",
              "updatedAt": "2025-03-21T10:06:58Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n   hash `tr` fails to match the private key.\r\n```",
              "createdAt": "2025-03-21T10:06:40Z",
              "updatedAt": "2025-03-21T10:06:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6hzYfx",
          "commit": {
            "abbreviatedOid": "fb2fde6"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-25T17:27:30Z",
          "updatedAt": "2025-03-25T17:27:30Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nthen check consistency of tr or t_0.\r\n```",
              "createdAt": "2025-03-25T17:27:30Z",
              "updatedAt": "2025-03-25T17:27:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6hzY_e",
          "commit": {
            "abbreviatedOid": "522e79b"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-25T17:28:17Z",
          "updatedAt": "2025-03-25T17:28:18Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "```suggestion\r\nThe following is the third example:\r\n```",
              "createdAt": "2025-03-25T17:28:18Z",
              "updatedAt": "2025-03-25T17:28:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6h3jKT",
          "commit": {
            "abbreviatedOid": "7ba53ba"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-03-26T01:43:23Z",
          "updatedAt": "2025-03-26T01:59:00Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n{{example-bad}} includes some examples of inconsistent seeds and expanded private\r\n```",
              "createdAt": "2025-03-26T01:43:23Z",
              "updatedAt": "2025-03-26T01:59:00Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n  WARNING: These private keys are purposely bad do not use them in\r\n```",
              "createdAt": "2025-03-26T01:45:02Z",
              "updatedAt": "2025-03-26T01:59:00Z"
            },
            {
              "originalPosition": 45,
              "body": "Only the first example includes `both` (`seed` and `expandedKey`). The second and third examples are `expandedKey`-only. The inconsistency is between the expanded private key and the corresponding public key that can be computed from it. Case \"2\" leads to a public key that fails to match the `tr` hash value in the private key. The private `s_1` and `s_2` vectors in case \"3\" imply a `t` vector whose private low bits do not match the `t_0` vector portion of the private key (its high bits `t_1` are the primary content of the public key).",
              "createdAt": "2025-03-26T01:55:26Z",
              "updatedAt": "2025-03-26T01:59:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6h3nQr",
          "commit": {
            "abbreviatedOid": "7ba53ba"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-26T02:01:57Z",
          "updatedAt": "2025-03-26T02:01:57Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Perhaps here also worth noting that examples \"2\" and \"3\" don't include a seed, the inconsistency is entirely within the expanded key alone, by virtue of the public key, that can (and perhaps should on import) be computed from it, not matching corresponding data in the private key (the `tr` hash and/or the low bits vector `t_0`).",
              "createdAt": "2025-03-26T02:01:57Z",
              "updatedAt": "2025-03-26T02:01:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6h-9AF",
          "commit": {
            "abbreviatedOid": "b1913c6"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-26T15:14:15Z",
          "updatedAt": "2025-03-26T15:14:16Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nthen check consistency of `tr` or `t_0`.\r\n```",
              "createdAt": "2025-03-26T15:14:15Z",
              "updatedAt": "2025-03-26T15:14:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 114,
      "id": "PR_kwDOIEpj4c6PlQm6",
      "title": "Add ASN.1 notes",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/114",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adds notes about ASN.1.",
      "createdAt": "2025-03-21T08:52:51Z",
      "updatedAt": "2025-03-25T17:03:10Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "9adc709e13335cd02542b38422de8e168020fd21",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-asn1-notes",
      "headRefOid": "1cb9836f72646e6bcd2f5abe5a8406ea8b87a48f",
      "closedAt": "2025-03-25T17:03:10Z",
      "mergedAt": "2025-03-25T17:03:10Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "6e29a690b878efc86b8c4e9eccf4909fa85b3434"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hQPaN",
          "commit": {
            "abbreviatedOid": "1cb9836"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T10:06:14Z",
          "updatedAt": "2025-03-21T10:06:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 115,
      "id": "PR_kwDOIEpj4c6Pli4_",
      "title": "More explanation for examples",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/115",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Need to explain that the textual and pretty-print are the same.",
      "createdAt": "2025-03-21T09:27:27Z",
      "updatedAt": "2025-03-25T17:05:18Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "9adc709e13335cd02542b38422de8e168020fd21",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-example-text",
      "headRefOid": "eb19c727d2e37a0813027e573873d2d5637e6024",
      "closedAt": "2025-03-25T17:05:18Z",
      "mergedAt": "2025-03-25T17:05:18Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "b8b62b556737acac259e7db1adb06d32a89de228"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hQBqF",
          "commit": {
            "abbreviatedOid": "eb19c72"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T09:48:59Z",
          "updatedAt": "2025-03-21T09:48:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6hQPye",
          "commit": {
            "abbreviatedOid": "eb19c72"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T10:06:48Z",
          "updatedAt": "2025-03-21T10:06:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOIEpj4c6Pl1lM",
      "title": "Address checks on expanded private key",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/116",
      "state": "OPEN",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This should address #106\r\n\r\nI think we can drop the normative language if that's preferred.\r\n\r\nWe could add normative language around checking s and t consistency, but I guess that would be more of a hassle at this point.",
      "createdAt": "2025-03-21T10:01:37Z",
      "updatedAt": "2025-03-21T10:04:58Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "9adc709e13335cd02542b38422de8e168020fd21",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "bas/106",
      "headRefOid": "05f7604420b7b7978cf58b79831c437c091ccb95",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Examples of additional checks:\r\n\r\n- s_1,s_2 might be out of range. FIPS 204 implies that s_1,s_2 should first be reduced before used and not error.\r\n- t1 might not match s_1,s_2. This will make the signer generate signatures that will not validate. I have not thought about whether this also causes leakage. Even if it does, that doesn't mean we need to check it: setting s_1,s_2 to only \"1\" is clearly a weak key, but we shouldn't check for all those eventualities.",
          "createdAt": "2025-03-21T10:04:56Z",
          "updatedAt": "2025-03-21T10:04:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 117,
      "id": "PR_kwDOIEpj4c6P1PbP",
      "title": "Removes non-ASCII character",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/117",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-24T09:03:11Z",
      "updatedAt": "2025-03-25T17:06:03Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "9adc709e13335cd02542b38422de8e168020fd21",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "ascii",
      "headRefOid": "a2b1ab9f9b8188f56c5ea76e91f47c60594f0074",
      "closedAt": "2025-03-25T17:06:03Z",
      "mergedAt": "2025-03-25T17:06:03Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "46136e39bc9271ec0c9f5cadf032c17dc1574d4b"
      },
      "comments": [
        {
          "author": "russhousley",
          "authorAssociation": "NONE",
          "body": "Thanks for removing the smart quote.",
          "createdAt": "2025-03-24T09:06:23Z",
          "updatedAt": "2025-03-24T09:06:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 118,
      "id": "PR_kwDOIEpj4c6P1ZUk",
      "title": "Shorten a line",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/118",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-24T09:20:22Z",
      "updatedAt": "2025-03-25T17:06:34Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "9adc709e13335cd02542b38422de8e168020fd21",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "bas/shortenline",
      "headRefOid": "64cc69c515e8ec1aac27968c25aefc006567dfc1",
      "closedAt": "2025-03-25T17:06:34Z",
      "mergedAt": "2025-03-25T17:06:34Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "1e9ce227cb840a7d5ccf495b6663c54514f878cf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hmL7Z",
          "commit": {
            "abbreviatedOid": "64cc69c"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-24T17:14:52Z",
          "updatedAt": "2025-03-24T17:14:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "PR_kwDOIEpj4c6P1f_P",
      "title": "Make reference to RFC3647 informational",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/119",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-24T09:31:39Z",
      "updatedAt": "2025-03-25T17:07:15Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "9adc709e13335cd02542b38422de8e168020fd21",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "RFC3647inf",
      "headRefOid": "2806a4083aed97ce0a947afc0e8e722ed0f76f78",
      "closedAt": "2025-03-25T17:07:14Z",
      "mergedAt": "2025-03-25T17:07:14Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "d4d3895b3aa44fe0932a97301bf7a8394286c31e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 120,
      "id": "PR_kwDOIEpj4c6P6sEY",
      "title": "Minor typo fixing / editorial suggestions for external-mu prehash section",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/120",
      "state": "OPEN",
      "author": "samuel-lee-msft",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Some minor suggestions\r\n\r\n+ Fix typos\r\n+ Simplify definition of `ExternalMu-ML-DSA.Prehash` given the `ctx` input is defined to be empty string in this RFC",
      "createdAt": "2025-03-24T18:30:56Z",
      "updatedAt": "2025-03-26T14:23:13Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "174db1bced8cbb50c20fdea2b0fdf980b98d1b54",
      "headRepository": "samuel-lee-msft/dilithium-certificates",
      "headRefName": "samuellee-fix-typos-in-prehashing",
      "headRefOid": "d9599a743d585301e41ea528e6e50b2aea5954a9",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also understand the intention, and I think Samuel raises a good point.\r\n\r\nMy suggestion: `ExternalMu-ML-DSA.Prehash()` -> `ML-DSA.ComputeMu()`\r\n\r\nAlternatively, just leave it as-is because NIST took the nomenclature from this appendix and it is now in the NIST FAQ: https://csrc.nist.gov/csrc/media/Projects/post-quantum-cryptography/documents/faq/fips204-sec6-03192025.pdf\r\n",
          "createdAt": "2025-03-25T09:26:11Z",
          "updatedAt": "2025-03-25T09:26:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hp6vK",
          "commit": {
            "abbreviatedOid": "f7ed24e"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-25T02:23:18Z",
          "updatedAt": "2025-03-25T02:23:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I understand the intention, but I would rather we kept it as-is. ML-DSA is the name for pure in FIPS 204. If we were defining it for HashML-DSA we could call it that. ",
              "createdAt": "2025-03-25T02:23:18Z",
              "updatedAt": "2025-03-25T02:23:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6h2fsM",
          "commit": {
            "abbreviatedOid": "f7ed24e"
          },
          "author": "samuel-lee-msft",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-25T23:30:07Z",
          "updatedAt": "2025-03-25T23:30:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Reverted this part",
              "createdAt": "2025-03-25T23:30:07Z",
              "updatedAt": "2025-03-25T23:30:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIEpj4c6h-Kwt",
          "commit": {
            "abbreviatedOid": "d9599a7"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I have no issues with these updated changes removing the `ctx`  and the other nit fixes. ",
          "createdAt": "2025-03-26T14:22:43Z",
          "updatedAt": "2025-03-26T14:23:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 121,
      "id": "PR_kwDOIEpj4c6QAhvo",
      "title": "Tweak to the presentation of external mu API",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/121",
      "state": "OPEN",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR is based on a hallway chat with @GiacomoPope.",
      "createdAt": "2025-03-25T09:21:35Z",
      "updatedAt": "2025-03-26T17:57:57Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "9adc709e13335cd02542b38422de8e168020fd21",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "mikeo_externalmu_tweak",
      "headRefOid": "ad1e0f06a11592148a6eb8670435ddcba342cc36",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6iBGHb",
          "commit": {
            "abbreviatedOid": "ad1e0f0"
          },
          "author": "samuel-lee-msft",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-26T17:57:56Z",
          "updatedAt": "2025-03-26T17:57:57Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Would need to update this line to:\r\n`sigma = ExternalMu-ML-DSA.Sign_internal(sk, mu, rnd, isExternalMu=true)`",
              "createdAt": "2025-03-26T17:57:56Z",
              "updatedAt": "2025-03-26T17:57:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 122,
      "id": "PR_kwDOIEpj4c6QFUDV",
      "title": "Drop Non-ASCII",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/122",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-25T17:21:57Z",
      "updatedAt": "2025-04-01T10:55:15Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "d4d3895b3aa44fe0932a97301bf7a8394286c31e",
      "headRepository": "lamps-wg/dilithium-certificates",
      "headRefName": "seanturner-non-ascii",
      "headRefOid": "5358b3f0cc05be47a0edb8bc5822c16494324b38",
      "closedAt": "2025-03-25T17:41:23Z",
      "mergedAt": "2025-03-25T17:41:23Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "174db1bced8cbb50c20fdea2b0fdf980b98d1b54"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6hzgvk",
          "commit": {
            "abbreviatedOid": "5358b3f"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-25T17:38:53Z",
          "updatedAt": "2025-03-25T17:38:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6hzhmR",
          "commit": {
            "abbreviatedOid": "5358b3f"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-25T17:40:14Z",
          "updatedAt": "2025-03-25T17:40:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 124,
      "id": "PR_kwDOIEpj4c6QPkrS",
      "title": "indended->intended",
      "url": "https://github.com/lamps-wg/dilithium-certificates/pull/124",
      "state": "OPEN",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-26T16:50:22Z",
      "updatedAt": "2025-03-28T12:28:55Z",
      "baseRepository": "lamps-wg/dilithium-certificates",
      "baseRefName": "main",
      "baseRefOid": "174db1bced8cbb50c20fdea2b0fdf980b98d1b54",
      "headRepository": "danvangeest/dilithium-certificates",
      "headRefName": "dvg/t_is_not_d",
      "headRefOid": "32abed55ac401b5f8b56adbedcbd4c8fbcb7ae8f",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIEpj4c6iFmRf",
          "commit": {
            "abbreviatedOid": "32abed5"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-27T03:36:22Z",
          "updatedAt": "2025-03-27T03:36:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6iFmVP",
          "commit": {
            "abbreviatedOid": "32abed5"
          },
          "author": "csosto-pk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-27T03:36:39Z",
          "updatedAt": "2025-03-27T03:36:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIEpj4c6iccQw",
          "commit": {
            "abbreviatedOid": "32abed5"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-28T12:28:55Z",
          "updatedAt": "2025-03-28T12:28:55Z",
          "comments": []
        }
      ]
    }
  ]
}